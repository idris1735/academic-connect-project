const fs = require('fs')
const path = require('path')

try {
  // Define institutionTypes
  const institutionTypes = [
    {
      value: 'university',
      label: 'University',
      description:
        'Higher education institution offering undergraduate and graduate programs',
      accessCodePattern: {
        admin: '{UNI}-ADMIN-{YY}',
        staff: '{UNI}-STAFF-{YY}',
        department: '{UNI}-DEPT-{YY}',
      },
    },
    {
      value: 'polytechnic',
      label: 'Polytechnic',
      description:
        'Technical institution focusing on vocational and technical education',
      accessCodePattern: {
        admin: '{POLY}-ADMIN-{YY}',
        staff: '{POLY}-STAFF-{YY}',
        department: '{POLY}-DEPT-{YY}',
      },
    },
    {
      value: 'college_of_education',
      label: 'College of Education',
      description: 'Institution specializing in teacher training and education',
      accessCodePattern: {
        admin: '{COE}-ADMIN-{YY}',
        staff: '{COE}-STAFF-{YY}',
        department: '{COE}-DEPT-{YY}',
      },
    },
    {
      value: 'specialized_college',
      label: 'Specialized College',
      description:
        'Colleges focusing on specific fields (health, agriculture, etc.)',
      accessCodePattern: {
        admin: '{SPEC}-ADMIN-{YY}',
        staff: '{SPEC}-STAFF-{YY}',
        department: '{SPEC}-DEPT-{YY}',
      },
    },
  ]

  // Read the source file
  const sourcePath = path.join(__dirname, '../src/data/institution.json')
  const jsonPath = path.join(__dirname, '../src/data/institutions.json')
  const backupPath = path.join(
    __dirname,
    '../src/data/institutions.backup.json'
  )

  // Create backup of existing JSON if it exists
  if (fs.existsSync(jsonPath)) {
    fs.copyFileSync(jsonPath, backupPath)
    console.log('Backup created at:', backupPath)
  }

  // Read and clean the source data
  let rawData = fs
    .readFileSync(sourcePath, 'utf8')
    .replace(/\.\.\.[\s\S]*?\.\.\./g, '') // Remove ... sections
    .replace(/\n\s*\.\.\./g, '') // Remove trailing ...
    .replace(/\s*\(about.*?omitted\)\s*/g, '') // Remove (about X lines omitted)
    .replace(/\s*\(file.*?\)\s*/g, '') // Remove (file...)
    .replace(/\s*\(outdated\)\s*/g, '') // Remove (outdated)

  // Try to extract the institutions array
  let institutions = []
  try {
    // Match all institution objects
    const matches = rawData.match(/{\s*name:.*?}\s*(?=,\s*{|$)/gs)
    if (matches) {
      institutions = matches.map((inst) => {
        // Convert to valid JSON
        return JSON.parse(
          inst
            .replace(/(['"])?([a-zA-Z0-9_]+)(['"])?:/g, '"$2":') // Quote all property names
            .replace(/'/g, '"') // Replace single quotes with double quotes
            .replace(/,(\s*[}\]])/g, '$1') // Remove trailing commas
        )
      })
    }
  } catch (parseError) {
    console.error('Error parsing institutions:', parseError)
    process.exit(1)
  }

  // Validate and clean institutions
  const validInstitutions = institutions.filter((inst) => {
    const isValid =
      inst.name &&
      inst.state &&
      inst.city &&
      inst.abbreviation &&
      inst.institutionType &&
      Array.isArray(inst.departments)

    if (!isValid) {
      console.warn('Filtered out invalid institution:', inst.name || 'Unknown')
    }
    return isValid
  })

  // Remove duplicates
  const uniqueInstitutions = Array.from(
    new Map(validInstitutions.map((item) => [item.abbreviation, item])).values()
  )

  // Sort institutions
  const sortedInstitutions = uniqueInstitutions.sort((a, b) => {
    if (a.institutionType !== b.institutionType) {
      return a.institutionType.localeCompare(b.institutionType)
    }
    return a.name.localeCompare(b.name)
  })

  // Log stats
  console.log('\nStats:')
  console.log('Total institutions found:', institutions.length)
  console.log('Valid institutions:', validInstitutions.length)
  console.log('After removing duplicates:', sortedInstitutions.length)
  console.log(
    'By type:',
    sortedInstitutions.reduce((acc, inst) => {
      acc[inst.institutionType] = (acc[inst.institutionType] || 0) + 1
      return acc
    }, {})
  )

  // Create the final data structure
  const cleanedData = {
    institutionTypes,
    institutions: sortedInstitutions,
  }

  // Write the cleaned JSON
  fs.writeFileSync(jsonPath, JSON.stringify(cleanedData, null, 2))

  // Generate the JavaScript module
  const jsOutput = `// Generated by cleanInstitutionsData.js
import institutionsData from './institutions.json'

export const institutionTypes = institutionsData.institutionTypes
export const nigerianInstitutions = institutionsData.institutions

export const getInstitutionsByType = (type, stateFilter = null) => {
  let institutions = nigerianInstitutions.filter(
    (inst) => inst.institutionType === type
  )

  if (stateFilter && stateFilter !== 'all') {
    institutions = institutions.filter((inst) => inst.state === stateFilter)
  }

  return institutions
}

export const getUniqueStates = () => {
  return [...new Set(nigerianInstitutions.map((inst) => inst.state))].sort()
}

export const getAllInstitutions = (type = null) => {
  return type
    ? nigerianInstitutions.filter((inst) => inst.institutionType === type)
    : nigerianInstitutions
}
`

  // Write the JS module
  fs.writeFileSync(
    path.join(__dirname, '../src/data/institutions.js'),
    jsOutput
  )

  console.log('\nData cleaned and saved successfully!')
} catch (error) {
  console.error('Error:', error.message)
  console.error('Stack:', error.stack)
  process.exit(1)
}
