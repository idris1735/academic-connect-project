"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@stream-io";
exports.ids = ["vendor-chunks/@stream-io"];
exports.modules = {

/***/ "(ssr)/./node_modules/@stream-io/video-client/dist/index.es.js":
/*!***************************************************************!*\
  !*** ./node_modules/@stream-io/video-client/dist/index.es.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AudioSettingsRequestDefaultDeviceEnum: () => (/* binding */ AudioSettingsRequestDefaultDeviceEnum),\n/* harmony export */   AudioSettingsResponseDefaultDeviceEnum: () => (/* binding */ AudioSettingsResponseDefaultDeviceEnum),\n/* harmony export */   AxiosError: () => (/* reexport safe */ axios__WEBPACK_IMPORTED_MODULE_1__.AxiosError),\n/* harmony export */   BlockListOptionsBehaviorEnum: () => (/* binding */ BlockListOptionsBehaviorEnum),\n/* harmony export */   Browsers: () => (/* binding */ browsers),\n/* harmony export */   Call: () => (/* binding */ Call),\n/* harmony export */   CallState: () => (/* binding */ CallState),\n/* harmony export */   CallType: () => (/* binding */ CallType),\n/* harmony export */   CallTypes: () => (/* binding */ CallTypes),\n/* harmony export */   CallingState: () => (/* binding */ CallingState),\n/* harmony export */   CameraManager: () => (/* binding */ CameraManager),\n/* harmony export */   CameraManagerState: () => (/* binding */ CameraManagerState),\n/* harmony export */   ChannelConfigWithInfoAutomodBehaviorEnum: () => (/* binding */ ChannelConfigWithInfoAutomodBehaviorEnum),\n/* harmony export */   ChannelConfigWithInfoAutomodEnum: () => (/* binding */ ChannelConfigWithInfoAutomodEnum),\n/* harmony export */   ChannelConfigWithInfoBlocklistBehaviorEnum: () => (/* binding */ ChannelConfigWithInfoBlocklistBehaviorEnum),\n/* harmony export */   ChannelOwnCapability: () => (/* binding */ ChannelOwnCapability),\n/* harmony export */   CreateDeviceRequestPushProviderEnum: () => (/* binding */ CreateDeviceRequestPushProviderEnum),\n/* harmony export */   DebounceType: () => (/* binding */ DebounceType),\n/* harmony export */   DynascaleManager: () => (/* binding */ DynascaleManager),\n/* harmony export */   ErrorFromResponse: () => (/* binding */ ErrorFromResponse),\n/* harmony export */   InputMediaDeviceManager: () => (/* binding */ InputMediaDeviceManager),\n/* harmony export */   InputMediaDeviceManagerState: () => (/* binding */ InputMediaDeviceManagerState),\n/* harmony export */   MicrophoneManager: () => (/* binding */ MicrophoneManager),\n/* harmony export */   MicrophoneManagerState: () => (/* binding */ MicrophoneManagerState),\n/* harmony export */   NoiseCancellationSettingsModeEnum: () => (/* binding */ NoiseCancellationSettingsModeEnum),\n/* harmony export */   OwnCapability: () => (/* binding */ OwnCapability),\n/* harmony export */   RecordSettingsRequestModeEnum: () => (/* binding */ RecordSettingsRequestModeEnum),\n/* harmony export */   RecordSettingsRequestQualityEnum: () => (/* binding */ RecordSettingsRequestQualityEnum),\n/* harmony export */   RxUtils: () => (/* binding */ rxUtils),\n/* harmony export */   ScreenShareManager: () => (/* binding */ ScreenShareManager),\n/* harmony export */   ScreenShareState: () => (/* binding */ ScreenShareState),\n/* harmony export */   SfuEvents: () => (/* binding */ events),\n/* harmony export */   SfuModels: () => (/* binding */ models),\n/* harmony export */   SpeakerManager: () => (/* binding */ SpeakerManager),\n/* harmony export */   SpeakerState: () => (/* binding */ SpeakerState),\n/* harmony export */   StreamSfuClient: () => (/* binding */ StreamSfuClient),\n/* harmony export */   StreamVideoClient: () => (/* binding */ StreamVideoClient),\n/* harmony export */   StreamVideoReadOnlyStateStore: () => (/* binding */ StreamVideoReadOnlyStateStore),\n/* harmony export */   StreamVideoWriteableStateStore: () => (/* binding */ StreamVideoWriteableStateStore),\n/* harmony export */   TranscriptionSettingsRequestClosedCaptionModeEnum: () => (/* binding */ TranscriptionSettingsRequestClosedCaptionModeEnum),\n/* harmony export */   TranscriptionSettingsRequestModeEnum: () => (/* binding */ TranscriptionSettingsRequestModeEnum),\n/* harmony export */   TranscriptionSettingsResponseClosedCaptionModeEnum: () => (/* binding */ TranscriptionSettingsResponseClosedCaptionModeEnum),\n/* harmony export */   TranscriptionSettingsResponseModeEnum: () => (/* binding */ TranscriptionSettingsResponseModeEnum),\n/* harmony export */   VideoSettingsRequestCameraFacingEnum: () => (/* binding */ VideoSettingsRequestCameraFacingEnum),\n/* harmony export */   VideoSettingsResponseCameraFacingEnum: () => (/* binding */ VideoSettingsResponseCameraFacingEnum),\n/* harmony export */   ViewportTracker: () => (/* binding */ ViewportTracker),\n/* harmony export */   VisibilityState: () => (/* binding */ VisibilityState),\n/* harmony export */   checkIfAudioOutputChangeSupported: () => (/* binding */ checkIfAudioOutputChangeSupported),\n/* harmony export */   combineComparators: () => (/* binding */ combineComparators),\n/* harmony export */   conditional: () => (/* binding */ conditional),\n/* harmony export */   createSoundDetector: () => (/* binding */ createSoundDetector),\n/* harmony export */   defaultSortPreset: () => (/* binding */ defaultSortPreset),\n/* harmony export */   descending: () => (/* binding */ descending),\n/* harmony export */   deviceIds$: () => (/* binding */ deviceIds$),\n/* harmony export */   disposeOfMediaStream: () => (/* binding */ disposeOfMediaStream),\n/* harmony export */   dominantSpeaker: () => (/* binding */ dominantSpeaker),\n/* harmony export */   getAudioBrowserPermission: () => (/* binding */ getAudioBrowserPermission),\n/* harmony export */   getAudioDevices: () => (/* binding */ getAudioDevices),\n/* harmony export */   getAudioOutputDevices: () => (/* binding */ getAudioOutputDevices),\n/* harmony export */   getAudioStream: () => (/* binding */ getAudioStream),\n/* harmony export */   getClientDetails: () => (/* binding */ getClientDetails),\n/* harmony export */   getDeviceInfo: () => (/* binding */ getDeviceInfo),\n/* harmony export */   getDeviceState: () => (/* binding */ getDeviceState),\n/* harmony export */   getLogLevel: () => (/* binding */ getLogLevel),\n/* harmony export */   getLogger: () => (/* binding */ getLogger),\n/* harmony export */   getOSInfo: () => (/* binding */ getOSInfo),\n/* harmony export */   getScreenShareStream: () => (/* binding */ getScreenShareStream),\n/* harmony export */   getSdkInfo: () => (/* binding */ getSdkInfo),\n/* harmony export */   getVideoBrowserPermission: () => (/* binding */ getVideoBrowserPermission),\n/* harmony export */   getVideoDevices: () => (/* binding */ getVideoDevices),\n/* harmony export */   getVideoStream: () => (/* binding */ getVideoStream),\n/* harmony export */   getWebRTCInfo: () => (/* binding */ getWebRTCInfo),\n/* harmony export */   hasAudio: () => (/* binding */ hasAudio),\n/* harmony export */   hasScreenShare: () => (/* binding */ hasScreenShare),\n/* harmony export */   hasScreenShareAudio: () => (/* binding */ hasScreenShareAudio),\n/* harmony export */   hasVideo: () => (/* binding */ hasVideo),\n/* harmony export */   isPinned: () => (/* binding */ isPinned),\n/* harmony export */   livestreamOrAudioRoomSortPreset: () => (/* binding */ livestreamOrAudioRoomSortPreset),\n/* harmony export */   logLevels: () => (/* binding */ logLevels),\n/* harmony export */   logToConsole: () => (/* binding */ logToConsole),\n/* harmony export */   name: () => (/* binding */ name),\n/* harmony export */   noopComparator: () => (/* binding */ noopComparator),\n/* harmony export */   paginatedLayoutSortPreset: () => (/* binding */ paginatedLayoutSortPreset),\n/* harmony export */   pinned: () => (/* binding */ pinned),\n/* harmony export */   publishingAudio: () => (/* binding */ publishingAudio),\n/* harmony export */   publishingVideo: () => (/* binding */ publishingVideo),\n/* harmony export */   reactionType: () => (/* binding */ reactionType),\n/* harmony export */   role: () => (/* binding */ role),\n/* harmony export */   screenSharing: () => (/* binding */ screenSharing),\n/* harmony export */   setDeviceInfo: () => (/* binding */ setDeviceInfo),\n/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel),\n/* harmony export */   setLogger: () => (/* binding */ setLogger),\n/* harmony export */   setOSInfo: () => (/* binding */ setOSInfo),\n/* harmony export */   setPowerState: () => (/* binding */ setPowerState),\n/* harmony export */   setSdkInfo: () => (/* binding */ setSdkInfo),\n/* harmony export */   setThermalState: () => (/* binding */ setThermalState),\n/* harmony export */   setWebRTCInfo: () => (/* binding */ setWebRTCInfo),\n/* harmony export */   speakerLayoutSortPreset: () => (/* binding */ speakerLayoutSortPreset),\n/* harmony export */   speaking: () => (/* binding */ speaking)\n/* harmony export */ });\n/* harmony import */ var webrtc_adapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webrtc-adapter */ \"(ssr)/./node_modules/webrtc-adapter/src/js/adapter_core.js\");\n/* harmony import */ var _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @protobuf-ts/runtime */ \"(ssr)/./node_modules/@protobuf-ts/runtime/build/es2015/message-type.js\");\n/* harmony import */ var _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @protobuf-ts/runtime */ \"(ssr)/./node_modules/@protobuf-ts/runtime/build/es2015/json-typings.js\");\n/* harmony import */ var _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @protobuf-ts/runtime */ \"(ssr)/./node_modules/@protobuf-ts/runtime/build/es2015/pb-long.js\");\n/* harmony import */ var _protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @protobuf-ts/runtime-rpc */ \"(ssr)/./node_modules/@protobuf-ts/runtime-rpc/build/es2015/service-type.js\");\n/* harmony import */ var _protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @protobuf-ts/runtime-rpc */ \"(ssr)/./node_modules/@protobuf-ts/runtime-rpc/build/es2015/rpc-interceptor.js\");\n/* harmony import */ var _protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @protobuf-ts/runtime-rpc */ \"(ssr)/./node_modules/@protobuf-ts/runtime-rpc/build/es2015/rpc-error.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/index.js\");\n/* harmony import */ var _protobuf_ts_twirp_transport__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @protobuf-ts/twirp-transport */ \"(ssr)/./node_modules/@protobuf-ts/twirp-transport/build/es2015/twirp-transport.js\");\n/* harmony import */ var _protobuf_ts_twirp_transport__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @protobuf-ts/twirp-transport */ \"(ssr)/./node_modules/@protobuf-ts/twirp-transport/build/es2015/twitch-twirp-error-code.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/ReplaySubject.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/map.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/takeWhile.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/distinctUntilKeyChanged.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/fromEventPattern.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/from.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/debounceTime.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/merge.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/startWith.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/concatMap.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/pairwise.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,ReplaySubject,combineLatest,concatMap,debounceTime,distinctUntilChanged,distinctUntilKeyChanged,from,fromEvent,fromEventPattern,map,merge,of,pairwise,shareReplay,startWith,takeWhile!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/of.js\");\n/* harmony import */ var sdp_transform__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! sdp-transform */ \"(ssr)/./node_modules/sdp-transform/lib/index.js\");\n/* harmony import */ var ua_parser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ua-parser-js */ \"(ssr)/./node_modules/ua-parser-js/src/ua-parser.js\");\n/* harmony import */ var ua_parser_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(ua_parser_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(https__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\n\n\n\n\n/* tslint:disable */ /* eslint-disable */ /**\n * @export\n */ const AudioSettingsRequestDefaultDeviceEnum = {\n    SPEAKER: 'speaker',\n    EARPIECE: 'earpiece'\n};\n/**\n * @export\n */ const AudioSettingsResponseDefaultDeviceEnum = {\n    SPEAKER: 'speaker',\n    EARPIECE: 'earpiece'\n};\n/**\n * @export\n */ const BlockListOptionsBehaviorEnum = {\n    FLAG: 'flag',\n    BLOCK: 'block',\n    SHADOW_BLOCK: 'shadow_block'\n};\n/**\n * @export\n */ const ChannelConfigWithInfoAutomodEnum = {\n    DISABLED: 'disabled',\n    SIMPLE: 'simple',\n    AI: 'AI'\n};\n/**\n * @export\n */ const ChannelConfigWithInfoAutomodBehaviorEnum = {\n    FLAG: 'flag',\n    BLOCK: 'block',\n    SHADOW_BLOCK: 'shadow_block'\n};\n/**\n * @export\n */ const ChannelConfigWithInfoBlocklistBehaviorEnum = {\n    FLAG: 'flag',\n    BLOCK: 'block',\n    SHADOW_BLOCK: 'shadow_block'\n};\n/**\n * All possibility of string to use\n * @export\n */ const ChannelOwnCapability = {\n    BAN_CHANNEL_MEMBERS: 'ban-channel-members',\n    CAST_POLL_VOTE: 'cast-poll-vote',\n    CONNECT_EVENTS: 'connect-events',\n    CREATE_ATTACHMENT: 'create-attachment',\n    CREATE_CALL: 'create-call',\n    DELETE_ANY_MESSAGE: 'delete-any-message',\n    DELETE_CHANNEL: 'delete-channel',\n    DELETE_OWN_MESSAGE: 'delete-own-message',\n    FLAG_MESSAGE: 'flag-message',\n    FREEZE_CHANNEL: 'freeze-channel',\n    JOIN_CALL: 'join-call',\n    JOIN_CHANNEL: 'join-channel',\n    LEAVE_CHANNEL: 'leave-channel',\n    MUTE_CHANNEL: 'mute-channel',\n    PIN_MESSAGE: 'pin-message',\n    QUERY_POLL_VOTES: 'query-poll-votes',\n    QUOTE_MESSAGE: 'quote-message',\n    READ_EVENTS: 'read-events',\n    SEARCH_MESSAGES: 'search-messages',\n    SEND_CUSTOM_EVENTS: 'send-custom-events',\n    SEND_LINKS: 'send-links',\n    SEND_MESSAGE: 'send-message',\n    SEND_POLL: 'send-poll',\n    SEND_REACTION: 'send-reaction',\n    SEND_REPLY: 'send-reply',\n    SEND_TYPING_EVENTS: 'send-typing-events',\n    SET_CHANNEL_COOLDOWN: 'set-channel-cooldown',\n    SKIP_SLOW_MODE: 'skip-slow-mode',\n    SLOW_MODE: 'slow-mode',\n    TYPING_EVENTS: 'typing-events',\n    UPDATE_ANY_MESSAGE: 'update-any-message',\n    UPDATE_CHANNEL: 'update-channel',\n    UPDATE_CHANNEL_MEMBERS: 'update-channel-members',\n    UPDATE_OWN_MESSAGE: 'update-own-message',\n    UPDATE_THREAD: 'update-thread',\n    UPLOAD_FILE: 'upload-file'\n};\n/**\n * @export\n */ const CreateDeviceRequestPushProviderEnum = {\n    FIREBASE: 'firebase',\n    APN: 'apn',\n    HUAWEI: 'huawei',\n    XIAOMI: 'xiaomi'\n};\n/**\n * @export\n */ const NoiseCancellationSettingsModeEnum = {\n    AVAILABLE: 'available',\n    DISABLED: 'disabled',\n    AUTO_ON: 'auto-on'\n};\n/**\n * All possibility of string to use\n * @export\n */ const OwnCapability = {\n    BLOCK_USERS: 'block-users',\n    CHANGE_MAX_DURATION: 'change-max-duration',\n    CREATE_CALL: 'create-call',\n    CREATE_REACTION: 'create-reaction',\n    ENABLE_NOISE_CANCELLATION: 'enable-noise-cancellation',\n    END_CALL: 'end-call',\n    JOIN_BACKSTAGE: 'join-backstage',\n    JOIN_CALL: 'join-call',\n    JOIN_ENDED_CALL: 'join-ended-call',\n    MUTE_USERS: 'mute-users',\n    PIN_FOR_EVERYONE: 'pin-for-everyone',\n    READ_CALL: 'read-call',\n    REMOVE_CALL_MEMBER: 'remove-call-member',\n    SCREENSHARE: 'screenshare',\n    SEND_AUDIO: 'send-audio',\n    SEND_VIDEO: 'send-video',\n    START_BROADCAST_CALL: 'start-broadcast-call',\n    START_CLOSED_CAPTIONS_CALL: 'start-closed-captions-call',\n    START_RECORD_CALL: 'start-record-call',\n    START_TRANSCRIPTION_CALL: 'start-transcription-call',\n    STOP_BROADCAST_CALL: 'stop-broadcast-call',\n    STOP_CLOSED_CAPTIONS_CALL: 'stop-closed-captions-call',\n    STOP_RECORD_CALL: 'stop-record-call',\n    STOP_TRANSCRIPTION_CALL: 'stop-transcription-call',\n    UPDATE_CALL: 'update-call',\n    UPDATE_CALL_MEMBER: 'update-call-member',\n    UPDATE_CALL_PERMISSIONS: 'update-call-permissions',\n    UPDATE_CALL_SETTINGS: 'update-call-settings'\n};\n/**\n * @export\n */ const RecordSettingsRequestModeEnum = {\n    AVAILABLE: 'available',\n    DISABLED: 'disabled',\n    AUTO_ON: 'auto-on'\n};\n/**\n * @export\n */ const RecordSettingsRequestQualityEnum = {\n    _360P: '360p',\n    _480P: '480p',\n    _720P: '720p',\n    _1080P: '1080p',\n    _1440P: '1440p',\n    PORTRAIT_360X640: 'portrait-360x640',\n    PORTRAIT_480X854: 'portrait-480x854',\n    PORTRAIT_720X1280: 'portrait-720x1280',\n    PORTRAIT_1080X1920: 'portrait-1080x1920',\n    PORTRAIT_1440X2560: 'portrait-1440x2560'\n};\n/**\n * @export\n */ const TranscriptionSettingsRequestClosedCaptionModeEnum = {\n    AVAILABLE: 'available',\n    DISABLED: 'disabled',\n    AUTO_ON: 'auto-on'\n};\n/**\n * @export\n */ const TranscriptionSettingsRequestModeEnum = {\n    AVAILABLE: 'available',\n    DISABLED: 'disabled',\n    AUTO_ON: 'auto-on'\n};\n/**\n * @export\n */ const TranscriptionSettingsResponseClosedCaptionModeEnum = {\n    AVAILABLE: 'available',\n    DISABLED: 'disabled',\n    AUTO_ON: 'auto-on'\n};\n/**\n * @export\n */ const TranscriptionSettingsResponseModeEnum = {\n    AVAILABLE: 'available',\n    DISABLED: 'disabled',\n    AUTO_ON: 'auto-on'\n};\n/**\n * @export\n */ const VideoSettingsRequestCameraFacingEnum = {\n    FRONT: 'front',\n    BACK: 'back',\n    EXTERNAL: 'external'\n};\n/**\n * @export\n */ const VideoSettingsResponseCameraFacingEnum = {\n    FRONT: 'front',\n    BACK: 'back',\n    EXTERNAL: 'external'\n};\nclass ErrorFromResponse extends Error {\n}\n/* eslint-disable */ // @generated by protobuf-ts 2.9.4 with parameter long_type_string,client_generic,server_none,eslint_disable,optimize_code_size\n// @generated from protobuf file \"google/protobuf/struct.proto\" (package \"google.protobuf\", syntax proto3)\n// tslint:disable\n//\n// Protocol Buffers - Google's data interchange format\n// Copyright 2008 Google Inc.  All rights reserved.\n// https://developers.google.com/protocol-buffers/\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//     * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//     * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n/**\n * `NullValue` is a singleton enumeration to represent the null value for the\n * `Value` type union.\n *\n *  The JSON representation for `NullValue` is JSON `null`.\n *\n * @generated from protobuf enum google.protobuf.NullValue\n */ var NullValue;\n(function(NullValue) {\n    /**\n     * Null value.\n     *\n     * @generated from protobuf enum value: NULL_VALUE = 0;\n     */ NullValue[NullValue[\"NULL_VALUE\"] = 0] = \"NULL_VALUE\";\n})(NullValue || (NullValue = {}));\n// @generated message type with reflection information, may provide speed optimized methods\nclass Struct$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('google.protobuf.Struct', [\n            {\n                no: 1,\n                name: 'fields',\n                kind: 'map',\n                K: 9 /*ScalarType.STRING*/ ,\n                V: {\n                    kind: 'message',\n                    T: ()=>Value\n                }\n            }\n        ]);\n    }\n    /**\n     * Encode `Struct` to JSON object.\n     */ internalJsonWrite(message, options) {\n        let json = {};\n        for (let [k, v] of Object.entries(message.fields)){\n            json[k] = Value.toJson(v);\n        }\n        return json;\n    }\n    /**\n     * Decode `Struct` from JSON object.\n     */ internalJsonRead(json, options, target) {\n        if (!(0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.isJsonObject)(json)) throw new globalThis.Error('Unable to parse message ' + this.typeName + ' from JSON ' + (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.typeofJsonValue)(json) + '.');\n        if (!target) target = this.create();\n        for (let [k, v] of globalThis.Object.entries(json)){\n            target.fields[k] = Value.fromJson(v);\n        }\n        return target;\n    }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.Struct\n */ const Struct = new Struct$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Value$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('google.protobuf.Value', [\n            {\n                no: 1,\n                name: 'null_value',\n                kind: 'enum',\n                oneof: 'kind',\n                T: ()=>[\n                        'google.protobuf.NullValue',\n                        NullValue\n                    ]\n            },\n            {\n                no: 2,\n                name: 'number_value',\n                kind: 'scalar',\n                oneof: 'kind',\n                T: 1 /*ScalarType.DOUBLE*/ \n            },\n            {\n                no: 3,\n                name: 'string_value',\n                kind: 'scalar',\n                oneof: 'kind',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: 'bool_value',\n                kind: 'scalar',\n                oneof: 'kind',\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 5,\n                name: 'struct_value',\n                kind: 'message',\n                oneof: 'kind',\n                T: ()=>Struct\n            },\n            {\n                no: 6,\n                name: 'list_value',\n                kind: 'message',\n                oneof: 'kind',\n                T: ()=>ListValue\n            }\n        ]);\n    }\n    /**\n     * Encode `Value` to JSON value.\n     */ internalJsonWrite(message, options) {\n        if (message.kind.oneofKind === undefined) throw new globalThis.Error();\n        switch(message.kind.oneofKind){\n            case undefined:\n                throw new globalThis.Error();\n            case 'boolValue':\n                return message.kind.boolValue;\n            case 'nullValue':\n                return null;\n            case 'numberValue':\n                let numberValue = message.kind.numberValue;\n                if (typeof numberValue == 'number' && !Number.isFinite(numberValue)) throw new globalThis.Error();\n                return numberValue;\n            case 'stringValue':\n                return message.kind.stringValue;\n            case 'listValue':\n                let listValueField = this.fields.find((f)=>f.no === 6);\n                if (listValueField?.kind !== 'message') throw new globalThis.Error();\n                return listValueField.T().toJson(message.kind.listValue);\n            case 'structValue':\n                let structValueField = this.fields.find((f)=>f.no === 5);\n                if (structValueField?.kind !== 'message') throw new globalThis.Error();\n                return structValueField.T().toJson(message.kind.structValue);\n        }\n    }\n    /**\n     * Decode `Value` from JSON value.\n     */ internalJsonRead(json, options, target) {\n        if (!target) target = this.create();\n        switch(typeof json){\n            case 'number':\n                target.kind = {\n                    oneofKind: 'numberValue',\n                    numberValue: json\n                };\n                break;\n            case 'string':\n                target.kind = {\n                    oneofKind: 'stringValue',\n                    stringValue: json\n                };\n                break;\n            case 'boolean':\n                target.kind = {\n                    oneofKind: 'boolValue',\n                    boolValue: json\n                };\n                break;\n            case 'object':\n                if (json === null) {\n                    target.kind = {\n                        oneofKind: 'nullValue',\n                        nullValue: NullValue.NULL_VALUE\n                    };\n                } else if (globalThis.Array.isArray(json)) {\n                    target.kind = {\n                        oneofKind: 'listValue',\n                        listValue: ListValue.fromJson(json)\n                    };\n                } else {\n                    target.kind = {\n                        oneofKind: 'structValue',\n                        structValue: Struct.fromJson(json)\n                    };\n                }\n                break;\n            default:\n                throw new globalThis.Error('Unable to parse ' + this.typeName + ' from JSON ' + (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.typeofJsonValue)(json));\n        }\n        return target;\n    }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.Value\n */ const Value = new Value$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ListValue$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('google.protobuf.ListValue', [\n            {\n                no: 1,\n                name: 'values',\n                kind: 'message',\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>Value\n            }\n        ]);\n    }\n    /**\n     * Encode `ListValue` to JSON array.\n     */ internalJsonWrite(message, options) {\n        return message.values.map((v)=>Value.toJson(v));\n    }\n    /**\n     * Decode `ListValue` from JSON array.\n     */ internalJsonRead(json, options, target) {\n        if (!globalThis.Array.isArray(json)) throw new globalThis.Error('Unable to parse ' + this.typeName + ' from JSON ' + (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.typeofJsonValue)(json));\n        if (!target) target = this.create();\n        let values = json.map((v)=>Value.fromJson(v));\n        target.values.push(...values);\n        return target;\n    }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.ListValue\n */ const ListValue = new ListValue$Type();\n/* eslint-disable */ // @generated by protobuf-ts 2.9.4 with parameter long_type_string,client_generic,server_none,eslint_disable,optimize_code_size\n// @generated from protobuf file \"google/protobuf/timestamp.proto\" (package \"google.protobuf\", syntax proto3)\n// tslint:disable\n//\n// Protocol Buffers - Google's data interchange format\n// Copyright 2008 Google Inc.  All rights reserved.\n// https://developers.google.com/protocol-buffers/\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//     * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//     * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// @generated message type with reflection information, may provide speed optimized methods\nclass Timestamp$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('google.protobuf.Timestamp', [\n            {\n                no: 1,\n                name: 'seconds',\n                kind: 'scalar',\n                T: 3 /*ScalarType.INT64*/ \n            },\n            {\n                no: 2,\n                name: 'nanos',\n                kind: 'scalar',\n                T: 5 /*ScalarType.INT32*/ \n            }\n        ]);\n    }\n    /**\n     * Creates a new `Timestamp` for the current time.\n     */ now() {\n        const msg = this.create();\n        const ms = Date.now();\n        msg.seconds = _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.PbLong.from(Math.floor(ms / 1000)).toString();\n        msg.nanos = ms % 1000 * 1000000;\n        return msg;\n    }\n    /**\n     * Converts a `Timestamp` to a JavaScript Date.\n     */ toDate(message) {\n        return new Date(_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.PbLong.from(message.seconds).toNumber() * 1000 + Math.ceil(message.nanos / 1000000));\n    }\n    /**\n     * Converts a JavaScript Date to a `Timestamp`.\n     */ fromDate(date) {\n        const msg = this.create();\n        const ms = date.getTime();\n        msg.seconds = _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.PbLong.from(Math.floor(ms / 1000)).toString();\n        msg.nanos = ms % 1000 * 1000000;\n        return msg;\n    }\n    /**\n     * In JSON format, the `Timestamp` type is encoded as a string\n     * in the RFC 3339 format.\n     */ internalJsonWrite(message, options) {\n        let ms = _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.PbLong.from(message.seconds).toNumber() * 1000;\n        if (ms < Date.parse('0001-01-01T00:00:00Z') || ms > Date.parse('9999-12-31T23:59:59Z')) throw new Error('Unable to encode Timestamp to JSON. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.');\n        if (message.nanos < 0) throw new Error('Unable to encode invalid Timestamp to JSON. Nanos must not be negative.');\n        let z = 'Z';\n        if (message.nanos > 0) {\n            let nanosStr = (message.nanos + 1000000000).toString().substring(1);\n            if (nanosStr.substring(3) === '000000') z = '.' + nanosStr.substring(0, 3) + 'Z';\n            else if (nanosStr.substring(6) === '000') z = '.' + nanosStr.substring(0, 6) + 'Z';\n            else z = '.' + nanosStr + 'Z';\n        }\n        return new Date(ms).toISOString().replace('.000Z', z);\n    }\n    /**\n     * In JSON format, the `Timestamp` type is encoded as a string\n     * in the RFC 3339 format.\n     */ internalJsonRead(json, options, target) {\n        if (typeof json !== 'string') throw new Error('Unable to parse Timestamp from JSON ' + (0,_protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_6__.typeofJsonValue)(json) + '.');\n        let matches = json.match(/^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(?:Z|\\.([0-9]{3,9})Z|([+-][0-9][0-9]:[0-9][0-9]))$/);\n        if (!matches) throw new Error('Unable to parse Timestamp from JSON. Invalid format.');\n        let ms = Date.parse(matches[1] + '-' + matches[2] + '-' + matches[3] + 'T' + matches[4] + ':' + matches[5] + ':' + matches[6] + (matches[8] ? matches[8] : 'Z'));\n        if (Number.isNaN(ms)) throw new Error('Unable to parse Timestamp from JSON. Invalid value.');\n        if (ms < Date.parse('0001-01-01T00:00:00Z') || ms > Date.parse('9999-12-31T23:59:59Z')) throw new globalThis.Error('Unable to parse Timestamp from JSON. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.');\n        if (!target) target = this.create();\n        target.seconds = _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_7__.PbLong.from(ms / 1000).toString();\n        target.nanos = 0;\n        if (matches[7]) target.nanos = parseInt('1' + matches[7] + '0'.repeat(9 - matches[7].length)) - 1000000000;\n        return target;\n    }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.Timestamp\n */ const Timestamp = new Timestamp$Type();\n/* eslint-disable */ // @generated by protobuf-ts 2.9.4 with parameter long_type_string,client_generic,server_none,eslint_disable,optimize_code_size\n// @generated from protobuf file \"video/sfu/models/models.proto\" (package \"stream.video.sfu.models\", syntax proto3)\n// tslint:disable\n/**\n * @generated from protobuf enum stream.video.sfu.models.PeerType\n */ var PeerType;\n(function(PeerType) {\n    /**\n     * todo fix me (marcelo)\n     *\n     * @generated from protobuf enum value: PEER_TYPE_PUBLISHER_UNSPECIFIED = 0;\n     */ PeerType[PeerType[\"PUBLISHER_UNSPECIFIED\"] = 0] = \"PUBLISHER_UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: PEER_TYPE_SUBSCRIBER = 1;\n     */ PeerType[PeerType[\"SUBSCRIBER\"] = 1] = \"SUBSCRIBER\";\n})(PeerType || (PeerType = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.ConnectionQuality\n */ var ConnectionQuality;\n(function(ConnectionQuality) {\n    /**\n     * @generated from protobuf enum value: CONNECTION_QUALITY_UNSPECIFIED = 0;\n     */ ConnectionQuality[ConnectionQuality[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: CONNECTION_QUALITY_POOR = 1;\n     */ ConnectionQuality[ConnectionQuality[\"POOR\"] = 1] = \"POOR\";\n    /**\n     * @generated from protobuf enum value: CONNECTION_QUALITY_GOOD = 2;\n     */ ConnectionQuality[ConnectionQuality[\"GOOD\"] = 2] = \"GOOD\";\n    /**\n     * @generated from protobuf enum value: CONNECTION_QUALITY_EXCELLENT = 3;\n     */ ConnectionQuality[ConnectionQuality[\"EXCELLENT\"] = 3] = \"EXCELLENT\";\n})(ConnectionQuality || (ConnectionQuality = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.VideoQuality\n */ var VideoQuality;\n(function(VideoQuality) {\n    /**\n     * @generated from protobuf enum value: VIDEO_QUALITY_LOW_UNSPECIFIED = 0;\n     */ VideoQuality[VideoQuality[\"LOW_UNSPECIFIED\"] = 0] = \"LOW_UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: VIDEO_QUALITY_MID = 1;\n     */ VideoQuality[VideoQuality[\"MID\"] = 1] = \"MID\";\n    /**\n     * @generated from protobuf enum value: VIDEO_QUALITY_HIGH = 2;\n     */ VideoQuality[VideoQuality[\"HIGH\"] = 2] = \"HIGH\";\n    /**\n     * @generated from protobuf enum value: VIDEO_QUALITY_OFF = 3;\n     */ VideoQuality[VideoQuality[\"OFF\"] = 3] = \"OFF\";\n})(VideoQuality || (VideoQuality = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.TrackType\n */ var TrackType;\n(function(TrackType) {\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_UNSPECIFIED = 0;\n     */ TrackType[TrackType[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_AUDIO = 1;\n     */ TrackType[TrackType[\"AUDIO\"] = 1] = \"AUDIO\";\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_VIDEO = 2;\n     */ TrackType[TrackType[\"VIDEO\"] = 2] = \"VIDEO\";\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_SCREEN_SHARE = 3;\n     */ TrackType[TrackType[\"SCREEN_SHARE\"] = 3] = \"SCREEN_SHARE\";\n    /**\n     * @generated from protobuf enum value: TRACK_TYPE_SCREEN_SHARE_AUDIO = 4;\n     */ TrackType[TrackType[\"SCREEN_SHARE_AUDIO\"] = 4] = \"SCREEN_SHARE_AUDIO\";\n})(TrackType || (TrackType = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.ErrorCode\n */ var ErrorCode;\n(function(ErrorCode) {\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_UNSPECIFIED = 0;\n     */ ErrorCode[ErrorCode[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACK_NOT_FOUND = 100;\n     */ ErrorCode[ErrorCode[\"PUBLISH_TRACK_NOT_FOUND\"] = 100] = \"PUBLISH_TRACK_NOT_FOUND\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACKS_MISMATCH = 101;\n     */ ErrorCode[ErrorCode[\"PUBLISH_TRACKS_MISMATCH\"] = 101] = \"PUBLISH_TRACKS_MISMATCH\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACK_OUT_OF_ORDER = 102;\n     */ ErrorCode[ErrorCode[\"PUBLISH_TRACK_OUT_OF_ORDER\"] = 102] = \"PUBLISH_TRACK_OUT_OF_ORDER\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND = 103;\n     */ ErrorCode[ErrorCode[\"PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND\"] = 103] = \"PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_LIVE_ENDED = 104;\n     */ ErrorCode[ErrorCode[\"LIVE_ENDED\"] = 104] = \"LIVE_ENDED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_NOT_FOUND = 200;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_NOT_FOUND\"] = 200] = \"PARTICIPANT_NOT_FOUND\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MIGRATING_OUT = 201;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_MIGRATING_OUT\"] = 201] = \"PARTICIPANT_MIGRATING_OUT\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MIGRATION_FAILED = 202;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_MIGRATION_FAILED\"] = 202] = \"PARTICIPANT_MIGRATION_FAILED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MIGRATING = 203;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_MIGRATING\"] = 203] = \"PARTICIPANT_MIGRATING\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_RECONNECT_FAILED = 204;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_RECONNECT_FAILED\"] = 204] = \"PARTICIPANT_RECONNECT_FAILED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MEDIA_TRANSPORT_FAILURE = 205;\n     */ ErrorCode[ErrorCode[\"PARTICIPANT_MEDIA_TRANSPORT_FAILURE\"] = 205] = \"PARTICIPANT_MEDIA_TRANSPORT_FAILURE\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_CALL_NOT_FOUND = 300;\n     */ ErrorCode[ErrorCode[\"CALL_NOT_FOUND\"] = 300] = \"CALL_NOT_FOUND\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_REQUEST_VALIDATION_FAILED = 400;\n     */ ErrorCode[ErrorCode[\"REQUEST_VALIDATION_FAILED\"] = 400] = \"REQUEST_VALIDATION_FAILED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_UNAUTHENTICATED = 401;\n     */ ErrorCode[ErrorCode[\"UNAUTHENTICATED\"] = 401] = \"UNAUTHENTICATED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_PERMISSION_DENIED = 403;\n     */ ErrorCode[ErrorCode[\"PERMISSION_DENIED\"] = 403] = \"PERMISSION_DENIED\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_TOO_MANY_REQUESTS = 429;\n     */ ErrorCode[ErrorCode[\"TOO_MANY_REQUESTS\"] = 429] = \"TOO_MANY_REQUESTS\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_INTERNAL_SERVER_ERROR = 500;\n     */ ErrorCode[ErrorCode[\"INTERNAL_SERVER_ERROR\"] = 500] = \"INTERNAL_SERVER_ERROR\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_SFU_SHUTTING_DOWN = 600;\n     */ ErrorCode[ErrorCode[\"SFU_SHUTTING_DOWN\"] = 600] = \"SFU_SHUTTING_DOWN\";\n    /**\n     * @generated from protobuf enum value: ERROR_CODE_SFU_FULL = 700;\n     */ ErrorCode[ErrorCode[\"SFU_FULL\"] = 700] = \"SFU_FULL\";\n})(ErrorCode || (ErrorCode = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.SdkType\n */ var SdkType;\n(function(SdkType) {\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_UNSPECIFIED = 0;\n     */ SdkType[SdkType[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_REACT = 1;\n     */ SdkType[SdkType[\"REACT\"] = 1] = \"REACT\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_ANGULAR = 2;\n     */ SdkType[SdkType[\"ANGULAR\"] = 2] = \"ANGULAR\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_ANDROID = 3;\n     */ SdkType[SdkType[\"ANDROID\"] = 3] = \"ANDROID\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_IOS = 4;\n     */ SdkType[SdkType[\"IOS\"] = 4] = \"IOS\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_FLUTTER = 5;\n     */ SdkType[SdkType[\"FLUTTER\"] = 5] = \"FLUTTER\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_REACT_NATIVE = 6;\n     */ SdkType[SdkType[\"REACT_NATIVE\"] = 6] = \"REACT_NATIVE\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_UNITY = 7;\n     */ SdkType[SdkType[\"UNITY\"] = 7] = \"UNITY\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_GO = 8;\n     */ SdkType[SdkType[\"GO\"] = 8] = \"GO\";\n    /**\n     * @generated from protobuf enum value: SDK_TYPE_PLAIN_JAVASCRIPT = 9;\n     */ SdkType[SdkType[\"PLAIN_JAVASCRIPT\"] = 9] = \"PLAIN_JAVASCRIPT\";\n})(SdkType || (SdkType = {}));\n/**\n * @generated from protobuf enum stream.video.sfu.models.TrackUnpublishReason\n */ var TrackUnpublishReason;\n(function(TrackUnpublishReason) {\n    /**\n     * Default value which is used when the specific reason\n     * for muting the track is not known.\n     *\n     * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_UNSPECIFIED = 0;\n     */ TrackUnpublishReason[TrackUnpublishReason[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * Represents user muting their tracks.\n     *\n     * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_USER_MUTED = 1;\n     */ TrackUnpublishReason[TrackUnpublishReason[\"USER_MUTED\"] = 1] = \"USER_MUTED\";\n    /**\n     * Represents muting the track because the permission to\n     * publish the track has been revoked.\n     *\n     * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_PERMISSION_REVOKED = 2;\n     */ TrackUnpublishReason[TrackUnpublishReason[\"PERMISSION_REVOKED\"] = 2] = \"PERMISSION_REVOKED\";\n    /**\n     * Represents muting the track due to moderation actions.\n     * This is different from permission revoked because the\n     * participant can unmute themselves here whereas in case\n     * of \"permission revoke\" it is not possible until the\n     * call permissions are updated.\n     *\n     * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_MODERATION = 3;\n     */ TrackUnpublishReason[TrackUnpublishReason[\"MODERATION\"] = 3] = \"MODERATION\";\n})(TrackUnpublishReason || (TrackUnpublishReason = {}));\n/**\n * GoAwayReason represents the reason for the SFU to\n * disconnect the client.\n *\n * @generated from protobuf enum stream.video.sfu.models.GoAwayReason\n */ var GoAwayReason;\n(function(GoAwayReason) {\n    /**\n     * @generated from protobuf enum value: GO_AWAY_REASON_UNSPECIFIED = 0;\n     */ GoAwayReason[GoAwayReason[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: GO_AWAY_REASON_SHUTTING_DOWN = 1;\n     */ GoAwayReason[GoAwayReason[\"SHUTTING_DOWN\"] = 1] = \"SHUTTING_DOWN\";\n    /**\n     * @generated from protobuf enum value: GO_AWAY_REASON_REBALANCE = 2;\n     */ GoAwayReason[GoAwayReason[\"REBALANCE\"] = 2] = \"REBALANCE\";\n})(GoAwayReason || (GoAwayReason = {}));\n/**\n * CallEndedReason represents the reason for the call to end.\n *\n * @generated from protobuf enum stream.video.sfu.models.CallEndedReason\n */ var CallEndedReason;\n(function(CallEndedReason) {\n    /**\n     * @generated from protobuf enum value: CALL_ENDED_REASON_UNSPECIFIED = 0;\n     */ CallEndedReason[CallEndedReason[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: CALL_ENDED_REASON_ENDED = 1;\n     */ CallEndedReason[CallEndedReason[\"ENDED\"] = 1] = \"ENDED\";\n    /**\n     * @generated from protobuf enum value: CALL_ENDED_REASON_LIVE_ENDED = 2;\n     */ CallEndedReason[CallEndedReason[\"LIVE_ENDED\"] = 2] = \"LIVE_ENDED\";\n    /**\n     * @generated from protobuf enum value: CALL_ENDED_REASON_KICKED = 3;\n     */ CallEndedReason[CallEndedReason[\"KICKED\"] = 3] = \"KICKED\";\n    /**\n     * @generated from protobuf enum value: CALL_ENDED_REASON_SESSION_ENDED = 4;\n     */ CallEndedReason[CallEndedReason[\"SESSION_ENDED\"] = 4] = \"SESSION_ENDED\";\n})(CallEndedReason || (CallEndedReason = {}));\n/**\n * WebsocketReconnectStrategy defines the ws strategies available for handling reconnections.\n *\n * @generated from protobuf enum stream.video.sfu.models.WebsocketReconnectStrategy\n */ var WebsocketReconnectStrategy;\n(function(WebsocketReconnectStrategy) {\n    /**\n     * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_UNSPECIFIED = 0;\n     */ WebsocketReconnectStrategy[WebsocketReconnectStrategy[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * Sent after reaching the maximum reconnection attempts, or any other unrecoverable error leading to permanent disconnect.\n     *\n     * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_DISCONNECT = 1;\n     */ WebsocketReconnectStrategy[WebsocketReconnectStrategy[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    /**\n     * SDK should maintaining existing publisher/subscriber pc instances\n     * and establish a new WebSocket connection.\n     *\n     * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_FAST = 2;\n     */ WebsocketReconnectStrategy[WebsocketReconnectStrategy[\"FAST\"] = 2] = \"FAST\";\n    /**\n     * SDK should obtain new credentials from the coordinator, drops existing pc instances, set a new session_id and initializes\n     * a completely new WebSocket connection, ensuring a comprehensive reset.\n     *\n     * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_REJOIN = 3;\n     */ WebsocketReconnectStrategy[WebsocketReconnectStrategy[\"REJOIN\"] = 3] = \"REJOIN\";\n    /**\n     * SDK should migrate to a new SFU instance\n     *\n     * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_MIGRATE = 4;\n     */ WebsocketReconnectStrategy[WebsocketReconnectStrategy[\"MIGRATE\"] = 4] = \"MIGRATE\";\n})(WebsocketReconnectStrategy || (WebsocketReconnectStrategy = {}));\n/**\n * AndroidThermalState is reported by the Android API. The full list of values is documented here\n * https://developer.android.com/reference/android/os/PowerManager.html#getCurrentThermalStatus()\n *\n * @generated from protobuf enum stream.video.sfu.models.AndroidThermalState\n */ var AndroidThermalState;\n(function(AndroidThermalState) {\n    /**\n     * @generated from protobuf enum value: ANDROID_THERMAL_STATE_UNSPECIFIED = 0;\n     */ AndroidThermalState[AndroidThermalState[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: ANDROID_THERMAL_STATE_NONE = 1;\n     */ AndroidThermalState[AndroidThermalState[\"NONE\"] = 1] = \"NONE\";\n    /**\n     * @generated from protobuf enum value: ANDROID_THERMAL_STATE_LIGHT = 2;\n     */ AndroidThermalState[AndroidThermalState[\"LIGHT\"] = 2] = \"LIGHT\";\n    /**\n     * @generated from protobuf enum value: ANDROID_THERMAL_STATE_MODERATE = 3;\n     */ AndroidThermalState[AndroidThermalState[\"MODERATE\"] = 3] = \"MODERATE\";\n    /**\n     * @generated from protobuf enum value: ANDROID_THERMAL_STATE_SEVERE = 4;\n     */ AndroidThermalState[AndroidThermalState[\"SEVERE\"] = 4] = \"SEVERE\";\n    /**\n     * @generated from protobuf enum value: ANDROID_THERMAL_STATE_CRITICAL = 5;\n     */ AndroidThermalState[AndroidThermalState[\"CRITICAL\"] = 5] = \"CRITICAL\";\n    /**\n     * @generated from protobuf enum value: ANDROID_THERMAL_STATE_EMERGENCY = 6;\n     */ AndroidThermalState[AndroidThermalState[\"EMERGENCY\"] = 6] = \"EMERGENCY\";\n    /**\n     * @generated from protobuf enum value: ANDROID_THERMAL_STATE_SHUTDOWN = 7;\n     */ AndroidThermalState[AndroidThermalState[\"SHUTDOWN\"] = 7] = \"SHUTDOWN\";\n})(AndroidThermalState || (AndroidThermalState = {}));\n/**\n * AppleThermalState is the thermal state as reported by Apple devices when available or applicable to the platform.\n * The full list of states (enum) is available here: https://developer.apple.com/documentation/foundation/processinfo/thermalstate\n *\n * @generated from protobuf enum stream.video.sfu.models.AppleThermalState\n */ var AppleThermalState;\n(function(AppleThermalState) {\n    /**\n     * @generated from protobuf enum value: APPLE_THERMAL_STATE_UNSPECIFIED = 0;\n     */ AppleThermalState[AppleThermalState[\"UNSPECIFIED\"] = 0] = \"UNSPECIFIED\";\n    /**\n     * @generated from protobuf enum value: APPLE_THERMAL_STATE_NOMINAL = 1;\n     */ AppleThermalState[AppleThermalState[\"NOMINAL\"] = 1] = \"NOMINAL\";\n    /**\n     * @generated from protobuf enum value: APPLE_THERMAL_STATE_FAIR = 2;\n     */ AppleThermalState[AppleThermalState[\"FAIR\"] = 2] = \"FAIR\";\n    /**\n     * @generated from protobuf enum value: APPLE_THERMAL_STATE_SERIOUS = 3;\n     */ AppleThermalState[AppleThermalState[\"SERIOUS\"] = 3] = \"SERIOUS\";\n    /**\n     * @generated from protobuf enum value: APPLE_THERMAL_STATE_CRITICAL = 4;\n     */ AppleThermalState[AppleThermalState[\"CRITICAL\"] = 4] = \"CRITICAL\";\n})(AppleThermalState || (AppleThermalState = {}));\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallState$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.CallState', [\n            {\n                no: 1,\n                name: 'participants',\n                kind: 'message',\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>Participant\n            },\n            {\n                no: 2,\n                name: 'started_at',\n                kind: 'message',\n                T: ()=>Timestamp\n            },\n            {\n                no: 3,\n                name: 'participant_count',\n                kind: 'message',\n                T: ()=>ParticipantCount\n            },\n            {\n                no: 4,\n                name: 'pins',\n                kind: 'message',\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>Pin\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.CallState\n */ const CallState$1 = new CallState$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantCount$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.ParticipantCount', [\n            {\n                no: 1,\n                name: 'total',\n                kind: 'scalar',\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 2,\n                name: 'anonymous',\n                kind: 'scalar',\n                T: 13 /*ScalarType.UINT32*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.ParticipantCount\n */ const ParticipantCount = new ParticipantCount$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Pin$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.Pin', [\n            {\n                no: 1,\n                name: 'user_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Pin\n */ const Pin = new Pin$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Participant$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.Participant', [\n            {\n                no: 1,\n                name: 'user_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'published_tracks',\n                kind: 'enum',\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>[\n                        'stream.video.sfu.models.TrackType',\n                        TrackType,\n                        'TRACK_TYPE_'\n                    ]\n            },\n            {\n                no: 4,\n                name: 'joined_at',\n                kind: 'message',\n                T: ()=>Timestamp\n            },\n            {\n                no: 5,\n                name: 'track_lookup_prefix',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 6,\n                name: 'connection_quality',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.ConnectionQuality',\n                        ConnectionQuality,\n                        'CONNECTION_QUALITY_'\n                    ]\n            },\n            {\n                no: 7,\n                name: 'is_speaking',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 8,\n                name: 'is_dominant_speaker',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 9,\n                name: 'audio_level',\n                kind: 'scalar',\n                T: 2 /*ScalarType.FLOAT*/ \n            },\n            {\n                no: 10,\n                name: 'name',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 11,\n                name: 'image',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 12,\n                name: 'custom',\n                kind: 'message',\n                T: ()=>Struct\n            },\n            {\n                no: 13,\n                name: 'roles',\n                kind: 'scalar',\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Participant\n */ const Participant = new Participant$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StreamQuality$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.StreamQuality', [\n            {\n                no: 1,\n                name: 'video_quality',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.VideoQuality',\n                        VideoQuality,\n                        'VIDEO_QUALITY_'\n                    ]\n            },\n            {\n                no: 2,\n                name: 'user_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.StreamQuality\n */ const StreamQuality = new StreamQuality$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoDimension$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.VideoDimension', [\n            {\n                no: 1,\n                name: 'width',\n                kind: 'scalar',\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 2,\n                name: 'height',\n                kind: 'scalar',\n                T: 13 /*ScalarType.UINT32*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.VideoDimension\n */ const VideoDimension = new VideoDimension$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoLayer$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.VideoLayer', [\n            {\n                no: 1,\n                name: 'rid',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'video_dimension',\n                kind: 'message',\n                T: ()=>VideoDimension\n            },\n            {\n                no: 4,\n                name: 'bitrate',\n                kind: 'scalar',\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 5,\n                name: 'fps',\n                kind: 'scalar',\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 6,\n                name: 'quality',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.VideoQuality',\n                        VideoQuality,\n                        'VIDEO_QUALITY_'\n                    ]\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.VideoLayer\n */ const VideoLayer = new VideoLayer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubscribeOption$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.SubscribeOption', [\n            {\n                no: 1,\n                name: 'track_type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.TrackType',\n                        TrackType,\n                        'TRACK_TYPE_'\n                    ]\n            },\n            {\n                no: 2,\n                name: 'codecs',\n                kind: 'message',\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>Codec\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.SubscribeOption\n */ const SubscribeOption = new SubscribeOption$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PublishOption$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.PublishOption', [\n            {\n                no: 1,\n                name: 'track_type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.TrackType',\n                        TrackType,\n                        'TRACK_TYPE_'\n                    ]\n            },\n            {\n                no: 2,\n                name: 'codec',\n                kind: 'message',\n                T: ()=>Codec\n            },\n            {\n                no: 3,\n                name: 'bitrate',\n                kind: 'scalar',\n                T: 5 /*ScalarType.INT32*/ \n            },\n            {\n                no: 4,\n                name: 'fps',\n                kind: 'scalar',\n                T: 5 /*ScalarType.INT32*/ \n            },\n            {\n                no: 5,\n                name: 'max_spatial_layers',\n                kind: 'scalar',\n                T: 5 /*ScalarType.INT32*/ \n            },\n            {\n                no: 6,\n                name: 'max_temporal_layers',\n                kind: 'scalar',\n                T: 5 /*ScalarType.INT32*/ \n            },\n            {\n                no: 7,\n                name: 'video_dimension',\n                kind: 'message',\n                T: ()=>VideoDimension\n            },\n            {\n                no: 8,\n                name: 'id',\n                kind: 'scalar',\n                T: 5 /*ScalarType.INT32*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.PublishOption\n */ const PublishOption = new PublishOption$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Codec$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.Codec', [\n            {\n                no: 16,\n                name: 'payload_type',\n                kind: 'scalar',\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 10,\n                name: 'name',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 14,\n                name: 'clock_rate',\n                kind: 'scalar',\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 15,\n                name: 'encoding_parameters',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 12,\n                name: 'fmtp',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Codec\n */ const Codec = new Codec$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nlet ICETrickle$Type$1 = class ICETrickle$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.ICETrickle', [\n            {\n                no: 1,\n                name: 'peer_type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.PeerType',\n                        PeerType,\n                        'PEER_TYPE_'\n                    ]\n            },\n            {\n                no: 2,\n                name: 'ice_candidate',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n};\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.ICETrickle\n */ const ICETrickle$1 = new ICETrickle$Type$1();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackInfo$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.TrackInfo', [\n            {\n                no: 1,\n                name: 'track_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'track_type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.TrackType',\n                        TrackType,\n                        'TRACK_TYPE_'\n                    ]\n            },\n            {\n                no: 5,\n                name: 'layers',\n                kind: 'message',\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>VideoLayer\n            },\n            {\n                no: 6,\n                name: 'mid',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 7,\n                name: 'dtx',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 8,\n                name: 'stereo',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 9,\n                name: 'red',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 10,\n                name: 'muted',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 11,\n                name: 'codec',\n                kind: 'message',\n                T: ()=>Codec\n            },\n            {\n                no: 12,\n                name: 'publish_option_id',\n                kind: 'scalar',\n                T: 5 /*ScalarType.INT32*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.TrackInfo\n */ const TrackInfo = new TrackInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nlet Error$Type$1 = class Error$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.Error', [\n            {\n                no: 1,\n                name: 'code',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.ErrorCode',\n                        ErrorCode,\n                        'ERROR_CODE_'\n                    ]\n            },\n            {\n                no: 2,\n                name: 'message',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'should_retry',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n};\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Error\n */ const Error$2 = new Error$Type$1();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ClientDetails$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.ClientDetails', [\n            {\n                no: 1,\n                name: 'sdk',\n                kind: 'message',\n                T: ()=>Sdk\n            },\n            {\n                no: 2,\n                name: 'os',\n                kind: 'message',\n                T: ()=>OS\n            },\n            {\n                no: 3,\n                name: 'browser',\n                kind: 'message',\n                T: ()=>Browser\n            },\n            {\n                no: 4,\n                name: 'device',\n                kind: 'message',\n                T: ()=>Device\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.ClientDetails\n */ const ClientDetails = new ClientDetails$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Sdk$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.Sdk', [\n            {\n                no: 1,\n                name: 'type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.SdkType',\n                        SdkType,\n                        'SDK_TYPE_'\n                    ]\n            },\n            {\n                no: 2,\n                name: 'major',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'minor',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: 'patch',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Sdk\n */ const Sdk = new Sdk$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass OS$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.OS', [\n            {\n                no: 1,\n                name: 'name',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'version',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'architecture',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.OS\n */ const OS = new OS$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Browser$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.Browser', [\n            {\n                no: 1,\n                name: 'name',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'version',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Browser\n */ const Browser = new Browser$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Device$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.Device', [\n            {\n                no: 1,\n                name: 'name',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'version',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Device\n */ const Device = new Device$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Call$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.Call', [\n            {\n                no: 1,\n                name: 'type',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'created_by_user_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: 'host_user_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 5,\n                name: 'custom',\n                kind: 'message',\n                T: ()=>Struct\n            },\n            {\n                no: 6,\n                name: 'created_at',\n                kind: 'message',\n                T: ()=>Timestamp\n            },\n            {\n                no: 7,\n                name: 'updated_at',\n                kind: 'message',\n                T: ()=>Timestamp\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Call\n */ const Call$1 = new Call$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallGrants$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.CallGrants', [\n            {\n                no: 1,\n                name: 'can_publish_audio',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 2,\n                name: 'can_publish_video',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 3,\n                name: 'can_screenshare',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.CallGrants\n */ const CallGrants = new CallGrants$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass InputDevices$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.InputDevices', [\n            {\n                no: 1,\n                name: 'available_devices',\n                kind: 'scalar',\n                repeat: 2 /*RepeatType.UNPACKED*/ ,\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'current_device',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'is_permitted',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.InputDevices\n */ const InputDevices = new InputDevices$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AndroidState$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.AndroidState', [\n            {\n                no: 1,\n                name: 'thermal_state',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.AndroidThermalState',\n                        AndroidThermalState,\n                        'ANDROID_THERMAL_STATE_'\n                    ]\n            },\n            {\n                no: 2,\n                name: 'is_power_saver_mode',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.AndroidState\n */ const AndroidState = new AndroidState$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AppleState$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.models.AppleState', [\n            {\n                no: 1,\n                name: 'thermal_state',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.AppleThermalState',\n                        AppleThermalState,\n                        'APPLE_THERMAL_STATE_'\n                    ]\n            },\n            {\n                no: 2,\n                name: 'is_low_power_mode_enabled',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.AppleState\n */ const AppleState = new AppleState$Type();\nvar models = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    AndroidState: AndroidState,\n    get AndroidThermalState () {\n        return AndroidThermalState;\n    },\n    AppleState: AppleState,\n    get AppleThermalState () {\n        return AppleThermalState;\n    },\n    Browser: Browser,\n    Call: Call$1,\n    get CallEndedReason () {\n        return CallEndedReason;\n    },\n    CallGrants: CallGrants,\n    CallState: CallState$1,\n    ClientDetails: ClientDetails,\n    Codec: Codec,\n    get ConnectionQuality () {\n        return ConnectionQuality;\n    },\n    Device: Device,\n    Error: Error$2,\n    get ErrorCode () {\n        return ErrorCode;\n    },\n    get GoAwayReason () {\n        return GoAwayReason;\n    },\n    ICETrickle: ICETrickle$1,\n    InputDevices: InputDevices,\n    OS: OS,\n    Participant: Participant,\n    ParticipantCount: ParticipantCount,\n    get PeerType () {\n        return PeerType;\n    },\n    Pin: Pin,\n    PublishOption: PublishOption,\n    Sdk: Sdk,\n    get SdkType () {\n        return SdkType;\n    },\n    StreamQuality: StreamQuality,\n    SubscribeOption: SubscribeOption,\n    TrackInfo: TrackInfo,\n    get TrackType () {\n        return TrackType;\n    },\n    get TrackUnpublishReason () {\n        return TrackUnpublishReason;\n    },\n    VideoDimension: VideoDimension,\n    VideoLayer: VideoLayer,\n    get VideoQuality () {\n        return VideoQuality;\n    },\n    get WebsocketReconnectStrategy () {\n        return WebsocketReconnectStrategy;\n    }\n});\n/* eslint-disable */ // @generated by protobuf-ts 2.9.4 with parameter long_type_string,client_generic,server_none,eslint_disable,optimize_code_size\n// @generated from protobuf file \"video/sfu/signal_rpc/signal.proto\" (package \"stream.video.sfu.signal\", syntax proto3)\n// tslint:disable\n// @generated message type with reflection information, may provide speed optimized methods\nclass StartNoiseCancellationRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.StartNoiseCancellationRequest', [\n            {\n                no: 1,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.StartNoiseCancellationRequest\n */ const StartNoiseCancellationRequest = new StartNoiseCancellationRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StartNoiseCancellationResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.StartNoiseCancellationResponse', [\n            {\n                no: 1,\n                name: 'error',\n                kind: 'message',\n                T: ()=>Error$2\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.StartNoiseCancellationResponse\n */ const StartNoiseCancellationResponse = new StartNoiseCancellationResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StopNoiseCancellationRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.StopNoiseCancellationRequest', [\n            {\n                no: 1,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.StopNoiseCancellationRequest\n */ const StopNoiseCancellationRequest = new StopNoiseCancellationRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StopNoiseCancellationResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.StopNoiseCancellationResponse', [\n            {\n                no: 1,\n                name: 'error',\n                kind: 'message',\n                T: ()=>Error$2\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.StopNoiseCancellationResponse\n */ const StopNoiseCancellationResponse = new StopNoiseCancellationResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Reconnection$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.Reconnection', [\n            {\n                no: 1,\n                name: 'time_seconds',\n                kind: 'scalar',\n                T: 2 /*ScalarType.FLOAT*/ \n            },\n            {\n                no: 2,\n                name: 'strategy',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.WebsocketReconnectStrategy',\n                        WebsocketReconnectStrategy,\n                        'WEBSOCKET_RECONNECT_STRATEGY_'\n                    ]\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.Reconnection\n */ const Reconnection = new Reconnection$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Telemetry$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.Telemetry', [\n            {\n                no: 1,\n                name: 'connection_time_seconds',\n                kind: 'scalar',\n                oneof: 'data',\n                T: 2 /*ScalarType.FLOAT*/ \n            },\n            {\n                no: 2,\n                name: 'reconnection',\n                kind: 'message',\n                oneof: 'data',\n                T: ()=>Reconnection\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.Telemetry\n */ const Telemetry = new Telemetry$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendStatsRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.SendStatsRequest', [\n            {\n                no: 1,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'subscriber_stats',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'publisher_stats',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: 'webrtc_version',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 5,\n                name: 'sdk',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 6,\n                name: 'sdk_version',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 7,\n                name: 'audio_devices',\n                kind: 'message',\n                T: ()=>InputDevices\n            },\n            {\n                no: 8,\n                name: 'video_devices',\n                kind: 'message',\n                T: ()=>InputDevices\n            },\n            {\n                no: 9,\n                name: 'android',\n                kind: 'message',\n                oneof: 'deviceState',\n                T: ()=>AndroidState\n            },\n            {\n                no: 10,\n                name: 'apple',\n                kind: 'message',\n                oneof: 'deviceState',\n                T: ()=>AppleState\n            },\n            {\n                no: 11,\n                name: 'telemetry',\n                kind: 'message',\n                T: ()=>Telemetry\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendStatsRequest\n */ const SendStatsRequest = new SendStatsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendStatsResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.SendStatsResponse', [\n            {\n                no: 1,\n                name: 'error',\n                kind: 'message',\n                T: ()=>Error$2\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendStatsResponse\n */ const SendStatsResponse = new SendStatsResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICERestartRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.ICERestartRequest', [\n            {\n                no: 1,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'peer_type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.PeerType',\n                        PeerType,\n                        'PEER_TYPE_'\n                    ]\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.ICERestartRequest\n */ const ICERestartRequest = new ICERestartRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICERestartResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.ICERestartResponse', [\n            {\n                no: 1,\n                name: 'error',\n                kind: 'message',\n                T: ()=>Error$2\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.ICERestartResponse\n */ const ICERestartResponse = new ICERestartResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateMuteStatesRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.UpdateMuteStatesRequest', [\n            {\n                no: 1,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'mute_states',\n                kind: 'message',\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>TrackMuteState\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateMuteStatesRequest\n */ const UpdateMuteStatesRequest = new UpdateMuteStatesRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateMuteStatesResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.UpdateMuteStatesResponse', [\n            {\n                no: 4,\n                name: 'error',\n                kind: 'message',\n                T: ()=>Error$2\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateMuteStatesResponse\n */ const UpdateMuteStatesResponse = new UpdateMuteStatesResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackMuteState$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.TrackMuteState', [\n            {\n                no: 1,\n                name: 'track_type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.TrackType',\n                        TrackType,\n                        'TRACK_TYPE_'\n                    ]\n            },\n            {\n                no: 2,\n                name: 'muted',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.TrackMuteState\n */ const TrackMuteState = new TrackMuteState$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioMuteChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.AudioMuteChanged', [\n            {\n                no: 1,\n                name: 'muted',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.AudioMuteChanged\n */ new AudioMuteChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoMuteChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.VideoMuteChanged', [\n            {\n                no: 2,\n                name: 'muted',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.VideoMuteChanged\n */ new VideoMuteChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateSubscriptionsRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.UpdateSubscriptionsRequest', [\n            {\n                no: 2,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'tracks',\n                kind: 'message',\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>TrackSubscriptionDetails\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateSubscriptionsRequest\n */ const UpdateSubscriptionsRequest = new UpdateSubscriptionsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateSubscriptionsResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.UpdateSubscriptionsResponse', [\n            {\n                no: 4,\n                name: 'error',\n                kind: 'message',\n                T: ()=>Error$2\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateSubscriptionsResponse\n */ const UpdateSubscriptionsResponse = new UpdateSubscriptionsResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackSubscriptionDetails$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.TrackSubscriptionDetails', [\n            {\n                no: 1,\n                name: 'user_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'track_type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.TrackType',\n                        TrackType,\n                        'TRACK_TYPE_'\n                    ]\n            },\n            {\n                no: 4,\n                name: 'dimension',\n                kind: 'message',\n                T: ()=>VideoDimension\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.TrackSubscriptionDetails\n */ const TrackSubscriptionDetails = new TrackSubscriptionDetails$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendAnswerRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.SendAnswerRequest', [\n            {\n                no: 1,\n                name: 'peer_type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.PeerType',\n                        PeerType,\n                        'PEER_TYPE_'\n                    ]\n            },\n            {\n                no: 2,\n                name: 'sdp',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendAnswerRequest\n */ const SendAnswerRequest = new SendAnswerRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendAnswerResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.SendAnswerResponse', [\n            {\n                no: 4,\n                name: 'error',\n                kind: 'message',\n                T: ()=>Error$2\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendAnswerResponse\n */ const SendAnswerResponse = new SendAnswerResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICETrickleResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.ICETrickleResponse', [\n            {\n                no: 4,\n                name: 'error',\n                kind: 'message',\n                T: ()=>Error$2\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.ICETrickleResponse\n */ const ICETrickleResponse = new ICETrickleResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SetPublisherRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.SetPublisherRequest', [\n            {\n                no: 1,\n                name: 'sdp',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'tracks',\n                kind: 'message',\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>TrackInfo\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SetPublisherRequest\n */ const SetPublisherRequest = new SetPublisherRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SetPublisherResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.signal.SetPublisherResponse', [\n            {\n                no: 1,\n                name: 'sdp',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'ice_restart',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 4,\n                name: 'error',\n                kind: 'message',\n                T: ()=>Error$2\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SetPublisherResponse\n */ const SetPublisherResponse = new SetPublisherResponse$Type();\n/**\n * @generated ServiceType for protobuf service stream.video.sfu.signal.SignalServer\n */ const SignalServer = new _protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_8__.ServiceType('stream.video.sfu.signal.SignalServer', [\n    {\n        name: 'SetPublisher',\n        options: {},\n        I: SetPublisherRequest,\n        O: SetPublisherResponse\n    },\n    {\n        name: 'SendAnswer',\n        options: {},\n        I: SendAnswerRequest,\n        O: SendAnswerResponse\n    },\n    {\n        name: 'IceTrickle',\n        options: {},\n        I: ICETrickle$1,\n        O: ICETrickleResponse\n    },\n    {\n        name: 'UpdateSubscriptions',\n        options: {},\n        I: UpdateSubscriptionsRequest,\n        O: UpdateSubscriptionsResponse\n    },\n    {\n        name: 'UpdateMuteStates',\n        options: {},\n        I: UpdateMuteStatesRequest,\n        O: UpdateMuteStatesResponse\n    },\n    {\n        name: 'IceRestart',\n        options: {},\n        I: ICERestartRequest,\n        O: ICERestartResponse\n    },\n    {\n        name: 'SendStats',\n        options: {},\n        I: SendStatsRequest,\n        O: SendStatsResponse\n    },\n    {\n        name: 'StartNoiseCancellation',\n        options: {},\n        I: StartNoiseCancellationRequest,\n        O: StartNoiseCancellationResponse\n    },\n    {\n        name: 'StopNoiseCancellation',\n        options: {},\n        I: StopNoiseCancellationRequest,\n        O: StopNoiseCancellationResponse\n    }\n]);\n/* eslint-disable */ // @generated by protobuf-ts 2.9.4 with parameter long_type_string,client_generic,server_none,eslint_disable,optimize_code_size\n// @generated from protobuf file \"video/sfu/event/events.proto\" (package \"stream.video.sfu.event\", syntax proto3)\n// tslint:disable\n// @generated message type with reflection information, may provide speed optimized methods\nclass SfuEvent$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.SfuEvent', [\n            {\n                no: 1,\n                name: 'subscriber_offer',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>SubscriberOffer\n            },\n            {\n                no: 2,\n                name: 'publisher_answer',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>PublisherAnswer\n            },\n            {\n                no: 3,\n                name: 'connection_quality_changed',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>ConnectionQualityChanged\n            },\n            {\n                no: 4,\n                name: 'audio_level_changed',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>AudioLevelChanged\n            },\n            {\n                no: 5,\n                name: 'ice_trickle',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>ICETrickle$1\n            },\n            {\n                no: 6,\n                name: 'change_publish_quality',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>ChangePublishQuality\n            },\n            {\n                no: 10,\n                name: 'participant_joined',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>ParticipantJoined\n            },\n            {\n                no: 11,\n                name: 'participant_left',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>ParticipantLeft\n            },\n            {\n                no: 12,\n                name: 'dominant_speaker_changed',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>DominantSpeakerChanged\n            },\n            {\n                no: 13,\n                name: 'join_response',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>JoinResponse\n            },\n            {\n                no: 14,\n                name: 'health_check_response',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>HealthCheckResponse\n            },\n            {\n                no: 16,\n                name: 'track_published',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>TrackPublished\n            },\n            {\n                no: 17,\n                name: 'track_unpublished',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>TrackUnpublished\n            },\n            {\n                no: 18,\n                name: 'error',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>Error$1\n            },\n            {\n                no: 19,\n                name: 'call_grants_updated',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>CallGrantsUpdated\n            },\n            {\n                no: 20,\n                name: 'go_away',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>GoAway\n            },\n            {\n                no: 21,\n                name: 'ice_restart',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>ICERestart\n            },\n            {\n                no: 22,\n                name: 'pins_updated',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>PinsChanged\n            },\n            {\n                no: 23,\n                name: 'call_ended',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>CallEnded\n            },\n            {\n                no: 24,\n                name: 'participant_updated',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>ParticipantUpdated\n            },\n            {\n                no: 25,\n                name: 'participant_migration_complete',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>ParticipantMigrationComplete\n            },\n            {\n                no: 27,\n                name: 'change_publish_options',\n                kind: 'message',\n                oneof: 'eventPayload',\n                T: ()=>ChangePublishOptions\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.SfuEvent\n */ const SfuEvent = new SfuEvent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ChangePublishOptions$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.ChangePublishOptions', [\n            {\n                no: 1,\n                name: 'publish_options',\n                kind: 'message',\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>PublishOption\n            },\n            {\n                no: 2,\n                name: 'reason',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ChangePublishOptions\n */ const ChangePublishOptions = new ChangePublishOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ChangePublishOptionsComplete$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.ChangePublishOptionsComplete', []);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ChangePublishOptionsComplete\n */ const ChangePublishOptionsComplete = new ChangePublishOptionsComplete$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantMigrationComplete$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.ParticipantMigrationComplete', []);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantMigrationComplete\n */ const ParticipantMigrationComplete = new ParticipantMigrationComplete$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PinsChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.PinsChanged', [\n            {\n                no: 1,\n                name: 'pins',\n                kind: 'message',\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>Pin\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.PinsChanged\n */ const PinsChanged = new PinsChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Error$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.Error', [\n            {\n                no: 4,\n                name: 'error',\n                kind: 'message',\n                T: ()=>Error$2\n            },\n            {\n                no: 5,\n                name: 'reconnect_strategy',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.WebsocketReconnectStrategy',\n                        WebsocketReconnectStrategy,\n                        'WEBSOCKET_RECONNECT_STRATEGY_'\n                    ]\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.Error\n */ const Error$1 = new Error$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICETrickle$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.ICETrickle', [\n            {\n                no: 1,\n                name: 'peer_type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.PeerType',\n                        PeerType,\n                        'PEER_TYPE_'\n                    ]\n            },\n            {\n                no: 2,\n                name: 'ice_candidate',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ICETrickle\n */ const ICETrickle = new ICETrickle$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICERestart$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.ICERestart', [\n            {\n                no: 1,\n                name: 'peer_type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.PeerType',\n                        PeerType,\n                        'PEER_TYPE_'\n                    ]\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ICERestart\n */ const ICERestart = new ICERestart$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SfuRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.SfuRequest', [\n            {\n                no: 1,\n                name: 'join_request',\n                kind: 'message',\n                oneof: 'requestPayload',\n                T: ()=>JoinRequest\n            },\n            {\n                no: 2,\n                name: 'health_check_request',\n                kind: 'message',\n                oneof: 'requestPayload',\n                T: ()=>HealthCheckRequest\n            },\n            {\n                no: 3,\n                name: 'leave_call_request',\n                kind: 'message',\n                oneof: 'requestPayload',\n                T: ()=>LeaveCallRequest\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.SfuRequest\n */ const SfuRequest = new SfuRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass LeaveCallRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.LeaveCallRequest', [\n            {\n                no: 1,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'reason',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.LeaveCallRequest\n */ const LeaveCallRequest = new LeaveCallRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealthCheckRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.HealthCheckRequest', []);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.HealthCheckRequest\n */ const HealthCheckRequest = new HealthCheckRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealthCheckResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.HealthCheckResponse', [\n            {\n                no: 1,\n                name: 'participant_count',\n                kind: 'message',\n                T: ()=>ParticipantCount\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.HealthCheckResponse\n */ const HealthCheckResponse = new HealthCheckResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackPublished$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.TrackPublished', [\n            {\n                no: 1,\n                name: 'user_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.TrackType',\n                        TrackType,\n                        'TRACK_TYPE_'\n                    ]\n            },\n            {\n                no: 4,\n                name: 'participant',\n                kind: 'message',\n                T: ()=>Participant\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.TrackPublished\n */ const TrackPublished = new TrackPublished$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackUnpublished$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.TrackUnpublished', [\n            {\n                no: 1,\n                name: 'user_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.TrackType',\n                        TrackType,\n                        'TRACK_TYPE_'\n                    ]\n            },\n            {\n                no: 4,\n                name: 'cause',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.TrackUnpublishReason',\n                        TrackUnpublishReason,\n                        'TRACK_UNPUBLISH_REASON_'\n                    ]\n            },\n            {\n                no: 5,\n                name: 'participant',\n                kind: 'message',\n                T: ()=>Participant\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.TrackUnpublished\n */ const TrackUnpublished = new TrackUnpublished$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass JoinRequest$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.JoinRequest', [\n            {\n                no: 1,\n                name: 'token',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'subscriber_sdp',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 8,\n                name: 'publisher_sdp',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 4,\n                name: 'client_details',\n                kind: 'message',\n                T: ()=>ClientDetails\n            },\n            {\n                no: 5,\n                name: 'migration',\n                kind: 'message',\n                T: ()=>Migration\n            },\n            {\n                no: 6,\n                name: 'fast_reconnect',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 7,\n                name: 'reconnect_details',\n                kind: 'message',\n                T: ()=>ReconnectDetails\n            },\n            {\n                no: 9,\n                name: 'preferred_publish_options',\n                kind: 'message',\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>PublishOption\n            },\n            {\n                no: 10,\n                name: 'preferred_subscribe_options',\n                kind: 'message',\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>SubscribeOption\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.JoinRequest\n */ const JoinRequest = new JoinRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ReconnectDetails$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.ReconnectDetails', [\n            {\n                no: 1,\n                name: 'strategy',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.WebsocketReconnectStrategy',\n                        WebsocketReconnectStrategy,\n                        'WEBSOCKET_RECONNECT_STRATEGY_'\n                    ]\n            },\n            {\n                no: 3,\n                name: 'announced_tracks',\n                kind: 'message',\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>TrackInfo\n            },\n            {\n                no: 4,\n                name: 'subscriptions',\n                kind: 'message',\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>TrackSubscriptionDetails\n            },\n            {\n                no: 5,\n                name: 'reconnect_attempt',\n                kind: 'scalar',\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 6,\n                name: 'from_sfu_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 7,\n                name: 'previous_session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ReconnectDetails\n */ const ReconnectDetails = new ReconnectDetails$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Migration$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.Migration', [\n            {\n                no: 1,\n                name: 'from_sfu_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'announced_tracks',\n                kind: 'message',\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>TrackInfo\n            },\n            {\n                no: 3,\n                name: 'subscriptions',\n                kind: 'message',\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>TrackSubscriptionDetails\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.Migration\n */ const Migration = new Migration$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass JoinResponse$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.JoinResponse', [\n            {\n                no: 1,\n                name: 'call_state',\n                kind: 'message',\n                T: ()=>CallState$1\n            },\n            {\n                no: 2,\n                name: 'reconnected',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 3,\n                name: 'fast_reconnect_deadline_seconds',\n                kind: 'scalar',\n                T: 5 /*ScalarType.INT32*/ \n            },\n            {\n                no: 4,\n                name: 'publish_options',\n                kind: 'message',\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>PublishOption\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.JoinResponse\n */ const JoinResponse = new JoinResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantJoined$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.ParticipantJoined', [\n            {\n                no: 1,\n                name: 'call_cid',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'participant',\n                kind: 'message',\n                T: ()=>Participant\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantJoined\n */ const ParticipantJoined = new ParticipantJoined$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantLeft$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.ParticipantLeft', [\n            {\n                no: 1,\n                name: 'call_cid',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'participant',\n                kind: 'message',\n                T: ()=>Participant\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantLeft\n */ const ParticipantLeft = new ParticipantLeft$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantUpdated$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.ParticipantUpdated', [\n            {\n                no: 1,\n                name: 'call_cid',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'participant',\n                kind: 'message',\n                T: ()=>Participant\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantUpdated\n */ const ParticipantUpdated = new ParticipantUpdated$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubscriberOffer$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.SubscriberOffer', [\n            {\n                no: 1,\n                name: 'ice_restart',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 2,\n                name: 'sdp',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.SubscriberOffer\n */ const SubscriberOffer = new SubscriberOffer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PublisherAnswer$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.PublisherAnswer', [\n            {\n                no: 1,\n                name: 'sdp',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.PublisherAnswer\n */ const PublisherAnswer = new PublisherAnswer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ConnectionQualityChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.ConnectionQualityChanged', [\n            {\n                no: 1,\n                name: 'connection_quality_updates',\n                kind: 'message',\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>ConnectionQualityInfo\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ConnectionQualityChanged\n */ const ConnectionQualityChanged = new ConnectionQualityChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ConnectionQualityInfo$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.ConnectionQualityInfo', [\n            {\n                no: 1,\n                name: 'user_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'connection_quality',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.ConnectionQuality',\n                        ConnectionQuality,\n                        'CONNECTION_QUALITY_'\n                    ]\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ConnectionQualityInfo\n */ const ConnectionQualityInfo = new ConnectionQualityInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DominantSpeakerChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.DominantSpeakerChanged', [\n            {\n                no: 1,\n                name: 'user_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.DominantSpeakerChanged\n */ const DominantSpeakerChanged = new DominantSpeakerChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioLevel$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.AudioLevel', [\n            {\n                no: 1,\n                name: 'user_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'session_id',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 3,\n                name: 'level',\n                kind: 'scalar',\n                T: 2 /*ScalarType.FLOAT*/ \n            },\n            {\n                no: 4,\n                name: 'is_speaking',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioLevel\n */ const AudioLevel = new AudioLevel$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioLevelChanged$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.AudioLevelChanged', [\n            {\n                no: 1,\n                name: 'audio_levels',\n                kind: 'message',\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>AudioLevel\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioLevelChanged\n */ const AudioLevelChanged = new AudioLevelChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioSender$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.AudioSender', [\n            {\n                no: 2,\n                name: 'codec',\n                kind: 'message',\n                T: ()=>Codec\n            },\n            {\n                no: 3,\n                name: 'track_type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.TrackType',\n                        TrackType,\n                        'TRACK_TYPE_'\n                    ]\n            },\n            {\n                no: 4,\n                name: 'publish_option_id',\n                kind: 'scalar',\n                T: 5 /*ScalarType.INT32*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioSender\n */ const AudioSender = new AudioSender$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoLayerSetting$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.VideoLayerSetting', [\n            {\n                no: 1,\n                name: 'name',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            },\n            {\n                no: 2,\n                name: 'active',\n                kind: 'scalar',\n                T: 8 /*ScalarType.BOOL*/ \n            },\n            {\n                no: 3,\n                name: 'max_bitrate',\n                kind: 'scalar',\n                T: 5 /*ScalarType.INT32*/ \n            },\n            {\n                no: 4,\n                name: 'scale_resolution_down_by',\n                kind: 'scalar',\n                T: 2 /*ScalarType.FLOAT*/ \n            },\n            {\n                no: 6,\n                name: 'codec',\n                kind: 'message',\n                T: ()=>Codec\n            },\n            {\n                no: 7,\n                name: 'max_framerate',\n                kind: 'scalar',\n                T: 13 /*ScalarType.UINT32*/ \n            },\n            {\n                no: 8,\n                name: 'scalability_mode',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.VideoLayerSetting\n */ const VideoLayerSetting = new VideoLayerSetting$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoSender$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.VideoSender', [\n            {\n                no: 2,\n                name: 'codec',\n                kind: 'message',\n                T: ()=>Codec\n            },\n            {\n                no: 3,\n                name: 'layers',\n                kind: 'message',\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>VideoLayerSetting\n            },\n            {\n                no: 4,\n                name: 'track_type',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.TrackType',\n                        TrackType,\n                        'TRACK_TYPE_'\n                    ]\n            },\n            {\n                no: 5,\n                name: 'publish_option_id',\n                kind: 'scalar',\n                T: 5 /*ScalarType.INT32*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.VideoSender\n */ const VideoSender = new VideoSender$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ChangePublishQuality$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.ChangePublishQuality', [\n            {\n                no: 1,\n                name: 'audio_senders',\n                kind: 'message',\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>AudioSender\n            },\n            {\n                no: 2,\n                name: 'video_senders',\n                kind: 'message',\n                repeat: 1 /*RepeatType.PACKED*/ ,\n                T: ()=>VideoSender\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ChangePublishQuality\n */ const ChangePublishQuality = new ChangePublishQuality$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallGrantsUpdated$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.CallGrantsUpdated', [\n            {\n                no: 1,\n                name: 'current_grants',\n                kind: 'message',\n                T: ()=>CallGrants\n            },\n            {\n                no: 2,\n                name: 'message',\n                kind: 'scalar',\n                T: 9 /*ScalarType.STRING*/ \n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.CallGrantsUpdated\n */ const CallGrantsUpdated = new CallGrantsUpdated$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GoAway$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.GoAway', [\n            {\n                no: 1,\n                name: 'reason',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.GoAwayReason',\n                        GoAwayReason,\n                        'GO_AWAY_REASON_'\n                    ]\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.GoAway\n */ const GoAway = new GoAway$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallEnded$Type extends _protobuf_ts_runtime__WEBPACK_IMPORTED_MODULE_5__.MessageType {\n    constructor(){\n        super('stream.video.sfu.event.CallEnded', [\n            {\n                no: 1,\n                name: 'reason',\n                kind: 'enum',\n                T: ()=>[\n                        'stream.video.sfu.models.CallEndedReason',\n                        CallEndedReason,\n                        'CALL_ENDED_REASON_'\n                    ]\n            }\n        ]);\n    }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.CallEnded\n */ const CallEnded = new CallEnded$Type();\nvar events = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    AudioLevel: AudioLevel,\n    AudioLevelChanged: AudioLevelChanged,\n    AudioSender: AudioSender,\n    CallEnded: CallEnded,\n    CallGrantsUpdated: CallGrantsUpdated,\n    ChangePublishOptions: ChangePublishOptions,\n    ChangePublishOptionsComplete: ChangePublishOptionsComplete,\n    ChangePublishQuality: ChangePublishQuality,\n    ConnectionQualityChanged: ConnectionQualityChanged,\n    ConnectionQualityInfo: ConnectionQualityInfo,\n    DominantSpeakerChanged: DominantSpeakerChanged,\n    Error: Error$1,\n    GoAway: GoAway,\n    HealthCheckRequest: HealthCheckRequest,\n    HealthCheckResponse: HealthCheckResponse,\n    ICERestart: ICERestart,\n    ICETrickle: ICETrickle,\n    JoinRequest: JoinRequest,\n    JoinResponse: JoinResponse,\n    LeaveCallRequest: LeaveCallRequest,\n    Migration: Migration,\n    ParticipantJoined: ParticipantJoined,\n    ParticipantLeft: ParticipantLeft,\n    ParticipantMigrationComplete: ParticipantMigrationComplete,\n    ParticipantUpdated: ParticipantUpdated,\n    PinsChanged: PinsChanged,\n    PublisherAnswer: PublisherAnswer,\n    ReconnectDetails: ReconnectDetails,\n    SfuEvent: SfuEvent,\n    SfuRequest: SfuRequest,\n    SubscriberOffer: SubscriberOffer,\n    TrackPublished: TrackPublished,\n    TrackUnpublished: TrackUnpublished,\n    VideoLayerSetting: VideoLayerSetting,\n    VideoSender: VideoSender\n});\nvar VisibilityState;\n(function(VisibilityState) {\n    VisibilityState[\"UNKNOWN\"] = \"UNKNOWN\";\n    VisibilityState[\"VISIBLE\"] = \"VISIBLE\";\n    VisibilityState[\"INVISIBLE\"] = \"INVISIBLE\";\n})(VisibilityState || (VisibilityState = {}));\nvar DebounceType;\n(function(DebounceType) {\n    DebounceType[DebounceType[\"IMMEDIATE\"] = 20] = \"IMMEDIATE\";\n    DebounceType[DebounceType[\"FAST\"] = 100] = \"FAST\";\n    DebounceType[DebounceType[\"MEDIUM\"] = 600] = \"MEDIUM\";\n    DebounceType[DebounceType[\"SLOW\"] = 1200] = \"SLOW\";\n})(DebounceType || (DebounceType = {}));\n/**\n * @generated from protobuf service stream.video.sfu.signal.SignalServer\n */ class SignalServerClient {\n    constructor(_transport){\n        this._transport = _transport;\n        this.typeName = SignalServer.typeName;\n        this.methods = SignalServer.methods;\n        this.options = SignalServer.options;\n    }\n    /**\n     * SetPublisher sends the WebRTC offer for the peer connection used to publish A/V\n     *\n     * @generated from protobuf rpc: SetPublisher(stream.video.sfu.signal.SetPublisherRequest) returns (stream.video.sfu.signal.SetPublisherResponse);\n     */ setPublisher(input, options) {\n        const method = this.methods[0], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_9__.stackIntercept)('unary', this._transport, method, opt, input);\n    }\n    /**\n     * answer is sent by the client to the SFU after receiving a subscriber_offer.\n     *\n     * @generated from protobuf rpc: SendAnswer(stream.video.sfu.signal.SendAnswerRequest) returns (stream.video.sfu.signal.SendAnswerResponse);\n     */ sendAnswer(input, options) {\n        const method = this.methods[1], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_9__.stackIntercept)('unary', this._transport, method, opt, input);\n    }\n    /**\n     * SendICECandidate sends an ICE candidate to the client\n     *\n     * @generated from protobuf rpc: IceTrickle(stream.video.sfu.models.ICETrickle) returns (stream.video.sfu.signal.ICETrickleResponse);\n     */ iceTrickle(input, options) {\n        const method = this.methods[2], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_9__.stackIntercept)('unary', this._transport, method, opt, input);\n    }\n    /**\n     * UpdateSubscribers is used to notify the SFU about the list of video subscriptions\n     * TODO: sync subscriptions based on this + update tracks using the dimension info sent by the user\n     *\n     * @generated from protobuf rpc: UpdateSubscriptions(stream.video.sfu.signal.UpdateSubscriptionsRequest) returns (stream.video.sfu.signal.UpdateSubscriptionsResponse);\n     */ updateSubscriptions(input, options) {\n        const method = this.methods[3], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_9__.stackIntercept)('unary', this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: UpdateMuteStates(stream.video.sfu.signal.UpdateMuteStatesRequest) returns (stream.video.sfu.signal.UpdateMuteStatesResponse);\n     */ updateMuteStates(input, options) {\n        const method = this.methods[4], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_9__.stackIntercept)('unary', this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: IceRestart(stream.video.sfu.signal.ICERestartRequest) returns (stream.video.sfu.signal.ICERestartResponse);\n     */ iceRestart(input, options) {\n        const method = this.methods[5], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_9__.stackIntercept)('unary', this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: SendStats(stream.video.sfu.signal.SendStatsRequest) returns (stream.video.sfu.signal.SendStatsResponse);\n     */ sendStats(input, options) {\n        const method = this.methods[6], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_9__.stackIntercept)('unary', this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: StartNoiseCancellation(stream.video.sfu.signal.StartNoiseCancellationRequest) returns (stream.video.sfu.signal.StartNoiseCancellationResponse);\n     */ startNoiseCancellation(input, options) {\n        const method = this.methods[7], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_9__.stackIntercept)('unary', this._transport, method, opt, input);\n    }\n    /**\n     * @generated from protobuf rpc: StopNoiseCancellation(stream.video.sfu.signal.StopNoiseCancellationRequest) returns (stream.video.sfu.signal.StopNoiseCancellationResponse);\n     */ stopNoiseCancellation(input, options) {\n        const method = this.methods[8], opt = this._transport.mergeOptions(options);\n        return (0,_protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_9__.stackIntercept)('unary', this._transport, method, opt, input);\n    }\n}\nconst defaultOptions = {\n    baseUrl: '',\n    sendJson: true,\n    timeout: 5 * 1000,\n    jsonOptions: {\n        ignoreUnknownFields: true\n    }\n};\nconst withHeaders = (headers)=>{\n    return {\n        interceptUnary (next, method, input, options) {\n            options.meta = {\n                ...options.meta,\n                ...headers\n            };\n            return next(method, input, options);\n        }\n    };\n};\nconst withRequestLogger = (logger, level)=>{\n    return {\n        interceptUnary: (next, method, input, options)=>{\n            let invocation;\n            try {\n                invocation = next(method, input, options);\n            } finally{\n                logger(level, `Invoked SFU RPC method ${method.name}`, {\n                    request: invocation?.request,\n                    headers: invocation?.requestHeaders,\n                    response: invocation?.response\n                });\n            }\n            return invocation;\n        }\n    };\n};\n/**\n * Creates new SignalServerClient instance.\n *\n * @param options the twirp options.\n */ const createSignalClient = (options)=>{\n    const transport = new _protobuf_ts_twirp_transport__WEBPACK_IMPORTED_MODULE_10__.TwirpFetchTransport({\n        ...defaultOptions,\n        ...options\n    });\n    return new SignalServerClient(transport);\n};\nconst sleep = (m)=>new Promise((r)=>setTimeout(r, m));\nfunction isFunction(value) {\n    return value && (Object.prototype.toString.call(value) === '[object Function]' || 'function' === typeof value || value instanceof Function);\n}\n/**\n * A map of known error codes.\n */ const KnownCodes = {\n    TOKEN_EXPIRED: 40,\n    WS_CLOSED_SUCCESS: 1000,\n    WS_CLOSED_ABRUPTLY: 1006,\n    WS_POLICY_VIOLATION: 1008\n};\n/**\n * retryInterval - A retry interval which increases acc to number of failures\n *\n * @return {number} Duration to wait in milliseconds\n */ function retryInterval(numberOfFailures) {\n    // try to reconnect in 0.25-5 seconds (random to spread out the load from failures)\n    const max = Math.min(500 + numberOfFailures * 2000, 5000);\n    const min = Math.min(Math.max(250, (numberOfFailures - 1) * 2000), 5000);\n    return Math.floor(Math.random() * (max - min) + min);\n}\nfunction randomId() {\n    return generateUUIDv4();\n}\nfunction hex(bytes) {\n    let s = '';\n    for(let i = 0; i < bytes.length; i++){\n        s += bytes[i].toString(16).padStart(2, '0');\n    }\n    return s;\n}\n// https://tools.ietf.org/html/rfc4122\nfunction generateUUIDv4() {\n    const bytes = getRandomBytes(16);\n    bytes[6] = bytes[6] & 0x0f | 0x40; // version\n    bytes[8] = bytes[8] & 0xbf | 0x80; // variant\n    return hex(bytes.subarray(0, 4)) + '-' + hex(bytes.subarray(4, 6)) + '-' + hex(bytes.subarray(6, 8)) + '-' + hex(bytes.subarray(8, 10)) + '-' + hex(bytes.subarray(10, 16));\n}\nfunction getRandomValuesWithMathRandom(bytes) {\n    const max = Math.pow(2, 8 * bytes.byteLength / bytes.length);\n    for(let i = 0; i < bytes.length; i++){\n        bytes[i] = Math.random() * max;\n    }\n}\nconst getRandomValues = (()=>{\n    if (typeof crypto !== 'undefined' && typeof crypto?.getRandomValues !== 'undefined') {\n        return crypto.getRandomValues.bind(crypto);\n    } else if (typeof msCrypto !== 'undefined') {\n        return msCrypto.getRandomValues.bind(msCrypto);\n    } else {\n        return getRandomValuesWithMathRandom;\n    }\n})();\nfunction getRandomBytes(length) {\n    const bytes = new Uint8Array(length);\n    getRandomValues(bytes);\n    return bytes;\n}\n/**\n * listenForConnectionChanges - Adds an event listener fired on browser going online or offline\n */ function addConnectionEventListeners(cb) {\n    if (false) {}\n}\nfunction removeConnectionEventListeners(cb) {\n    if (false) {}\n}\nfunction isErrorResponse(res) {\n    return !res.status || res.status < 200 || 300 <= res.status;\n}\n// Type guards to check WebSocket error type\nfunction isCloseEvent(res) {\n    return res.code !== undefined;\n}\n/**\n * Checks whether we are using React Native\n */ const isReactNative = ()=>{\n    if (typeof navigator === 'undefined') return false;\n    return navigator.product?.toLowerCase() === 'reactnative';\n};\n// log levels, sorted by verbosity\nconst logLevels = Object.freeze({\n    trace: 0,\n    debug: 1,\n    info: 2,\n    warn: 3,\n    error: 4\n});\nlet logger;\nlet level = 'info';\nconst logToConsole = (logLevel, message, ...args)=>{\n    let logMethod;\n    switch(logLevel){\n        case 'error':\n            if (isReactNative()) {\n                message = `ERROR: ${message}`;\n                logMethod = console.info;\n                break;\n            }\n            logMethod = console.error;\n            break;\n        case 'warn':\n            if (isReactNative()) {\n                message = `WARN: ${message}`;\n                logMethod = console.info;\n                break;\n            }\n            logMethod = console.warn;\n            break;\n        case 'info':\n            logMethod = console.info;\n            break;\n        case 'trace':\n            logMethod = console.trace;\n            break;\n        default:\n            logMethod = console.log;\n            break;\n    }\n    logMethod(message, ...args);\n};\nconst setLogger = (l, lvl)=>{\n    logger = l;\n    if (lvl) {\n        setLogLevel(lvl);\n    }\n};\nconst setLogLevel = (l)=>{\n    level = l;\n};\nconst getLogLevel = ()=>level;\nconst getLogger = (withTags)=>{\n    const loggerMethod = logger || logToConsole;\n    const tags = (withTags || []).filter(Boolean).join(':');\n    const result = (logLevel, message, ...args)=>{\n        if (logLevels[logLevel] >= logLevels[level]) {\n            loggerMethod(logLevel, `[${tags}]: ${message}`, ...args);\n        }\n    };\n    return result;\n};\n/**\n * Creates a closure which wraps the given RPC call and retries invoking\n * the RPC until it succeeds or the maximum number of retries is reached.\n *\n * For each retry, there would be a delay to avoid request bursts toward the SFU.\n *\n * @param rpc the closure around the RPC call to execute.\n * @param signal the signal to abort the RPC call and retries loop.\n */ const retryable = async (rpc, signal)=>{\n    let attempt = 0;\n    let result = undefined;\n    do {\n        if (attempt > 0) await sleep(retryInterval(attempt));\n        try {\n            result = await rpc();\n        } catch (err) {\n            const isRequestCancelled = err instanceof _protobuf_ts_runtime_rpc__WEBPACK_IMPORTED_MODULE_11__.RpcError && err.code === _protobuf_ts_twirp_transport__WEBPACK_IMPORTED_MODULE_12__.TwirpErrorCode[_protobuf_ts_twirp_transport__WEBPACK_IMPORTED_MODULE_12__.TwirpErrorCode.cancelled];\n            const isAborted = signal?.aborted ?? false;\n            if (isRequestCancelled || isAborted) throw err;\n            getLogger([\n                'sfu-client',\n                'rpc'\n            ])('debug', `rpc failed (${attempt})`, err);\n            attempt++;\n        }\n    }while (!result || result.response.error?.shouldRetry);\n    return result;\n};\n/**\n * Returns a generic SDP for the given direction.\n * We use this SDP to send it as part of our JoinRequest so that the SFU\n * can use it to determine the client's codec capabilities.\n *\n * @param direction the direction of the transceiver.\n */ const getGenericSdp = async (direction)=>{\n    const tempPc = new RTCPeerConnection();\n    tempPc.addTransceiver('video', {\n        direction\n    });\n    tempPc.addTransceiver('audio', {\n        direction\n    });\n    const offer = await tempPc.createOffer();\n    const sdp = offer.sdp ?? '';\n    tempPc.getTransceivers().forEach((t)=>{\n        t.stop?.();\n    });\n    tempPc.close();\n    return sdp;\n};\n/**\n * Returns whether the codec is an SVC codec.\n *\n * @param codecOrMimeType the codec to check.\n */ const isSvcCodec = (codecOrMimeType)=>{\n    if (!codecOrMimeType) return false;\n    codecOrMimeType = codecOrMimeType.toLowerCase();\n    return codecOrMimeType === 'vp9' || codecOrMimeType === 'av1' || codecOrMimeType === 'video/vp9' || codecOrMimeType === 'video/av1';\n};\nconst sfuEventKinds = {\n    subscriberOffer: undefined,\n    publisherAnswer: undefined,\n    connectionQualityChanged: undefined,\n    audioLevelChanged: undefined,\n    iceTrickle: undefined,\n    changePublishQuality: undefined,\n    participantJoined: undefined,\n    participantLeft: undefined,\n    dominantSpeakerChanged: undefined,\n    joinResponse: undefined,\n    healthCheckResponse: undefined,\n    trackPublished: undefined,\n    trackUnpublished: undefined,\n    error: undefined,\n    callGrantsUpdated: undefined,\n    goAway: undefined,\n    iceRestart: undefined,\n    pinsUpdated: undefined,\n    callEnded: undefined,\n    participantUpdated: undefined,\n    participantMigrationComplete: undefined,\n    changePublishOptions: undefined\n};\nconst isSfuEvent = (eventName)=>{\n    return Object.prototype.hasOwnProperty.call(sfuEventKinds, eventName);\n};\nclass Dispatcher {\n    constructor(){\n        this.logger = getLogger([\n            'Dispatcher'\n        ]);\n        this.subscribers = {};\n        this.dispatch = (message, logTag = '0')=>{\n            const eventKind = message.eventPayload.oneofKind;\n            if (!eventKind) return;\n            const payload = message.eventPayload[eventKind];\n            this.logger('debug', `Dispatching ${eventKind}, tag=${logTag}`, payload);\n            const listeners = this.subscribers[eventKind];\n            if (!listeners) return;\n            for (const fn of listeners){\n                try {\n                    fn(payload);\n                } catch (e) {\n                    this.logger('warn', 'Listener failed with error', e);\n                }\n            }\n        };\n        this.on = (eventName, fn)=>{\n            var _a;\n            ((_a = this.subscribers)[eventName] ?? (_a[eventName] = [])).push(fn);\n            return ()=>{\n                this.off(eventName, fn);\n            };\n        };\n        this.off = (eventName, fn)=>{\n            this.subscribers[eventName] = (this.subscribers[eventName] || []).filter((f)=>f !== fn);\n        };\n    }\n}\n/**\n * A buffer for ICE Candidates. Used for ICE Trickle:\n * - https://bloggeek.me/webrtcglossary/trickle-ice/\n */ class IceTrickleBuffer {\n    constructor(){\n        this.subscriberCandidates = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_13__.ReplaySubject();\n        this.publisherCandidates = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_13__.ReplaySubject();\n        this.push = (iceTrickle)=>{\n            const iceCandidate = toIceCandidate(iceTrickle);\n            if (!iceCandidate) return;\n            if (iceTrickle.peerType === PeerType.SUBSCRIBER) {\n                this.subscriberCandidates.next(iceCandidate);\n            } else if (iceTrickle.peerType === PeerType.PUBLISHER_UNSPECIFIED) {\n                this.publisherCandidates.next(iceCandidate);\n            } else {\n                const logger = getLogger([\n                    'sfu-client'\n                ]);\n                logger('warn', `ICETrickle, Unknown peer type`, iceTrickle);\n            }\n        };\n        this.dispose = ()=>{\n            this.subscriberCandidates.complete();\n            this.publisherCandidates.complete();\n        };\n    }\n}\nconst toIceCandidate = (iceTrickle)=>{\n    try {\n        return JSON.parse(iceTrickle.iceCandidate);\n    } catch (e) {\n        const logger = getLogger([\n            'sfu-client'\n        ]);\n        logger('error', `Failed to parse ICE Trickle`, e, iceTrickle);\n        return undefined;\n    }\n};\n/**\n * Runs async functions serially. Useful for wrapping async actions that\n * should never run simultaneously: if marked with the same tag, functions\n * will run one after another.\n *\n * @param tag Async functions with the same tag will run serially. Async functions\n * with different tags can run in parallel.\n * @param cb Async function to run.\n * @returns Promise that resolves when async functions returns.\n */ const withoutConcurrency = createRunner(wrapWithContinuationTracking);\n/**\n * Runs async functions serially, and cancels all other actions with the same tag\n * when a new action is scheduled. Useful for wrapping async actions that override\n * each other (e.g. enabling and disabling camera).\n *\n * If an async function hasn't started yet and was canceled, it will never run.\n * If an async function is already running and was canceled, it will be notified\n * via an abort signal passed as an argument.\n *\n * @param tag Async functions with the same tag will run serially and are canceled\n * when a new action with the same tag is scheduled.\n * @param cb Async function to run. Receives AbortSignal as the only argument.\n * @returns Promise that resolves when async functions returns. If the function didn't\n * start and was canceled, will resolve with 'canceled'. If the function started to run,\n * it's up to the function to decide how to react to cancelation.\n */ const withCancellation = createRunner(wrapWithCancellation);\nconst pendingPromises = new Map();\nasync function settled(tag) {\n    await pendingPromises.get(tag)?.promise;\n}\n/**\n * Implements common functionality of running async functions serially, by chaining\n * their promises one after another.\n *\n * Before running, async function is \"wrapped\" using the provided wrapper. This wrapper\n * can add additional steps to run before or after the function.\n *\n * When async function is scheduled to run, the previous function is notified\n * by calling the associated onContinued callback. This behavior of this callback\n * is defined by the wrapper.\n */ function createRunner(wrapper) {\n    return function run(tag, cb) {\n        const { cb: wrapped, onContinued } = wrapper(tag, cb);\n        const pending = pendingPromises.get(tag);\n        pending?.onContinued();\n        const promise = pending ? pending.promise.then(wrapped, wrapped) : wrapped();\n        pendingPromises.set(tag, {\n            promise,\n            onContinued\n        });\n        return promise;\n    };\n}\n/**\n * Wraps an async function with an additional step run after the function:\n * if the function is the last in the queue, it cleans up the whole chain\n * of promises after finishing.\n */ function wrapWithContinuationTracking(tag, cb) {\n    let hasContinuation = false;\n    const wrapped = ()=>cb().finally(()=>{\n            if (!hasContinuation) {\n                pendingPromises.delete(tag);\n            }\n        });\n    const onContinued = ()=>hasContinuation = true;\n    return {\n        cb: wrapped,\n        onContinued\n    };\n}\n/**\n * Wraps an async function with additional functionalilty:\n * 1. Associates an abort signal with every function, that is passed to it\n *    as an argument. When a new function is scheduled to run after the current\n *    one, current signal is aborted.\n * 2. If current function didn't start and was aborted, in will never start.\n * 3. If the function is the last in the queue, it cleans up the whole chain\n *    of promises after finishing.\n */ function wrapWithCancellation(tag, cb) {\n    const ac = new AbortController();\n    const wrapped = ()=>{\n        if (ac.signal.aborted) {\n            return Promise.resolve('canceled');\n        }\n        return cb(ac.signal).finally(()=>{\n            if (!ac.signal.aborted) {\n                pendingPromises.delete(tag);\n            }\n        });\n    };\n    const onContinued = ()=>ac.abort();\n    return {\n        cb: wrapped,\n        onContinued\n    };\n}\n/**\n * Checks if the provided update is a function patch.\n *\n * @param update the value to check.\n */ const isFunctionPatch = (update)=>typeof update === 'function';\n/**\n * Gets the current value of an observable, or undefined if the observable has\n * not emitted a value yet.\n *\n * @param observable$ the observable to get the value from.\n */ const getCurrentValue = (observable$)=>{\n    let value;\n    let err = undefined;\n    (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_14__.combineLatest)([\n        observable$\n    ]).subscribe({\n        next: ([v])=>{\n            value = v;\n        },\n        error: (e)=>{\n            err = e;\n        }\n    }).unsubscribe();\n    if (err) throw err;\n    return value;\n};\n/**\n * Updates the value of the provided Subject.\n * An `update` can either be a new value or a function which takes\n * the current value and returns a new value.\n *\n * @param subject the subject to update.\n * @param update the update to apply to the subject.\n * @return the updated value.\n */ const setCurrentValue = (subject, update)=>{\n    const next = isFunctionPatch(update) ? update(getCurrentValue(subject)) : update;\n    subject.next(next);\n    return next;\n};\n/**\n * Updates the value of the provided Subject and returns the previous value\n * and a function to roll back the update.\n * This is useful when you want to optimistically update a value\n * and roll back the update if an error occurs.\n *\n * @param subject the subject to update.\n * @param update the update to apply to the subject.\n */ const updateValue = (subject, update)=>{\n    const lastValue = subject.getValue();\n    const value = setCurrentValue(subject, update);\n    return {\n        lastValue,\n        value,\n        rollback: ()=>setCurrentValue(subject, lastValue)\n    };\n};\n/**\n * Creates a subscription and returns a function to unsubscribe.\n *\n * @param observable the observable to subscribe to.\n * @param handler the handler to call when the observable emits a value.\n * @param onError an optional error handler.\n */ const createSubscription = (observable, handler, onError = (error)=>getLogger([\n        'RxUtils'\n    ])('warn', 'An observable emitted an error', error))=>{\n    const subscription = observable.subscribe({\n        next: handler,\n        error: onError\n    });\n    return ()=>{\n        subscription.unsubscribe();\n    };\n};\n/**\n * Creates a subscription and returns a function to unsubscribe. Makes sure that\n * only one async handler runs at the same time. If updates come in quicker than\n * it takes for the current handler to finish, other handlers will wait.\n *\n * @param observable the observable to subscribe to.\n * @param handler the async handler to call when the observable emits a value.\n */ const createSafeAsyncSubscription = (observable, handler)=>{\n    const tag = Symbol();\n    return createSubscription(observable, (value)=>{\n        withoutConcurrency(tag, ()=>handler(value));\n    });\n};\nvar rxUtils = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    createSafeAsyncSubscription: createSafeAsyncSubscription,\n    createSubscription: createSubscription,\n    getCurrentValue: getCurrentValue,\n    setCurrentValue: setCurrentValue,\n    updateValue: updateValue\n});\n/**\n * Represents the state of the current call.\n */ var CallingState;\n(function(CallingState) {\n    /**\n     * The call is in an unknown state.\n     */ CallingState[\"UNKNOWN\"] = \"unknown\";\n    /**\n     * The call is in an idle state.\n     */ CallingState[\"IDLE\"] = \"idle\";\n    /**\n     * The call is in the process of ringing.\n     * (User hasn't accepted nor rejected the call yet.)\n     */ CallingState[\"RINGING\"] = \"ringing\";\n    /**\n     * The call is in the process of joining.\n     */ CallingState[\"JOINING\"] = \"joining\";\n    /**\n     * The call is currently active.\n     */ CallingState[\"JOINED\"] = \"joined\";\n    /**\n     * The call has been left.\n     */ CallingState[\"LEFT\"] = \"left\";\n    /**\n     * The call is in the process of reconnecting.\n     */ CallingState[\"RECONNECTING\"] = \"reconnecting\";\n    /**\n     * The call is in the process of migrating from one node to another.\n     */ CallingState[\"MIGRATING\"] = \"migrating\";\n    /**\n     * The call has failed to reconnect.\n     */ CallingState[\"RECONNECTING_FAILED\"] = \"reconnecting-failed\";\n    /**\n     * The call is in offline mode.\n     */ CallingState[\"OFFLINE\"] = \"offline\";\n})(CallingState || (CallingState = {}));\nclass StreamVideoWriteableStateStore {\n    constructor(){\n        /**\n         * A store keeping data of a successfully connected user over WS to the coordinator server.\n         */ this.connectedUserSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(undefined);\n        /**\n         * A list of {@link Call} objects created/tracked by this client.\n         */ this.callsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject([]);\n        /**\n         * Sets the currently connected user.\n         *\n         * @internal\n         * @param user the user to set as connected.\n         */ this.setConnectedUser = (user)=>{\n            return setCurrentValue(this.connectedUserSubject, user);\n        };\n        /**\n         * Sets the list of {@link Call} objects created/tracked by this client.\n         * @param calls\n         */ this.setCalls = (calls)=>{\n            return setCurrentValue(this.callsSubject, calls);\n        };\n        /**\n         * Adds a {@link Call} object to the list of {@link Call} objects created/tracked by this client.\n         *\n         * @param call the call to add.\n         */ this.registerCall = (call)=>{\n            if (!this.calls.find((c)=>c.cid === call.cid)) {\n                this.setCalls((calls)=>[\n                        ...calls,\n                        call\n                    ]);\n            }\n        };\n        /**\n         * Removes a {@link Call} object from the list of {@link Call} objects created/tracked by this client.\n         *\n         * @param call the call to remove\n         */ this.unregisterCall = (call)=>{\n            return this.setCalls((calls)=>calls.filter((c)=>c !== call));\n        };\n        /**\n         * Finds a {@link Call} object in the list of {@link Call} objects created/tracked by this client.\n         *\n         * @param type the type of call to find.\n         * @param id the id of the call to find.\n         */ this.findCall = (type, id)=>{\n            return this.calls.find((c)=>c.type === type && c.id === id);\n        };\n        this.connectedUserSubject.subscribe(async (user)=>{\n            // leave all calls when the user disconnects.\n            if (!user) {\n                const logger = getLogger([\n                    'client-state'\n                ]);\n                for (const call of this.calls){\n                    if (call.state.callingState === CallingState.LEFT) continue;\n                    logger('info', `User disconnected, leaving call: ${call.cid}`);\n                    await call.leave({\n                        reason: 'client.disconnectUser() called'\n                    }).catch((err)=>{\n                        logger('error', `Error leaving call: ${call.cid}`, err);\n                    });\n                }\n            }\n        });\n    }\n    /**\n     * The currently connected user.\n     */ get connectedUser() {\n        return getCurrentValue(this.connectedUserSubject);\n    }\n    /**\n     * A list of {@link Call} objects created/tracked by this client.\n     */ get calls() {\n        return getCurrentValue(this.callsSubject);\n    }\n}\n/**\n * A reactive store that exposes state variables in a reactive manner.\n * You can subscribe to changes of the different state variables.\n * This central store contains all the state variables related to [`StreamVideoClient`](./StreamVideClient.md) and [`Call`](./Call.md).\n */ class StreamVideoReadOnlyStateStore {\n    constructor(store){\n        /**\n         * This method allows you the get the current value of a state variable.\n         *\n         * @param observable the observable to get the current value of.\n         * @returns the current value of the observable.\n         */ this.getCurrentValue = getCurrentValue;\n        // convert and expose subjects as observables\n        this.connectedUser$ = store.connectedUserSubject.asObservable();\n        this.calls$ = store.callsSubject.asObservable();\n    }\n    /**\n     * The current user connected over WS to the backend.\n     */ get connectedUser() {\n        return getCurrentValue(this.connectedUser$);\n    }\n    /**\n     * A list of {@link Call} objects created/tracked by this client.\n     */ get calls() {\n        return getCurrentValue(this.calls$);\n    }\n}\n/**\n * Creates a new combined {@link Comparator<T>} which sorts items by the given comparators.\n * The comparators are applied in the order they are given (left -> right).\n *\n * @param comparators the comparators to use for sorting.\n * @returns a combined {@link Comparator<T>}.\n */ const combineComparators = (...comparators)=>{\n    return (a, b)=>{\n        for (const comparator of comparators){\n            const result = comparator(a, b);\n            if (result !== 0) return result;\n        }\n        return 0;\n    };\n};\n/**\n * Creates a new comparator which sorts items in descending order.\n *\n * @example\n * const byValue = (a, b) => a < b ? - 1 : a > b ? 1 : 0;\n * const byValueDesc = descending(byValue);\n *\n * @param comparator the comparator to wrap.\n */ const descending = (comparator)=>{\n    return (a, b)=>comparator(b, a);\n};\n/**\n * Creates a new comparator which conditionally applies the given comparator.\n *\n * @example\n * const shouldSortByValue = (a, b) => a % 2 === 0; // return false to turn it off\n * const byValue = (a, b) => a < b ? - 1 : a > b ? 1 : 0;\n * const comparator = conditional(shouldSortByValue)(byValue);\n *\n * @param predicate the predicate to use for determining whether to apply the comparator.\n */ const conditional = (predicate)=>{\n    return (comparator)=>{\n        return (a, b)=>{\n            if (!predicate(a, b)) return 0;\n            return comparator(a, b);\n        };\n    };\n};\n/**\n * A no-op comparator which always returns 0.\n */ const noopComparator = ()=>{\n    return ()=>0;\n};\n/**\n * Check if a participant has a video.\n *\n * @param p the participant to check.\n */ const hasVideo = (p)=>p.publishedTracks.includes(TrackType.VIDEO);\n/**\n * Check if a participant has audio.\n *\n * @param p the participant to check.\n */ const hasAudio = (p)=>p.publishedTracks.includes(TrackType.AUDIO);\n/**\n * Check if a participant is screen sharing.\n *\n * @param p the participant to check.\n */ const hasScreenShare = (p)=>p.publishedTracks.includes(TrackType.SCREEN_SHARE);\n/**\n * Check if a participant is screen sharing audio.\n *\n * @param p the participant to check.\n */ const hasScreenShareAudio = (p)=>p.publishedTracks.includes(TrackType.SCREEN_SHARE_AUDIO);\n/**\n * Check if the participant is pinned.\n *\n * @param p the participant.\n */ const isPinned = (p)=>!!p.pin && (p.pin.isLocalPin || p.pin.pinnedAt > 0);\n/**\n * A comparator which sorts participants by the fact that they are the dominant speaker or not.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const dominantSpeaker = (a, b)=>{\n    if (a.isDominantSpeaker && !b.isDominantSpeaker) return -1;\n    if (!a.isDominantSpeaker && b.isDominantSpeaker) return 1;\n    return 0;\n};\n/**\n * A comparator which sorts participants by the fact that they are speaking or not.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const speaking = (a, b)=>{\n    if (a.isSpeaking && !b.isSpeaking) return -1;\n    if (!a.isSpeaking && b.isSpeaking) return 1;\n    return 0;\n};\n/**\n * A comparator which sorts participants by screen sharing status.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const screenSharing = (a, b)=>{\n    if (hasScreenShare(a) && !hasScreenShare(b)) return -1;\n    if (!hasScreenShare(a) && hasScreenShare(b)) return 1;\n    return 0;\n};\n/**\n * A comparator which sorts participants by video status.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const publishingVideo = (a, b)=>{\n    if (hasVideo(a) && !hasVideo(b)) return -1;\n    if (!hasVideo(a) && hasVideo(b)) return 1;\n    return 0;\n};\n/**\n * A comparator which sorts participants by audio status.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const publishingAudio = (a, b)=>{\n    if (hasAudio(a) && !hasAudio(b)) return -1;\n    if (!hasAudio(a) && hasAudio(b)) return 1;\n    return 0;\n};\n/**\n * A comparator which prioritizes participants who are pinned.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const pinned = (a, b)=>{\n    if (a.pin && b.pin) {\n        if (!a.pin.isLocalPin && b.pin.isLocalPin) return -1;\n        if (a.pin.isLocalPin && !b.pin.isLocalPin) return 1;\n        if (a.pin.pinnedAt > b.pin.pinnedAt) return -1;\n        if (a.pin.pinnedAt < b.pin.pinnedAt) return 1;\n    }\n    if (a.pin && !b.pin) return -1;\n    if (!a.pin && b.pin) return 1;\n    return 0;\n};\n/**\n * A comparator creator which will set up a comparator which prioritizes\n * participants who have a specific reaction.\n *\n * @param type the reaction type.\n */ const reactionType = (type)=>{\n    return (a, b)=>{\n        if (a.reaction?.type === type && b.reaction?.type !== type) return -1;\n        if (a.reaction?.type !== type && b.reaction?.type === type) return 1;\n        return 0;\n    };\n};\n/**\n * A comparator creator which will set up a comparator which prioritizes\n * participants who have a specific role.\n *\n * @param roles the roles to prioritize.\n */ const role = (...roles)=>(a, b)=>{\n        if (hasAnyRole(a, roles) && !hasAnyRole(b, roles)) return -1;\n        if (!hasAnyRole(a, roles) && hasAnyRole(b, roles)) return 1;\n        return 0;\n    };\n/**\n * A comparator which sorts participants by name.\n *\n * @param a the first participant.\n * @param b the second participant.\n */ const name = (a, b)=>{\n    if (a.name < b.name) return -1;\n    if (a.name > b.name) return 1;\n    return 0;\n};\nconst hasAnyRole = (p, roles)=>(p.roles || []).some((r)=>roles.includes(r));\n// a comparator decorator which applies the decorated comparator only if the\n// participant is invisible.\n// This ensures stable sorting when all participants are visible.\nconst ifInvisibleBy = conditional((a, b)=>a.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE || b.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE);\n/**\n * A comparator that applies the decorated comparator when a participant is\n * either invisible or its visibility state isn't known.\n * For visible participants, it ensures stable sorting.\n */ const ifInvisibleOrUnknownBy = conditional((a, b)=>a.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE || a.viewportVisibilityState?.videoTrack === VisibilityState.UNKNOWN || b.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE || b.viewportVisibilityState?.videoTrack === VisibilityState.UNKNOWN);\n/**\n * The default sorting preset.\n */ const defaultSortPreset = combineComparators(pinned, screenSharing, ifInvisibleBy(combineComparators(dominantSpeaker, speaking, reactionType('raised-hand'), publishingVideo, publishingAudio)));\n/**\n * The sorting preset for speaker layout.\n */ const speakerLayoutSortPreset = combineComparators(pinned, screenSharing, dominantSpeaker, ifInvisibleBy(combineComparators(speaking, reactionType('raised-hand'), publishingVideo, publishingAudio)));\n/**\n * The sorting preset for layouts that don't render all participants but\n * instead, render them in pages.\n */ const paginatedLayoutSortPreset = combineComparators(pinned, ifInvisibleOrUnknownBy(combineComparators(dominantSpeaker, speaking, reactionType('raised-hand'), publishingVideo, publishingAudio)));\n/**\n * The sorting preset for livestreams and audio rooms.\n */ const livestreamOrAudioRoomSortPreset = combineComparators(ifInvisibleBy(combineComparators(dominantSpeaker, speaking, reactionType('raised-hand'), publishingVideo, publishingAudio)), role('admin', 'host', 'speaker'));\n/**\n * Returns the default egress object - when no egress data is available.\n */ const defaultEgress = {\n    broadcasting: false,\n    hls: {\n        playlist_url: ''\n    },\n    rtmps: []\n};\n/**\n * Holds the state of the current call.\n * @react You don't have to use this class directly, as we are exposing the state through Hooks.\n */ class CallState {\n    /**\n     * Creates a new instance of the CallState class.\n     *\n     */ constructor(){\n        this.backstageSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(true);\n        this.blockedUserIdsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject([]);\n        this.createdAtSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(new Date());\n        this.endedAtSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(undefined);\n        this.startsAtSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(undefined);\n        this.updatedAtSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(new Date());\n        this.createdBySubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(undefined);\n        this.customSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject({});\n        this.egressSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(undefined);\n        this.ingressSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(undefined);\n        this.recordingSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(false);\n        this.sessionSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(undefined);\n        this.settingsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(undefined);\n        this.transcribingSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(false);\n        this.captioningSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(false);\n        this.endedBySubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(undefined);\n        this.thumbnailsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(undefined);\n        this.membersSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject([]);\n        this.ownCapabilitiesSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject([]);\n        this.callingStateSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(CallingState.UNKNOWN);\n        this.startedAtSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(undefined);\n        this.participantCountSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(0);\n        this.anonymousParticipantCountSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(0);\n        this.participantsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject([]);\n        this.callStatsReportSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(undefined);\n        this.closedCaptionsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject([]);\n        // These are tracks that were delivered to the Subscriber's onTrack event\n        // that we couldn't associate with a participant yet.\n        // This happens when the participantJoined event hasn't been received yet.\n        // We keep these tracks around until we can associate them with a participant.\n        this.orphanedTracks = [];\n        this.logger = getLogger([\n            'CallState'\n        ]);\n        /**\n         * A list of comparators that are used to sort the participants.\n         */ this.sortParticipantsBy = defaultSortPreset;\n        this.closedCaptionsTasks = new Map();\n        /**\n         * Runs the cleanup tasks.\n         */ this.dispose = ()=>{\n            for (const [ccKey, taskId] of this.closedCaptionsTasks.entries()){\n                clearTimeout(taskId);\n                this.closedCaptionsTasks.delete(ccKey);\n            }\n        };\n        /**\n         * Sets the list of criteria that are used to sort the participants.\n         * To disable sorting, you can pass `noopComparator()`.\n         *\n         * @param comparator the comparator to use to sort the participants.\n         */ this.setSortParticipantsBy = (comparator)=>{\n            this.sortParticipantsBy = comparator;\n            // trigger re-sorting of participants\n            this.setCurrentValue(this.participantsSubject, (ps)=>ps);\n        };\n        /**\n         * Gets the current value of an observable, or undefined if the observable has\n         * not emitted a value yet.\n         *\n         * @param observable$ the observable to get the value from.\n         */ this.getCurrentValue = getCurrentValue;\n        /**\n         * Updates the value of the provided Subject.\n         * An `update` can either be a new value or a function which takes\n         * the current value and returns a new value.\n         *\n         * @internal\n         *\n         * @param subject the subject to update.\n         * @param update the update to apply to the subject.\n         * @return the updated value.\n         */ this.setCurrentValue = setCurrentValue;\n        /**\n         * Sets the number of participants in the current call.\n         *\n         * @internal\n         * @param count the number of participants.\n         */ this.setParticipantCount = (count)=>{\n            return this.setCurrentValue(this.participantCountSubject, count);\n        };\n        /**\n         * Sets the time the call session actually started.\n         *\n         * @internal\n         * @param startedAt the time the call session actually started.\n         */ this.setStartedAt = (startedAt)=>{\n            return this.setCurrentValue(this.startedAtSubject, startedAt);\n        };\n        /**\n         * Sets the closed captioning state of the current call.\n         *\n         * @internal\n         * @param captioning the closed captioning state.\n         */ this.setCaptioning = (captioning)=>{\n            return updateValue(this.captioningSubject, captioning);\n        };\n        /**\n         * Sets the number of anonymous participants in the current call.\n         *\n         * @internal\n         * @param count the number of anonymous participants.\n         */ this.setAnonymousParticipantCount = (count)=>{\n            return this.setCurrentValue(this.anonymousParticipantCountSubject, count);\n        };\n        /**\n         * Sets the list of participants in the current call.\n         *\n         * @internal\n         *\n         * @param participants the list of participants.\n         */ this.setParticipants = (participants)=>{\n            return this.setCurrentValue(this.participantsSubject, participants);\n        };\n        /**\n         * Sets the calling state.\n         *\n         * @internal\n         * @param state the new calling state.\n         */ this.setCallingState = (state)=>{\n            return this.setCurrentValue(this.callingStateSubject, state);\n        };\n        /**\n         * Sets the call stats report.\n         *\n         * @internal\n         * @param report the report to set.\n         */ this.setCallStatsReport = (report)=>{\n            return this.setCurrentValue(this.callStatsReportSubject, report);\n        };\n        /**\n         * Sets the members of the current call.\n         *\n         * @internal\n         * @param members the members to set.\n         */ this.setMembers = (members)=>{\n            this.setCurrentValue(this.membersSubject, members);\n        };\n        /**\n         * Sets the own capabilities.\n         *\n         * @internal\n         * @param capabilities the capabilities to set.\n         */ this.setOwnCapabilities = (capabilities)=>{\n            return this.setCurrentValue(this.ownCapabilitiesSubject, capabilities);\n        };\n        /**\n         * Sets the time when this call has been ended.\n         * @param endedAt the time when this call has been ended.\n         */ this.setEndedAt = (endedAt)=>{\n            return this.setCurrentValue(this.endedAtSubject, endedAt);\n        };\n        /**\n         * Will try to find the participant with the given sessionId in the current call.\n         *\n         * @param sessionId the sessionId of the participant to find.\n         * @returns the participant with the given sessionId or undefined if not found.\n         */ this.findParticipantBySessionId = (sessionId)=>{\n            return this.participants.find((p)=>p.sessionId === sessionId);\n        };\n        /**\n         * Returns a new lookup table of participants indexed by their session ID.\n         */ this.getParticipantLookupBySessionId = ()=>{\n            return this.participants.reduce((lookupTable, participant)=>{\n                lookupTable[participant.sessionId] = participant;\n                return lookupTable;\n            }, {});\n        };\n        /**\n         * Updates a participant in the current call identified by the given `sessionId`.\n         * If the participant can't be found, this operation is no-op.\n         *\n         * @internal\n         *\n         * @param sessionId the session ID of the participant to update.\n         * @param patch the patch to apply to the participant.\n         * @returns the updated participant or `undefined` if the participant couldn't be found.\n         */ this.updateParticipant = (sessionId, patch)=>{\n            const participant = this.findParticipantBySessionId(sessionId);\n            if (!participant) {\n                this.logger('warn', `Participant with sessionId ${sessionId} not found`);\n                return;\n            }\n            const thePatch = typeof patch === 'function' ? patch(participant) : patch;\n            const updatedParticipant = {\n                ...participant,\n                ...thePatch\n            };\n            return this.setParticipants((participants)=>participants.map((p)=>p.sessionId === sessionId ? updatedParticipant : p));\n        };\n        /**\n         * Updates a participant in the current call identified by the given `sessionId`.\n         * If a participant with matching `sessionId` can't be found, the provided\n         * `participant` is added to the list of participants.\n         *\n         * @param sessionId the session ID of the participant to update.\n         * @param participant the participant to update or add.\n         */ this.updateOrAddParticipant = (sessionId, participant)=>{\n            return this.setParticipants((participants)=>{\n                let add = true;\n                const nextParticipants = participants.map((p)=>{\n                    if (p.sessionId === sessionId) {\n                        add = false;\n                        return {\n                            ...p,\n                            ...participant\n                        };\n                    }\n                    return p;\n                });\n                if (add) nextParticipants.push(participant);\n                return nextParticipants;\n            });\n        };\n        /**\n         * Updates all participants in the current call whose session ID is in the given `sessionIds`.\n         * If no patches are provided, this operation is no-op.\n         *\n         * @internal\n         *\n         * @param patch the patch to apply to the participants.\n         * @returns all participants, with all patch applied.\n         */ this.updateParticipants = (patch)=>{\n            if (Object.keys(patch).length === 0) return this.participants;\n            return this.setParticipants((participants)=>participants.map((p)=>{\n                    const thePatch = patch[p.sessionId];\n                    if (thePatch) {\n                        return {\n                            ...p,\n                            ...thePatch\n                        };\n                    }\n                    return p;\n                }));\n        };\n        /**\n         * Update track subscription configuration for one or more participants.\n         * You have to create a subscription for each participant for all the different kinds of tracks you want to receive.\n         * You can only subscribe for tracks after the participant started publishing the given kind of track.\n         *\n         * @param trackType the kind of subscription to update.\n         * @param changes the list of subscription changes to do.\n         */ this.updateParticipantTracks = (trackType, changes)=>{\n            return this.updateParticipants(Object.entries(changes).reduce((acc, [sessionId, change])=>{\n                if (change.dimension) {\n                    change.dimension.height = Math.ceil(change.dimension.height);\n                    change.dimension.width = Math.ceil(change.dimension.width);\n                }\n                const prop = trackType === 'videoTrack' ? 'videoDimension' : trackType === 'screenShareTrack' ? 'screenShareDimension' : undefined;\n                if (prop) {\n                    acc[sessionId] = {\n                        [prop]: change.dimension\n                    };\n                }\n                return acc;\n            }, {}));\n        };\n        /**\n         * Updates the call state with the data received from the server.\n         *\n         * @internal\n         *\n         * @param event the video event that our backend sent us.\n         */ this.updateFromEvent = (event)=>{\n            const update = this.eventHandlers[event.type];\n            if (update) {\n                update(event);\n            }\n        };\n        /**\n         * Updates the participant pinned state with server side pinning data.\n         *\n         * @param pins the latest pins from the server.\n         */ this.setServerSidePins = (pins)=>{\n            const pinsLookup = pins.reduce((lookup, pin)=>{\n                lookup[pin.sessionId] = Date.now();\n                return lookup;\n            }, {});\n            return this.setParticipants((participants)=>participants.map((participant)=>{\n                    const serverSidePinnedAt = pinsLookup[participant.sessionId];\n                    // the participant is newly pinned\n                    if (serverSidePinnedAt) {\n                        return {\n                            ...participant,\n                            pin: {\n                                isLocalPin: false,\n                                pinnedAt: serverSidePinnedAt\n                            }\n                        };\n                    }\n                    // the participant is no longer pinned server side\n                    // we need to reset the pin\n                    if (participant.pin && !participant.pin.isLocalPin) {\n                        return {\n                            ...participant,\n                            pin: undefined\n                        };\n                    }\n                    // no changes to be applied\n                    return participant;\n                }));\n        };\n        /**\n         * Adds an orphaned track to the call state.\n         *\n         * @internal\n         *\n         * @param orphanedTrack the orphaned track to add.\n         */ this.registerOrphanedTrack = (orphanedTrack)=>{\n            this.orphanedTracks.push(orphanedTrack);\n        };\n        /**\n         * Removes an orphaned track from the call state.\n         *\n         * @internal\n         *\n         * @param id the ID of the orphaned track to remove.\n         */ this.removeOrphanedTrack = (id)=>{\n            this.orphanedTracks = this.orphanedTracks.filter((o)=>o.id !== id);\n        };\n        /**\n         * Takes all orphaned tracks with the given track lookup prefix.\n         * All orphaned tracks with the given track lookup prefix are removed from the call state.\n         *\n         * @internal\n         *\n         * @param trackLookupPrefix the track lookup prefix to match the orphaned tracks by.\n         */ this.takeOrphanedTracks = (trackLookupPrefix)=>{\n            const orphans = this.orphanedTracks.filter((orphan)=>orphan.trackLookupPrefix === trackLookupPrefix);\n            if (orphans.length > 0) {\n                this.orphanedTracks = this.orphanedTracks.filter((orphan)=>orphan.trackLookupPrefix !== trackLookupPrefix);\n            }\n            return orphans;\n        };\n        /**\n         * Updates the closed captions settings.\n         *\n         * @param config the new closed captions settings.\n         */ this.updateClosedCaptionSettings = (config)=>{\n            this.closedCaptionsSettings = {\n                ...this.closedCaptionsSettings,\n                ...config\n            };\n        };\n        /**\n         * Updates the call state with the data received from the server.\n         *\n         * @internal\n         *\n         * @param call the call response from the server.\n         */ this.updateFromCallResponse = (call)=>{\n            this.setCurrentValue(this.backstageSubject, call.backstage);\n            this.setCurrentValue(this.blockedUserIdsSubject, call.blocked_user_ids);\n            this.setCurrentValue(this.createdAtSubject, new Date(call.created_at));\n            this.setCurrentValue(this.updatedAtSubject, new Date(call.updated_at));\n            this.setCurrentValue(this.startsAtSubject, call.starts_at ? new Date(call.starts_at) : undefined);\n            this.setEndedAt(call.ended_at ? new Date(call.ended_at) : undefined);\n            this.setCurrentValue(this.createdBySubject, call.created_by);\n            this.setCurrentValue(this.customSubject, call.custom);\n            this.setCurrentValue(this.egressSubject, call.egress);\n            this.setCurrentValue(this.ingressSubject, call.ingress);\n            this.setCurrentValue(this.recordingSubject, call.recording);\n            const s = this.setCurrentValue(this.sessionSubject, call.session);\n            this.updateParticipantCountFromSession(s);\n            this.setCurrentValue(this.settingsSubject, call.settings);\n            this.setCurrentValue(this.transcribingSubject, call.transcribing);\n            this.setCurrentValue(this.captioningSubject, call.captioning);\n            this.setCurrentValue(this.thumbnailsSubject, call.thumbnails);\n        };\n        /**\n         * Updates the call state with the data received from the SFU server.\n         *\n         * @internal\n         *\n         * @param callState the call state from the SFU server.\n         * @param currentSessionId the session ID of the current user.\n         * @param reconnectDetails optional reconnect details.\n         */ this.updateFromSfuCallState = (callState, currentSessionId, reconnectDetails)=>{\n            const { participants, participantCount, startedAt, pins } = callState;\n            const localPublishedTracks = reconnectDetails?.announcedTracks.map((t)=>t.trackType) ?? [];\n            this.setParticipants(()=>{\n                const participantLookup = this.getParticipantLookupBySessionId();\n                return participants.map((p)=>{\n                    // We need to preserve the local state of the participant\n                    // (e.g. videoDimension, visibilityState, pinnedAt, etc.)\n                    // as it doesn't exist on the server.\n                    const existingParticipant = participantLookup[p.sessionId];\n                    const isLocalParticipant = p.sessionId === currentSessionId;\n                    return Object.assign({}, existingParticipant, p, {\n                        isLocalParticipant,\n                        publishedTracks: isLocalParticipant ? localPublishedTracks : p.publishedTracks,\n                        viewportVisibilityState: existingParticipant?.viewportVisibilityState ?? {\n                            videoTrack: VisibilityState.UNKNOWN,\n                            screenShareTrack: VisibilityState.UNKNOWN\n                        }\n                    });\n                });\n            });\n            this.setParticipantCount(participantCount?.total || 0);\n            this.setAnonymousParticipantCount(participantCount?.anonymous || 0);\n            this.setStartedAt(startedAt ? Timestamp.toDate(startedAt) : new Date());\n            this.setServerSidePins(pins);\n        };\n        this.updateFromMemberRemoved = (event)=>{\n            this.updateFromCallResponse(event.call);\n            this.setCurrentValue(this.membersSubject, (members)=>members.filter((m)=>event.members.indexOf(m.user_id) === -1));\n        };\n        this.updateFromMemberAdded = (event)=>{\n            this.updateFromCallResponse(event.call);\n            this.setCurrentValue(this.membersSubject, (members)=>[\n                    ...members,\n                    ...event.members\n                ]);\n        };\n        this.updateFromHLSBroadcastStopped = ()=>{\n            this.setCurrentValue(this.egressSubject, (egress = defaultEgress)=>({\n                    ...egress,\n                    broadcasting: false\n                }));\n        };\n        this.updateFromHLSBroadcastingFailed = ()=>{\n            this.setCurrentValue(this.egressSubject, (egress = defaultEgress)=>({\n                    ...egress,\n                    broadcasting: false\n                }));\n        };\n        this.updateFromHLSBroadcastStarted = (event)=>{\n            this.setCurrentValue(this.egressSubject, (egress = defaultEgress)=>({\n                    ...egress,\n                    broadcasting: true,\n                    hls: {\n                        ...egress.hls,\n                        playlist_url: event.hls_playlist_url\n                    }\n                }));\n        };\n        this.updateParticipantCountFromSession = (session)=>{\n            // when in JOINED state, we should use the participant count coming through\n            // the SFU healthcheck event, as it's more accurate.\n            if (!session || this.callingState === CallingState.JOINED) return;\n            const byRoleCount = Object.values(session.participants_count_by_role).reduce((total, countByRole)=>total + countByRole, 0);\n            const participantCount = Math.max(byRoleCount, session.participants.length);\n            this.setParticipantCount(participantCount);\n            this.setAnonymousParticipantCount(session.anonymous_participant_count || 0);\n        };\n        this.updateFromSessionParticipantCountUpdate = (event)=>{\n            const s = this.setCurrentValue(this.sessionSubject, (session)=>{\n                if (!session) return session;\n                return {\n                    ...session,\n                    anonymous_participant_count: event.anonymous_participant_count,\n                    participants_count_by_role: event.participants_count_by_role\n                };\n            });\n            this.updateParticipantCountFromSession(s);\n        };\n        this.updateFromSessionParticipantLeft = (event)=>{\n            const s = this.setCurrentValue(this.sessionSubject, (session)=>{\n                if (!session) return session;\n                const { participants, participants_count_by_role } = session;\n                const { user, user_session_id } = event.participant;\n                return {\n                    ...session,\n                    participants: participants.filter((p)=>p.user_session_id !== user_session_id),\n                    participants_count_by_role: {\n                        ...participants_count_by_role,\n                        [user.role]: Math.max(0, (participants_count_by_role[user.role] || 0) - 1)\n                    }\n                };\n            });\n            this.updateParticipantCountFromSession(s);\n        };\n        this.updateFromSessionParticipantJoined = (event)=>{\n            const s = this.setCurrentValue(this.sessionSubject, (session)=>{\n                if (!session) return session;\n                const { participants, participants_count_by_role } = session;\n                const { user, user_session_id } = event.participant;\n                // It could happen that the backend delivers the same participant more than once.\n                // Once with the call.session_started event and once again with the\n                // call.session_participant_joined event. In this case,\n                // we should update the existing participant and prevent duplicating it.\n                let shouldInsertParticipant = true;\n                const updatedParticipants = participants.map((p)=>{\n                    if (p.user_session_id === user_session_id) {\n                        shouldInsertParticipant = false;\n                        return event.participant;\n                    }\n                    return p;\n                });\n                if (shouldInsertParticipant) {\n                    // this is a new array, we can safely push the new participant\n                    updatedParticipants.push(event.participant);\n                }\n                // If we are updating an existing participant, we don't want to increment\n                // the participant_by_role count.\n                const increment = shouldInsertParticipant ? 1 : 0;\n                return {\n                    ...session,\n                    participants: updatedParticipants,\n                    participants_count_by_role: {\n                        ...participants_count_by_role,\n                        [user.role]: (participants_count_by_role[user.role] || 0) + increment\n                    }\n                };\n            });\n            this.updateParticipantCountFromSession(s);\n        };\n        this.updateMembers = (event)=>{\n            this.updateFromCallResponse(event.call);\n            this.setCurrentValue(this.membersSubject, (members)=>members.map((member)=>{\n                    const memberUpdate = event.members.find((m)=>m.user_id === member.user_id);\n                    return memberUpdate ? memberUpdate : member;\n                }));\n        };\n        this.updateParticipantReaction = (event)=>{\n            const { user, custom, type, emoji_code } = event.reaction;\n            this.setParticipants((participants)=>{\n                return participants.map((p)=>{\n                    // skip if the reaction is not for this participant\n                    if (p.userId !== user.id) return p;\n                    // update the participant with the new reaction\n                    return {\n                        ...p,\n                        reaction: {\n                            type,\n                            emoji_code,\n                            custom\n                        }\n                    };\n                });\n            });\n        };\n        this.unblockUser = (event)=>{\n            this.setCurrentValue(this.blockedUserIdsSubject, (current)=>{\n                if (!current) return current;\n                return current.filter((id)=>id !== event.user.id);\n            });\n        };\n        this.blockUser = (event)=>{\n            this.setCurrentValue(this.blockedUserIdsSubject, (current)=>[\n                    ...current || [],\n                    event.user.id\n                ]);\n        };\n        this.updateOwnCapabilities = (event)=>{\n            if (event.user.id === this.localParticipant?.userId) {\n                this.setCurrentValue(this.ownCapabilitiesSubject, event.own_capabilities);\n            }\n        };\n        this.updateFromClosedCaptions = (event)=>{\n            this.setCurrentValue(this.closedCaptionsSubject, (queue)=>{\n                const { closed_caption } = event;\n                const keyOf = (c)=>`${c.speaker_id}/${c.start_time}`;\n                const currentKey = keyOf(closed_caption);\n                const duplicate = queue.some((caption)=>keyOf(caption) === currentKey);\n                if (duplicate) return queue;\n                const nextQueue = [\n                    ...queue,\n                    closed_caption\n                ];\n                const { visibilityDurationMs = 2700, maxVisibleCaptions = 2 } = this.closedCaptionsSettings || {};\n                // schedule the removal of the closed caption after the retention time\n                if (visibilityDurationMs > 0) {\n                    const taskId = setTimeout(()=>{\n                        this.setCurrentValue(this.closedCaptionsSubject, (captions)=>captions.filter((caption)=>caption !== closed_caption));\n                        this.closedCaptionsTasks.delete(currentKey);\n                    }, visibilityDurationMs);\n                    this.closedCaptionsTasks.set(currentKey, taskId);\n                    // cancel the cleanup tasks for the closed captions that are no longer in the queue\n                    for(let i = 0; i < nextQueue.length - maxVisibleCaptions; i++){\n                        const key = keyOf(nextQueue[i]);\n                        const task = this.closedCaptionsTasks.get(key);\n                        clearTimeout(task);\n                        this.closedCaptionsTasks.delete(key);\n                    }\n                }\n                // trim the queue\n                return nextQueue.slice(-maxVisibleCaptions);\n            });\n        };\n        this.participants$ = this.participantsSubject.asObservable().pipe(// maintain stable-sort by mutating the participants stored\n        // in the original subject\n        (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_16__.map)((ps)=>ps.sort(this.sortParticipantsBy)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_17__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.localParticipant$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_16__.map)((participants)=>participants.find((p)=>p.isLocalParticipant)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_17__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.remoteParticipants$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_16__.map)((participants)=>participants.filter((p)=>!p.isLocalParticipant)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_17__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.pinnedParticipants$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_16__.map)((participants)=>participants.filter((p)=>!!p.pin)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_17__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.dominantSpeaker$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_16__.map)((participants)=>participants.find((p)=>p.isDominantSpeaker)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_17__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        this.hasOngoingScreenShare$ = this.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_16__.map)((participants)=>participants.some((p)=>hasScreenShare(p))), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_18__.distinctUntilChanged)(), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_17__.shareReplay)({\n            bufferSize: 1,\n            refCount: true\n        }));\n        // dates\n        this.createdAt$ = this.createdAtSubject.asObservable();\n        this.endedAt$ = this.endedAtSubject.asObservable();\n        this.startsAt$ = this.startsAtSubject.asObservable();\n        this.startedAt$ = this.startedAtSubject.asObservable();\n        this.updatedAt$ = this.updatedAtSubject.asObservable();\n        this.callStatsReport$ = this.callStatsReportSubject.asObservable();\n        this.members$ = this.membersSubject.asObservable();\n        // complex objects should work as streams of data\n        this.createdBy$ = this.createdBySubject.asObservable();\n        this.custom$ = this.customSubject.asObservable();\n        this.egress$ = this.egressSubject.asObservable();\n        this.ingress$ = this.ingressSubject.asObservable();\n        this.session$ = this.sessionSubject.asObservable();\n        this.settings$ = this.settingsSubject.asObservable();\n        this.endedBy$ = this.endedBySubject.asObservable();\n        this.thumbnails$ = this.thumbnailsSubject.asObservable();\n        this.closedCaptions$ = this.closedCaptionsSubject.asObservable();\n        /**\n         * Performs shallow comparison of two arrays.\n         * Expects primitive values: [1, 2, 3] is equal to [2, 1, 3].\n         */ const isShallowEqual = (a, b)=>{\n            if (a.length !== b.length) return false;\n            for (const item of a)if (!b.includes(item)) return false;\n            for (const item of b)if (!a.includes(item)) return false;\n            return true;\n        };\n        /**\n         * Creates an Observable from the given subject by piping to the\n         * `distinctUntilChanged()` operator.\n         */ const duc = (subject, comparator)=>subject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_18__.distinctUntilChanged)(comparator));\n        // primitive values should only emit once the value they hold changes\n        this.anonymousParticipantCount$ = duc(this.anonymousParticipantCountSubject);\n        this.blockedUserIds$ = duc(this.blockedUserIdsSubject, isShallowEqual);\n        this.backstage$ = duc(this.backstageSubject);\n        this.callingState$ = duc(this.callingStateSubject);\n        this.ownCapabilities$ = duc(this.ownCapabilitiesSubject, isShallowEqual);\n        this.participantCount$ = duc(this.participantCountSubject);\n        this.recording$ = duc(this.recordingSubject);\n        this.transcribing$ = duc(this.transcribingSubject);\n        this.captioning$ = duc(this.captioningSubject);\n        this.eventHandlers = {\n            // these events are not updating the call state:\n            'call.deleted': undefined,\n            'call.permission_request': undefined,\n            'call.recording_ready': undefined,\n            'call.transcription_ready': undefined,\n            'call.user_muted': undefined,\n            'connection.error': undefined,\n            'connection.ok': undefined,\n            'health.check': undefined,\n            'user.banned': undefined,\n            'user.deactivated': undefined,\n            'user.deleted': undefined,\n            'user.muted': undefined,\n            'user.presence.changed': undefined,\n            'user.reactivated': undefined,\n            'user.unbanned': undefined,\n            'user.updated': undefined,\n            custom: undefined,\n            // events that update call state:\n            'call.accepted': (e)=>this.updateFromCallResponse(e.call),\n            'call.blocked_user': this.blockUser,\n            'call.closed_caption': this.updateFromClosedCaptions,\n            'call.closed_captions_failed': ()=>{\n                this.setCurrentValue(this.captioningSubject, false);\n            },\n            'call.closed_captions_started': ()=>{\n                this.setCurrentValue(this.captioningSubject, true);\n            },\n            'call.closed_captions_stopped': ()=>{\n                this.setCurrentValue(this.captioningSubject, false);\n            },\n            'call.created': (e)=>this.updateFromCallResponse(e.call),\n            'call.ended': (e)=>{\n                this.updateFromCallResponse(e.call);\n                this.setCurrentValue(this.endedBySubject, e.user);\n            },\n            'call.hls_broadcasting_failed': this.updateFromHLSBroadcastingFailed,\n            'call.hls_broadcasting_started': this.updateFromHLSBroadcastStarted,\n            'call.hls_broadcasting_stopped': this.updateFromHLSBroadcastStopped,\n            'call.live_started': (e)=>this.updateFromCallResponse(e.call),\n            'call.member_added': this.updateFromMemberAdded,\n            'call.member_removed': this.updateFromMemberRemoved,\n            'call.member_updated_permission': this.updateMembers,\n            'call.member_updated': this.updateMembers,\n            'call.notification': (e)=>{\n                this.updateFromCallResponse(e.call);\n                this.setMembers(e.members);\n            },\n            'call.permissions_updated': this.updateOwnCapabilities,\n            'call.reaction_new': this.updateParticipantReaction,\n            'call.recording_started': ()=>this.setCurrentValue(this.recordingSubject, true),\n            'call.recording_stopped': ()=>this.setCurrentValue(this.recordingSubject, false),\n            'call.recording_failed': ()=>this.setCurrentValue(this.recordingSubject, false),\n            'call.rejected': (e)=>this.updateFromCallResponse(e.call),\n            'call.ring': (e)=>this.updateFromCallResponse(e.call),\n            'call.missed': (e)=>this.updateFromCallResponse(e.call),\n            'call.session_ended': (e)=>this.updateFromCallResponse(e.call),\n            'call.session_participant_count_updated': this.updateFromSessionParticipantCountUpdate,\n            'call.session_participant_joined': this.updateFromSessionParticipantJoined,\n            'call.session_participant_left': this.updateFromSessionParticipantLeft,\n            'call.session_started': (e)=>this.updateFromCallResponse(e.call),\n            'call.transcription_started': ()=>{\n                this.setCurrentValue(this.transcribingSubject, true);\n            },\n            'call.transcription_stopped': ()=>{\n                this.setCurrentValue(this.transcribingSubject, false);\n            },\n            'call.transcription_failed': ()=>{\n                this.setCurrentValue(this.transcribingSubject, false);\n            },\n            'call.unblocked_user': this.unblockUser,\n            'call.updated': (e)=>this.updateFromCallResponse(e.call)\n        };\n    }\n    /**\n     * The server-side counted number of participants connected to the current call.\n     * This number includes the anonymous participants as well.\n     */ get participantCount() {\n        return this.getCurrentValue(this.participantCount$);\n    }\n    /**\n     * The time the call session actually started.\n     * Useful for displaying the call duration.\n     */ get startedAt() {\n        return this.getCurrentValue(this.startedAt$);\n    }\n    /**\n     * Returns whether closed captions are enabled in the current call.\n     */ get captioning() {\n        return this.getCurrentValue(this.captioning$);\n    }\n    /**\n     * The server-side counted number of anonymous participants connected to the current call.\n     * This number includes the anonymous participants as well.\n     */ get anonymousParticipantCount() {\n        return this.getCurrentValue(this.anonymousParticipantCount$);\n    }\n    /**\n     * The list of participants in the current call.\n     */ get participants() {\n        return this.getCurrentValue(this.participants$);\n    }\n    /**\n     * The local participant in the current call.\n     */ get localParticipant() {\n        return this.getCurrentValue(this.localParticipant$);\n    }\n    /**\n     * The list of remote participants in the current call.\n     */ get remoteParticipants() {\n        return this.getCurrentValue(this.remoteParticipants$);\n    }\n    /**\n     * The dominant speaker in the current call.\n     */ get dominantSpeaker() {\n        return this.getCurrentValue(this.dominantSpeaker$);\n    }\n    /**\n     * The list of pinned participants in the current call.\n     */ get pinnedParticipants() {\n        return this.getCurrentValue(this.pinnedParticipants$);\n    }\n    /**\n     * Tell if there is an ongoing screen share in this call.\n     */ get hasOngoingScreenShare() {\n        return this.getCurrentValue(this.hasOngoingScreenShare$);\n    }\n    /**\n     * The calling state.\n     */ get callingState() {\n        return this.getCurrentValue(this.callingState$);\n    }\n    /**\n     * The call stats report.\n     */ get callStatsReport() {\n        return this.getCurrentValue(this.callStatsReport$);\n    }\n    /**\n     * The members of the current call.\n     */ get members() {\n        return this.getCurrentValue(this.members$);\n    }\n    /**\n     * The capabilities of the current user for the current call.\n     */ get ownCapabilities() {\n        return this.getCurrentValue(this.ownCapabilities$);\n    }\n    /**\n     * The backstage state.\n     */ get backstage() {\n        return this.getCurrentValue(this.backstage$);\n    }\n    /**\n     * Will provide the list of blocked user IDs.\n     */ get blockedUserIds() {\n        return this.getCurrentValue(this.blockedUserIds$);\n    }\n    /**\n     * Will provide the time when this call has been created.\n     */ get createdAt() {\n        return this.getCurrentValue(this.createdAt$);\n    }\n    /**\n     * Will provide the time when this call has been ended.\n     */ get endedAt() {\n        return this.getCurrentValue(this.endedAt$);\n    }\n    /**\n     * Will provide the time when this call has been scheduled to start.\n     */ get startsAt() {\n        return this.getCurrentValue(this.startsAt$);\n    }\n    /**\n     * Will provide the time when this call has been updated.\n     */ get updatedAt() {\n        return this.getCurrentValue(this.updatedAt$);\n    }\n    /**\n     * Will provide the user who created this call.\n     */ get createdBy() {\n        return this.getCurrentValue(this.createdBy$);\n    }\n    /**\n     * Will provide the custom data of this call.\n     */ get custom() {\n        return this.getCurrentValue(this.custom$);\n    }\n    /**\n     * Will provide the egress data of this call.\n     */ get egress() {\n        return this.getCurrentValue(this.egress$);\n    }\n    /**\n     * Will provide the ingress data of this call.\n     */ get ingress() {\n        return this.getCurrentValue(this.ingress$);\n    }\n    /**\n     * Will provide the recording state of this call.\n     */ get recording() {\n        return this.getCurrentValue(this.recording$);\n    }\n    /**\n     * Will provide the session data of this call.\n     */ get session() {\n        return this.getCurrentValue(this.session$);\n    }\n    /**\n     * Will provide the settings of this call.\n     */ get settings() {\n        return this.getCurrentValue(this.settings$);\n    }\n    /**\n     * Will provide the transcribing state of this call.\n     */ get transcribing() {\n        return this.getCurrentValue(this.transcribing$);\n    }\n    /**\n     * Will provide the user who ended this call.\n     */ get endedBy() {\n        return this.getCurrentValue(this.endedBy$);\n    }\n    /**\n     * Will provide the thumbnails of this call, if enabled in the call settings.\n     */ get thumbnails() {\n        return this.getCurrentValue(this.thumbnails$);\n    }\n    /**\n     * Returns the current queue of closed captions.\n     */ get closedCaptions() {\n        return this.getCurrentValue(this.closedCaptions$);\n    }\n}\n/**\n * A base class for the `Publisher` and `Subscriber` classes.\n * @internal\n */ class BasePeerConnection {\n    /**\n     * Constructs a new `BasePeerConnection` instance.\n     */ constructor(peerType, { sfuClient, connectionConfig, state, dispatcher, onUnrecoverableError, logTag }){\n        this.isIceRestarting = false;\n        this.subscriptions = [];\n        /**\n         * Disposes the `RTCPeerConnection` instance.\n         */ this.dispose = ()=>{\n            this.detachEventHandlers();\n            this.pc.close();\n        };\n        /**\n         * Handles events synchronously.\n         * Consecutive events are queued and executed one after the other.\n         */ this.on = (event, fn)=>{\n            this.subscriptions.push(this.dispatcher.on(event, (e)=>{\n                withoutConcurrency(`pc.${event}`, async ()=>fn(e)).catch((err)=>{\n                    this.logger('warn', `Error handling ${event}`, err);\n                });\n            }));\n        };\n        /**\n         * Appends the trickled ICE candidates to the `RTCPeerConnection`.\n         */ this.addTrickledIceCandidates = ()=>{\n            const { iceTrickleBuffer } = this.sfuClient;\n            const observable = this.peerType === PeerType.SUBSCRIBER ? iceTrickleBuffer.subscriberCandidates : iceTrickleBuffer.publisherCandidates;\n            this.unsubscribeIceTrickle?.();\n            this.unsubscribeIceTrickle = createSafeAsyncSubscription(observable, async (candidate)=>{\n                return this.pc.addIceCandidate(candidate).catch((e)=>{\n                    this.logger('warn', `ICE candidate error`, e, candidate);\n                });\n            });\n        };\n        /**\n         * Sets the SFU client to use.\n         *\n         * @param sfuClient the SFU client to use.\n         */ this.setSfuClient = (sfuClient)=>{\n            this.sfuClient = sfuClient;\n        };\n        /**\n         * Returns the result of the `RTCPeerConnection.getStats()` method\n         * @param selector an optional `MediaStreamTrack` to get the stats for.\n         */ this.getStats = (selector)=>{\n            return this.pc.getStats(selector);\n        };\n        /**\n         * Handles the ICECandidate event and\n         * Initiates an ICE Trickle process with the SFU.\n         */ this.onIceCandidate = (e)=>{\n            const { candidate } = e;\n            if (!candidate) {\n                this.logger('debug', 'null ice candidate');\n                return;\n            }\n            const iceCandidate = this.toJSON(candidate);\n            this.sfuClient.iceTrickle({\n                peerType: this.peerType,\n                iceCandidate\n            }).catch((err)=>this.logger('warn', `ICETrickle failed`, err));\n        };\n        /**\n         * Converts the ICE candidate to a JSON string.\n         */ this.toJSON = (candidate)=>{\n            if (!candidate.usernameFragment) {\n                // react-native-webrtc doesn't include usernameFragment in the candidate\n                const segments = candidate.candidate.split(' ');\n                const ufragIndex = segments.findIndex((s)=>s === 'ufrag') + 1;\n                const usernameFragment = segments[ufragIndex];\n                return JSON.stringify({\n                    ...candidate,\n                    usernameFragment\n                });\n            }\n            return JSON.stringify(candidate.toJSON());\n        };\n        /**\n         * Handles the ICE connection state change event.\n         */ this.onIceConnectionStateChange = ()=>{\n            const state = this.pc.iceConnectionState;\n            this.logger('debug', `ICE connection state changed`, state);\n            if (this.state.callingState === CallingState.RECONNECTING) return;\n            // do nothing when ICE is restarting\n            if (this.isIceRestarting) return;\n            if (state === 'failed' || state === 'disconnected') {\n                this.logger('debug', `Attempting to restart ICE`);\n                this.restartIce().catch((e)=>{\n                    this.logger('error', `ICE restart failed`, e);\n                    this.onUnrecoverableError?.();\n                });\n            }\n        };\n        /**\n         * Handles the ICE candidate error event.\n         */ this.onIceCandidateError = (e)=>{\n            const errorMessage = e instanceof RTCPeerConnectionIceErrorEvent && `${e.errorCode}: ${e.errorText}`;\n            const iceState = this.pc.iceConnectionState;\n            const logLevel = iceState === 'connected' || iceState === 'checking' ? 'debug' : 'warn';\n            this.logger(logLevel, `ICE Candidate error`, errorMessage);\n        };\n        /**\n         * Handles the ICE gathering state change event.\n         */ this.onIceGatherChange = ()=>{\n            this.logger('debug', `ICE Gathering State`, this.pc.iceGatheringState);\n        };\n        /**\n         * Handles the signaling state change event.\n         */ this.onSignalingChange = ()=>{\n            this.logger('debug', `Signaling state changed`, this.pc.signalingState);\n        };\n        this.peerType = peerType;\n        this.sfuClient = sfuClient;\n        this.state = state;\n        this.dispatcher = dispatcher;\n        this.onUnrecoverableError = onUnrecoverableError;\n        this.logger = getLogger([\n            peerType === PeerType.SUBSCRIBER ? 'Subscriber' : 'Publisher',\n            logTag\n        ]);\n        this.pc = new RTCPeerConnection(connectionConfig);\n        this.pc.addEventListener('icecandidate', this.onIceCandidate);\n        this.pc.addEventListener('icecandidateerror', this.onIceCandidateError);\n        this.pc.addEventListener('iceconnectionstatechange', this.onIceConnectionStateChange);\n        this.pc.addEventListener('icegatheringstatechange', this.onIceGatherChange);\n        this.pc.addEventListener('signalingstatechange', this.onSignalingChange);\n    }\n    /**\n     * Detaches the event handlers from the `RTCPeerConnection`.\n     */ detachEventHandlers() {\n        this.pc.removeEventListener('icecandidate', this.onIceCandidate);\n        this.pc.removeEventListener('icecandidateerror', this.onIceCandidateError);\n        this.pc.removeEventListener('signalingstatechange', this.onSignalingChange);\n        this.pc.removeEventListener('iceconnectionstatechange', this.onIceConnectionStateChange);\n        this.pc.removeEventListener('icegatheringstatechange', this.onIceGatherChange);\n        this.unsubscribeIceTrickle?.();\n        this.subscriptions.forEach((unsubscribe)=>unsubscribe());\n    }\n}\nclass TransceiverCache {\n    constructor(){\n        this.cache = [];\n        this.layers = [];\n        /**\n         * An array maintaining the order how transceivers were added to the peer connection.\n         * This is needed because some browsers (Firefox) don't reliably report\n         * trackId and `mid` parameters.\n         */ this.transceiverOrder = [];\n        /**\n         * Adds a transceiver to the cache.\n         */ this.add = (publishOption, transceiver)=>{\n            this.cache.push({\n                publishOption,\n                transceiver\n            });\n            this.transceiverOrder.push(transceiver);\n        };\n        /**\n         * Gets the transceiver for the given publish option.\n         */ this.get = (publishOption)=>{\n            return this.findTransceiver(publishOption)?.transceiver;\n        };\n        /**\n         * Gets the last transceiver for the given track type and publish option id.\n         */ this.getWith = (trackType, id)=>{\n            return this.findTransceiver({\n                trackType,\n                id\n            })?.transceiver;\n        };\n        /**\n         * Checks if the cache has the given publish option.\n         */ this.has = (publishOption)=>{\n            return !!this.get(publishOption);\n        };\n        /**\n         * Finds the first transceiver that satisfies the given predicate.\n         */ this.find = (predicate)=>{\n            return this.cache.find(predicate);\n        };\n        /**\n         * Provides all the items in the cache.\n         */ this.items = ()=>{\n            return this.cache;\n        };\n        /**\n         * Init index of the transceiver in the cache.\n         */ this.indexOf = (transceiver)=>{\n            return this.transceiverOrder.indexOf(transceiver);\n        };\n        /**\n         * Gets cached video layers for the given track.\n         */ this.getLayers = (publishOption)=>{\n            const entry = this.layers.find((item)=>item.publishOption.id === publishOption.id && item.publishOption.trackType === publishOption.trackType);\n            return entry?.layers;\n        };\n        /**\n         * Sets the video layers for the given track.\n         */ this.setLayers = (publishOption, layers = [])=>{\n            const entry = this.findLayer(publishOption);\n            if (entry) {\n                entry.layers = layers;\n            } else {\n                this.layers.push({\n                    publishOption,\n                    layers\n                });\n            }\n        };\n        this.findTransceiver = (publishOption)=>{\n            return this.cache.find((item)=>item.publishOption.id === publishOption.id && item.publishOption.trackType === publishOption.trackType);\n        };\n        this.findLayer = (publishOption)=>{\n            return this.layers.find((item)=>item.publishOption.id === publishOption.id && item.publishOption.trackType === publishOption.trackType);\n        };\n    }\n}\nconst ensureExhausted = (x, message)=>{\n    getLogger([\n        'helpers'\n    ])('warn', message, x);\n};\nconst trackTypeToParticipantStreamKey = (trackType)=>{\n    switch(trackType){\n        case TrackType.SCREEN_SHARE:\n            return 'screenShareStream';\n        case TrackType.SCREEN_SHARE_AUDIO:\n            return 'screenShareAudioStream';\n        case TrackType.VIDEO:\n            return 'videoStream';\n        case TrackType.AUDIO:\n            return 'audioStream';\n        case TrackType.UNSPECIFIED:\n            throw new Error('Track type is unspecified');\n        default:\n            ensureExhausted(trackType, 'Unknown track type');\n    }\n};\nconst muteTypeToTrackType = (muteType)=>{\n    switch(muteType){\n        case 'audio':\n            return TrackType.AUDIO;\n        case 'video':\n            return TrackType.VIDEO;\n        case 'screenshare':\n            return TrackType.SCREEN_SHARE;\n        case 'screenshare_audio':\n            return TrackType.SCREEN_SHARE_AUDIO;\n        default:\n            ensureExhausted(muteType, 'Unknown mute type');\n    }\n};\nconst toTrackType = (trackType)=>{\n    switch(trackType){\n        case 'TRACK_TYPE_AUDIO':\n            return TrackType.AUDIO;\n        case 'TRACK_TYPE_VIDEO':\n            return TrackType.VIDEO;\n        case 'TRACK_TYPE_SCREEN_SHARE':\n            return TrackType.SCREEN_SHARE;\n        case 'TRACK_TYPE_SCREEN_SHARE_AUDIO':\n            return TrackType.SCREEN_SHARE_AUDIO;\n        default:\n            return undefined;\n    }\n};\nconst isAudioTrackType = (trackType)=>trackType === TrackType.AUDIO || trackType === TrackType.SCREEN_SHARE_AUDIO;\nconst defaultBitratePerRid = {\n    q: 300000,\n    h: 750000,\n    f: 1250000\n};\n/**\n * In SVC, we need to send only one video encoding (layer).\n * this layer will have the additional spatial and temporal layers\n * defined via the scalabilityMode property.\n *\n * @param layers the layers to process.\n */ const toSvcEncodings = (layers)=>{\n    if (!layers) return;\n    // we take the highest quality layer, and we assign it to `q` encoder.\n    const withRid = (rid)=>(l)=>l.rid === rid;\n    const highestLayer = layers.find(withRid('f')) || layers.find(withRid('h')) || layers.find(withRid('q'));\n    return [\n        {\n            ...highestLayer,\n            rid: 'q'\n        }\n    ];\n};\n/**\n * Converts the rid to a video quality.\n */ const ridToVideoQuality = (rid)=>{\n    return rid === 'q' ? VideoQuality.LOW_UNSPECIFIED : rid === 'h' ? VideoQuality.MID : VideoQuality.HIGH; // default to HIGH\n};\n/**\n * Converts the given video layers to SFU video layers.\n */ const toVideoLayers = (layers = [])=>{\n    return layers.map((layer)=>({\n            rid: layer.rid || '',\n            bitrate: layer.maxBitrate || 0,\n            fps: layer.maxFramerate || 0,\n            quality: ridToVideoQuality(layer.rid || ''),\n            videoDimension: {\n                width: layer.width,\n                height: layer.height\n            }\n        }));\n};\n/**\n * Converts the spatial and temporal layers to a scalability mode.\n */ const toScalabilityMode = (spatialLayers, temporalLayers)=>`L${spatialLayers}T${temporalLayers}${spatialLayers > 1 ? '_KEY' : ''}`;\n/**\n * Determines the most optimal video layers for the given track.\n *\n * @param videoTrack the video track to find optimal layers for.\n * @param publishOption the publish options for the track.\n */ const computeVideoLayers = (videoTrack, publishOption)=>{\n    if (isAudioTrackType(publishOption.trackType)) return;\n    const optimalVideoLayers = [];\n    const settings = videoTrack.getSettings();\n    const { width = 0, height = 0 } = settings;\n    const { bitrate, codec, fps, maxSpatialLayers = 3, maxTemporalLayers = 3, videoDimension = {\n        width: 1280,\n        height: 720\n    } } = publishOption;\n    const maxBitrate = getComputedMaxBitrate(videoDimension, width, height, bitrate);\n    let downscaleFactor = 1;\n    let bitrateFactor = 1;\n    const svcCodec = isSvcCodec(codec?.name);\n    for (const rid of [\n        'f',\n        'h',\n        'q'\n    ].slice(0, maxSpatialLayers)){\n        const layer = {\n            active: true,\n            rid,\n            width: Math.round(width / downscaleFactor),\n            height: Math.round(height / downscaleFactor),\n            maxBitrate: maxBitrate / bitrateFactor || defaultBitratePerRid[rid],\n            maxFramerate: fps\n        };\n        if (svcCodec) {\n            // for SVC codecs, we need to set the scalability mode, and the\n            // codec will handle the rest (layers, temporal layers, etc.)\n            layer.scalabilityMode = toScalabilityMode(maxSpatialLayers, maxTemporalLayers);\n        } else {\n            // for non-SVC codecs, we need to downscale proportionally (simulcast)\n            layer.scaleResolutionDownBy = downscaleFactor;\n        }\n        downscaleFactor *= 2;\n        bitrateFactor *= 2;\n        // Reversing the order [f, h, q] to [q, h, f] as Chrome uses encoding index\n        // when deciding which layer to disable when CPU or bandwidth is constrained.\n        // Encodings should be ordered in increasing spatial resolution order.\n        optimalVideoLayers.unshift(layer);\n    }\n    // for simplicity, we start with all layers enabled, then this function\n    // will clear/reassign the layers that are not needed\n    return withSimulcastConstraints(settings, optimalVideoLayers);\n};\n/**\n * Computes the maximum bitrate for a given resolution.\n * If the current resolution is lower than the target resolution,\n * we want to proportionally reduce the target bitrate.\n * If the current resolution is higher than the target resolution,\n * we want to use the target bitrate.\n *\n * @param targetResolution the target resolution.\n * @param currentWidth the current width of the track.\n * @param currentHeight the current height of the track.\n * @param bitrate the target bitrate.\n */ const getComputedMaxBitrate = (targetResolution, currentWidth, currentHeight, bitrate)=>{\n    // if the current resolution is lower than the target resolution,\n    // we want to proportionally reduce the target bitrate\n    const { width: targetWidth, height: targetHeight } = targetResolution;\n    if (currentWidth < targetWidth || currentHeight < targetHeight) {\n        const currentPixels = currentWidth * currentHeight;\n        const targetPixels = targetWidth * targetHeight;\n        const reductionFactor = currentPixels / targetPixels;\n        return Math.round(bitrate * reductionFactor);\n    }\n    return bitrate;\n};\n/**\n * Browsers have different simulcast constraints for different video resolutions.\n *\n * This function modifies the provided list of video layers according to the\n * current implementation of simulcast constraints in the Chromium based browsers.\n *\n * https://chromium.googlesource.com/external/webrtc/+/refs/heads/main/media/engine/simulcast.cc#90\n */ const withSimulcastConstraints = (settings, optimalVideoLayers)=>{\n    let layers;\n    const size = Math.max(settings.width || 0, settings.height || 0);\n    if (size <= 320) {\n        // provide only one layer 320x240 (q), the one with the highest quality\n        layers = optimalVideoLayers.filter((layer)=>layer.rid === 'f');\n    } else if (size <= 640) {\n        // provide two layers, 160x120 (q) and 640x480 (h)\n        layers = optimalVideoLayers.filter((layer)=>layer.rid !== 'h');\n    } else {\n        // provide three layers for sizes > 640x480\n        layers = optimalVideoLayers;\n    }\n    const ridMapping = [\n        'q',\n        'h',\n        'f'\n    ];\n    return layers.map((layer, index)=>({\n            ...layer,\n            rid: ridMapping[index]\n        }));\n};\n/**\n * Extracts the mid from the transceiver or the SDP.\n *\n * @param transceiver the transceiver.\n * @param transceiverInitIndex the index of the transceiver in the transceiver's init array.\n * @param sdp the SDP.\n */ const extractMid = (transceiver, transceiverInitIndex, sdp)=>{\n    if (transceiver.mid) return transceiver.mid;\n    if (!sdp) return String(transceiverInitIndex);\n    const track = transceiver.sender.track;\n    const parsedSdp = (0,sdp_transform__WEBPACK_IMPORTED_MODULE_2__.parse)(sdp);\n    const media = parsedSdp.media.find((m)=>{\n        return m.type === track.kind && // if `msid` is not present, we assume that the track is the first one\n        (m.msid?.includes(track.id) ?? true);\n    });\n    if (typeof media?.mid !== 'undefined') return String(media.mid);\n    if (transceiverInitIndex < 0) return '';\n    return String(transceiverInitIndex);\n};\n/**\n * The `Publisher` is responsible for publishing/unpublishing media streams to/from the SFU\n *\n * @internal\n */ class Publisher extends BasePeerConnection {\n    /**\n     * Constructs a new `Publisher` instance.\n     */ constructor({ publishOptions, ...baseOptions }){\n        super(PeerType.PUBLISHER_UNSPECIFIED, baseOptions);\n        this.transceiverCache = new TransceiverCache();\n        /**\n         * Starts publishing the given track of the given media stream.\n         *\n         * Consecutive calls to this method will replace the stream.\n         * The previous stream will be stopped.\n         *\n         * @param track the track to publish.\n         * @param trackType the track type to publish.\n         */ this.publish = async (track, trackType)=>{\n            if (!this.publishOptions.some((o)=>o.trackType === trackType)) {\n                throw new Error(`No publish options found for ${TrackType[trackType]}`);\n            }\n            for (const publishOption of this.publishOptions){\n                if (publishOption.trackType !== trackType) continue;\n                // create a clone of the track as otherwise the same trackId will\n                // appear in the SDP in multiple transceivers\n                const trackToPublish = track.clone();\n                const transceiver = this.transceiverCache.get(publishOption);\n                if (!transceiver) {\n                    this.addTransceiver(trackToPublish, publishOption);\n                } else {\n                    await transceiver.sender.replaceTrack(trackToPublish);\n                }\n            }\n        };\n        /**\n         * Adds a new transceiver carrying the given track to the peer connection.\n         */ this.addTransceiver = (track, publishOption)=>{\n            const videoEncodings = computeVideoLayers(track, publishOption);\n            const sendEncodings = isSvcCodec(publishOption.codec?.name) ? toSvcEncodings(videoEncodings) : videoEncodings;\n            const transceiver = this.pc.addTransceiver(track, {\n                direction: 'sendonly',\n                sendEncodings\n            });\n            const trackType = publishOption.trackType;\n            this.logger('debug', `Added ${TrackType[trackType]} transceiver`);\n            this.transceiverCache.add(publishOption, transceiver);\n        };\n        /**\n         * Synchronizes the current Publisher state with the provided publish options.\n         */ this.syncPublishOptions = async ()=>{\n            // enable publishing with new options -> [av1, vp9]\n            for (const publishOption of this.publishOptions){\n                const { trackType } = publishOption;\n                if (!this.isPublishing(trackType)) continue;\n                if (this.transceiverCache.has(publishOption)) continue;\n                const item = this.transceiverCache.find((i)=>!!i.transceiver.sender.track && i.publishOption.trackType === trackType);\n                if (!item || !item.transceiver) continue;\n                // take the track from the existing transceiver for the same track type,\n                // clone it and publish it with the new publish options\n                const track = item.transceiver.sender.track.clone();\n                this.addTransceiver(track, publishOption);\n            }\n            // stop publishing with options not required anymore -> [vp9]\n            for (const item of this.transceiverCache.items()){\n                const { publishOption, transceiver } = item;\n                const hasPublishOption = this.publishOptions.some((option)=>option.id === publishOption.id && option.trackType === publishOption.trackType);\n                if (hasPublishOption) continue;\n                // it is safe to stop the track here, it is a clone\n                transceiver.sender.track?.stop();\n                await transceiver.sender.replaceTrack(null);\n            }\n        };\n        /**\n         * Returns true if the given track type is currently being published to the SFU.\n         *\n         * @param trackType the track type to check.\n         */ this.isPublishing = (trackType)=>{\n            for (const item of this.transceiverCache.items()){\n                if (item.publishOption.trackType !== trackType) continue;\n                const track = item.transceiver.sender.track;\n                if (!track) continue;\n                if (track.readyState === 'live' && track.enabled) return true;\n            }\n            return false;\n        };\n        /**\n         * Maps the given track ID to the corresponding track type.\n         */ this.getTrackType = (trackId)=>{\n            for (const transceiverId of this.transceiverCache.items()){\n                const { publishOption, transceiver } = transceiverId;\n                if (transceiver.sender.track?.id === trackId) {\n                    return publishOption.trackType;\n                }\n            }\n            return undefined;\n        };\n        /**\n         * Stops the cloned track that is being published to the SFU.\n         */ this.stopTracks = (...trackTypes)=>{\n            for (const item of this.transceiverCache.items()){\n                const { publishOption, transceiver } = item;\n                if (!trackTypes.includes(publishOption.trackType)) continue;\n                transceiver.sender.track?.stop();\n            }\n        };\n        this.changePublishQuality = async (videoSender)=>{\n            const { trackType, layers, publishOptionId } = videoSender;\n            const enabledLayers = layers.filter((l)=>l.active);\n            const tag = 'Update publish quality:';\n            this.logger('info', `${tag} requested layers by SFU:`, enabledLayers);\n            const sender = this.transceiverCache.getWith(trackType, publishOptionId)?.sender;\n            if (!sender) {\n                return this.logger('warn', `${tag} no video sender found.`);\n            }\n            const params = sender.getParameters();\n            if (params.encodings.length === 0) {\n                return this.logger('warn', `${tag} there are no encodings set.`);\n            }\n            const [codecInUse] = params.codecs;\n            const usesSvcCodec = codecInUse && isSvcCodec(codecInUse.mimeType);\n            let changed = false;\n            for (const encoder of params.encodings){\n                const layer = usesSvcCodec ? enabledLayers[0] : enabledLayers.find((l)=>l.name === encoder.rid) ?? (params.encodings.length === 1 ? enabledLayers[0] : undefined);\n                // flip 'active' flag only when necessary\n                const shouldActivate = !!layer?.active;\n                if (shouldActivate !== encoder.active) {\n                    encoder.active = shouldActivate;\n                    changed = true;\n                }\n                // skip the rest of the settings if the layer is disabled or not found\n                if (!layer) continue;\n                const { maxFramerate, scaleResolutionDownBy, maxBitrate, scalabilityMode } = layer;\n                if (scaleResolutionDownBy >= 1 && scaleResolutionDownBy !== encoder.scaleResolutionDownBy) {\n                    encoder.scaleResolutionDownBy = scaleResolutionDownBy;\n                    changed = true;\n                }\n                if (maxBitrate > 0 && maxBitrate !== encoder.maxBitrate) {\n                    encoder.maxBitrate = maxBitrate;\n                    changed = true;\n                }\n                if (maxFramerate > 0 && maxFramerate !== encoder.maxFramerate) {\n                    encoder.maxFramerate = maxFramerate;\n                    changed = true;\n                }\n                // @ts-expect-error scalabilityMode is not in the typedefs yet\n                if (scalabilityMode && scalabilityMode !== encoder.scalabilityMode) {\n                    // @ts-expect-error scalabilityMode is not in the typedefs yet\n                    encoder.scalabilityMode = scalabilityMode;\n                    changed = true;\n                }\n            }\n            const activeEncoders = params.encodings.filter((e)=>e.active);\n            if (!changed) {\n                return this.logger('info', `${tag} no change:`, activeEncoders);\n            }\n            await sender.setParameters(params);\n            this.logger('info', `${tag} enabled rids:`, activeEncoders);\n        };\n        /**\n         * Restarts the ICE connection and renegotiates with the SFU.\n         */ this.restartIce = async ()=>{\n            this.logger('debug', 'Restarting ICE connection');\n            const signalingState = this.pc.signalingState;\n            if (this.isIceRestarting || signalingState === 'have-local-offer') {\n                this.logger('debug', 'ICE restart is already in progress');\n                return;\n            }\n            await this.negotiate({\n                iceRestart: true\n            });\n        };\n        this.onNegotiationNeeded = ()=>{\n            withoutConcurrency('publisher.negotiate', ()=>this.negotiate()).catch((err)=>{\n                this.logger('error', `Negotiation failed.`, err);\n                this.onUnrecoverableError?.();\n            });\n        };\n        /**\n         * Initiates a new offer/answer exchange with the currently connected SFU.\n         *\n         * @param options the optional offer options to use.\n         */ this.negotiate = async (options)=>{\n            const offer = await this.pc.createOffer(options);\n            const trackInfos = this.getAnnouncedTracks(offer.sdp);\n            if (trackInfos.length === 0) {\n                throw new Error(`Can't negotiate without announcing any tracks`);\n            }\n            try {\n                this.isIceRestarting = options?.iceRestart ?? false;\n                await this.pc.setLocalDescription(offer);\n                const { response } = await this.sfuClient.setPublisher({\n                    sdp: offer.sdp || '',\n                    tracks: trackInfos\n                });\n                if (response.error) throw new Error(response.error.message);\n                await this.pc.setRemoteDescription({\n                    type: 'answer',\n                    sdp: response.sdp\n                });\n            } finally{\n                this.isIceRestarting = false;\n            }\n            this.addTrickledIceCandidates();\n        };\n        /**\n         * Returns a list of tracks that are currently being published.\n         */ this.getPublishedTracks = ()=>{\n            const tracks = [];\n            for (const { transceiver } of this.transceiverCache.items()){\n                const track = transceiver.sender.track;\n                if (track && track.readyState === 'live') tracks.push(track);\n            }\n            return tracks;\n        };\n        /**\n         * Returns a list of tracks that are currently being published.\n         * @param sdp an optional SDP to extract the `mid` from.\n         */ this.getAnnouncedTracks = (sdp)=>{\n            const trackInfos = [];\n            for (const bundle of this.transceiverCache.items()){\n                const { transceiver, publishOption } = bundle;\n                const track = transceiver.sender.track;\n                if (!track) continue;\n                trackInfos.push(this.toTrackInfo(transceiver, publishOption, sdp));\n            }\n            return trackInfos;\n        };\n        /**\n         * Returns a list of tracks that are currently being published.\n         * This method shall be used for the reconnection flow.\n         * There we shouldn't announce the tracks that have been stopped due to a codec switch.\n         */ this.getAnnouncedTracksForReconnect = ()=>{\n            const sdp = this.pc.localDescription?.sdp;\n            const trackInfos = [];\n            for (const publishOption of this.publishOptions){\n                const transceiver = this.transceiverCache.get(publishOption);\n                if (!transceiver || !transceiver.sender.track) continue;\n                trackInfos.push(this.toTrackInfo(transceiver, publishOption, sdp));\n            }\n            return trackInfos;\n        };\n        /**\n         * Converts the given transceiver to a `TrackInfo` object.\n         */ this.toTrackInfo = (transceiver, publishOption, sdp)=>{\n            const track = transceiver.sender.track;\n            const isTrackLive = track.readyState === 'live';\n            const layers = isTrackLive ? computeVideoLayers(track, publishOption) : this.transceiverCache.getLayers(publishOption);\n            this.transceiverCache.setLayers(publishOption, layers);\n            const isAudioTrack = isAudioTrackType(publishOption.trackType);\n            const isStereo = isAudioTrack && track.getSettings().channelCount === 2;\n            const transceiverIndex = this.transceiverCache.indexOf(transceiver);\n            const audioSettings = this.state.settings?.audio;\n            return {\n                trackId: track.id,\n                layers: toVideoLayers(layers),\n                trackType: publishOption.trackType,\n                mid: extractMid(transceiver, transceiverIndex, sdp),\n                stereo: isStereo,\n                dtx: isAudioTrack && !!audioSettings?.opus_dtx_enabled,\n                red: isAudioTrack && !!audioSettings?.redundant_coding_enabled,\n                muted: !isTrackLive,\n                codec: publishOption.codec,\n                publishOptionId: publishOption.id\n            };\n        };\n        this.publishOptions = publishOptions;\n        this.pc.addEventListener('negotiationneeded', this.onNegotiationNeeded);\n        this.on('iceRestart', (iceRestart)=>{\n            if (iceRestart.peerType !== PeerType.PUBLISHER_UNSPECIFIED) return;\n            this.restartIce().catch((err)=>{\n                this.logger('warn', `ICERestart failed`, err);\n                this.onUnrecoverableError?.();\n            });\n        });\n        this.on('changePublishQuality', async (event)=>{\n            for (const videoSender of event.videoSenders){\n                await this.changePublishQuality(videoSender);\n            }\n        });\n        this.on('changePublishOptions', (event)=>{\n            this.publishOptions = event.publishOptions;\n            return this.syncPublishOptions();\n        });\n    }\n    /**\n     * Detaches the event handlers from the `RTCPeerConnection`.\n     * This is useful when we want to replace the `RTCPeerConnection`\n     * instance with a new one (in case of migration).\n     */ detachEventHandlers() {\n        super.detachEventHandlers();\n        this.pc.removeEventListener('negotiationneeded', this.onNegotiationNeeded);\n    }\n}\n/**\n * A wrapper around the `RTCPeerConnection` that handles the incoming\n * media streams from the SFU.\n *\n * @internal\n */ class Subscriber extends BasePeerConnection {\n    /**\n     * Constructs a new `Subscriber` instance.\n     */ constructor(opts){\n        super(PeerType.SUBSCRIBER, opts);\n        /**\n         * Restarts the ICE connection and renegotiates with the SFU.\n         */ this.restartIce = async ()=>{\n            this.logger('debug', 'Restarting ICE connection');\n            if (this.pc.signalingState === 'have-remote-offer') {\n                this.logger('debug', 'ICE restart is already in progress');\n                return;\n            }\n            if (this.pc.connectionState === 'new') {\n                this.logger('debug', `ICE connection is not yet established, skipping restart.`);\n                return;\n            }\n            const previousIsIceRestarting = this.isIceRestarting;\n            try {\n                this.isIceRestarting = true;\n                await this.sfuClient.iceRestart({\n                    peerType: PeerType.SUBSCRIBER\n                });\n            } catch (e) {\n                // restore the previous state, as our intent for restarting ICE failed\n                this.isIceRestarting = previousIsIceRestarting;\n                throw e;\n            }\n        };\n        this.handleOnTrack = (e)=>{\n            const [primaryStream] = e.streams;\n            // example: `e3f6aaf8-b03d-4911-be36-83f47d37a76a:TRACK_TYPE_VIDEO`\n            const [trackId, rawTrackType] = primaryStream.id.split(':');\n            const participantToUpdate = this.state.participants.find((p)=>p.trackLookupPrefix === trackId);\n            this.logger('debug', `[onTrack]: Got remote ${rawTrackType} track for userId: ${participantToUpdate?.userId}`, e.track.id, e.track);\n            const trackDebugInfo = `${participantToUpdate?.userId} ${rawTrackType}:${trackId}`;\n            e.track.addEventListener('mute', ()=>{\n                this.logger('info', `[onTrack]: Track muted: ${trackDebugInfo}`);\n            });\n            e.track.addEventListener('unmute', ()=>{\n                this.logger('info', `[onTrack]: Track unmuted: ${trackDebugInfo}`);\n            });\n            e.track.addEventListener('ended', ()=>{\n                this.logger('info', `[onTrack]: Track ended: ${trackDebugInfo}`);\n                this.state.removeOrphanedTrack(primaryStream.id);\n            });\n            const trackType = toTrackType(rawTrackType);\n            if (!trackType) {\n                return this.logger('error', `Unknown track type: ${rawTrackType}`);\n            }\n            if (!participantToUpdate) {\n                this.logger('warn', `[onTrack]: Received track for unknown participant: ${trackId}`, e);\n                this.state.registerOrphanedTrack({\n                    id: primaryStream.id,\n                    trackLookupPrefix: trackId,\n                    track: primaryStream,\n                    trackType\n                });\n                return;\n            }\n            const streamKindProp = trackTypeToParticipantStreamKey(trackType);\n            if (!streamKindProp) {\n                this.logger('error', `Unknown track type: ${rawTrackType}`);\n                return;\n            }\n            // get the previous stream to dispose it later\n            // usually this happens during migration, when the stream is replaced\n            // with a new one but the old one is still in the state\n            const previousStream = participantToUpdate[streamKindProp];\n            // replace the previous stream with the new one, prevents flickering\n            this.state.updateParticipant(participantToUpdate.sessionId, {\n                [streamKindProp]: primaryStream\n            });\n            // now, dispose the previous stream if it exists\n            if (previousStream) {\n                this.logger('info', `[onTrack]: Cleaning up previous remote ${e.track.kind} tracks for userId: ${participantToUpdate.userId}`);\n                previousStream.getTracks().forEach((t)=>{\n                    t.stop();\n                    previousStream.removeTrack(t);\n                });\n            }\n        };\n        this.negotiate = async (subscriberOffer)=>{\n            this.logger('info', `Received subscriberOffer`, subscriberOffer);\n            await this.pc.setRemoteDescription({\n                type: 'offer',\n                sdp: subscriberOffer.sdp\n            });\n            this.addTrickledIceCandidates();\n            const answer = await this.pc.createAnswer();\n            await this.pc.setLocalDescription(answer);\n            await this.sfuClient.sendAnswer({\n                peerType: PeerType.SUBSCRIBER,\n                sdp: answer.sdp || ''\n            });\n            this.isIceRestarting = false;\n        };\n        this.pc.addEventListener('track', this.handleOnTrack);\n        this.on('subscriberOffer', async (subscriberOffer)=>{\n            return this.negotiate(subscriberOffer).catch((err)=>{\n                this.logger('error', `Negotiation failed.`, err);\n            });\n        });\n    }\n    /**\n     * Detaches the event handlers from the `RTCPeerConnection`.\n     * This is useful when we want to replace the `RTCPeerConnection`\n     * instance with a new one (in case of migration).\n     */ detachEventHandlers() {\n        super.detachEventHandlers();\n        this.pc.removeEventListener('track', this.handleOnTrack);\n    }\n}\nconst createWebSocketSignalChannel = (opts)=>{\n    const { endpoint, onMessage, logTag } = opts;\n    const logger = getLogger([\n        'SfuClientWS',\n        logTag\n    ]);\n    const ws = new WebSocket(endpoint);\n    ws.binaryType = 'arraybuffer'; // do we need this?\n    ws.addEventListener('error', (e)=>{\n        logger('error', 'Signaling WS channel error', e);\n    });\n    ws.addEventListener('close', (e)=>{\n        logger('info', 'Signaling WS channel is closed', e);\n    });\n    ws.addEventListener('open', (e)=>{\n        logger('info', 'Signaling WS channel is open', e);\n    });\n    ws.addEventListener('message', (e)=>{\n        try {\n            const message = e.data instanceof ArrayBuffer ? SfuEvent.fromBinary(new Uint8Array(e.data)) : SfuEvent.fromJsonString(e.data.toString());\n            onMessage(message);\n        } catch (err) {\n            logger('error', 'Failed to decode a message. Check whether the Proto models match.', {\n                event: e,\n                error: err\n            });\n        }\n    });\n    return ws;\n};\nconst toRtcConfiguration = (config)=>{\n    return {\n        iceServers: config.map((ice)=>({\n                urls: ice.urls,\n                username: ice.username,\n                credential: ice.password\n            }))\n    };\n};\n/**\n * Saving a long-lived reference to a promise that can reject can be unsafe,\n * since rejecting the promise causes an unhandled rejection error (even if the\n * rejection is handled everywhere promise result is expected).\n *\n * To avoid that, we add both resolution and rejection handlers to the promise.\n * That way, the saved promise never rejects. A callback is provided as return\n * value to build a *new* promise, that resolves and rejects along with\n * the original promise.\n * @param promise Promise to wrap, which possibly rejects\n * @returns Callback to build a new promise, which resolves and rejects along\n * with the original promise\n */ function makeSafePromise(promise) {\n    let isPending = true;\n    const safePromise = promise.then((result)=>({\n            status: 'resolved',\n            result\n        }), (error)=>({\n            status: 'rejected',\n            error\n        })).finally(()=>isPending = false);\n    const unwrapPromise = ()=>safePromise.then((fulfillment)=>{\n            if (fulfillment.status === 'rejected') throw fulfillment.error;\n            return fulfillment.result;\n        });\n    unwrapPromise.checkPending = ()=>isPending;\n    return unwrapPromise;\n}\n/**\n * Creates a new promise with resolvers.\n *\n * Based on:\n * - https://github.com/tc39/proposal-promise-with-resolvers/blob/main/polyfills.js\n */ const promiseWithResolvers = ()=>{\n    let resolve;\n    let reject;\n    const promise = new Promise((_resolve, _reject)=>{\n        resolve = _resolve;\n        reject = _reject;\n    });\n    let isResolved = false;\n    let isRejected = false;\n    const resolver = (value)=>{\n        isResolved = true;\n        resolve(value);\n    };\n    const rejecter = (reason)=>{\n        isRejected = true;\n        reject(reason);\n    };\n    return {\n        promise,\n        resolve: resolver,\n        reject: rejecter,\n        isResolved,\n        isRejected\n    };\n};\nconst uninitialized = Symbol('uninitialized');\n/**\n * Lazily creates a value using a provided factory\n */ function lazy(factory) {\n    let value = uninitialized;\n    return ()=>{\n        if (value === uninitialized) {\n            value = factory();\n        }\n        return value;\n    };\n}\n// Do not modify this file manually. Instead, edit worker.ts\n// and the run ./generate-timer-worker.sh\nconst timerWorker = {\n    src: `const timerIdMapping = new Map();\nself.addEventListener('message', (event) => {\n    const request = event.data;\n    switch (request.type) {\n        case 'setTimeout':\n        case 'setInterval':\n            timerIdMapping.set(request.id, (request.type === 'setTimeout' ? setTimeout : setInterval)(() => {\n                tick(request.id);\n                if (request.type === 'setTimeout') {\n                    timerIdMapping.delete(request.id);\n                }\n            }, request.timeout));\n            break;\n        case 'clearTimeout':\n        case 'clearInterval':\n            (request.type === 'clearTimeout' ? clearTimeout : clearInterval)(timerIdMapping.get(request.id));\n            timerIdMapping.delete(request.id);\n            break;\n    }\n});\nfunction tick(id) {\n    const message = { type: 'tick', id };\n    self.postMessage(message);\n}`\n};\nclass TimerWorker {\n    constructor(){\n        this.currentTimerId = 1;\n        this.callbacks = new Map();\n        this.fallback = false;\n    }\n    setup({ useTimerWorker = true } = {}) {\n        if (!useTimerWorker) {\n            this.fallback = true;\n            return;\n        }\n        try {\n            const source = timerWorker.src;\n            const blob = new Blob([\n                source\n            ], {\n                type: 'application/javascript; charset=utf-8'\n            });\n            const script = URL.createObjectURL(blob);\n            this.worker = new Worker(script, {\n                name: 'str-timer-worker'\n            });\n            this.worker.addEventListener('message', (event)=>{\n                const { type, id } = event.data;\n                if (type === 'tick') {\n                    this.callbacks.get(id)?.();\n                }\n            });\n        } catch (err) {\n            getLogger([\n                'timer-worker'\n            ])('error', err);\n            this.fallback = true;\n        }\n    }\n    destroy() {\n        this.callbacks.clear();\n        this.worker?.terminate();\n        this.worker = undefined;\n        this.fallback = false;\n    }\n    get ready() {\n        return this.fallback || Boolean(this.worker);\n    }\n    setInterval(callback, timeout) {\n        return this.setTimer('setInterval', callback, timeout);\n    }\n    clearInterval(id) {\n        this.clearTimer('clearInterval', id);\n    }\n    setTimeout(callback, timeout) {\n        return this.setTimer('setTimeout', callback, timeout);\n    }\n    clearTimeout(id) {\n        this.clearTimer('clearTimeout', id);\n    }\n    setTimer(type, callback, timeout) {\n        if (!this.ready) {\n            this.setup();\n        }\n        if (this.fallback) {\n            return (type === 'setTimeout' ? setTimeout : setInterval)(callback, timeout);\n        }\n        const id = this.getTimerId();\n        this.callbacks.set(id, ()=>{\n            callback();\n            // Timeouts are one-off operations, so no need to keep callback reference\n            // after timer has fired\n            if (type === 'setTimeout') {\n                this.callbacks.delete(id);\n            }\n        });\n        this.sendMessage({\n            type,\n            id,\n            timeout\n        });\n        return id;\n    }\n    clearTimer(type, id) {\n        if (!id) {\n            return;\n        }\n        if (!this.ready) {\n            this.setup();\n        }\n        if (this.fallback) {\n            (type === 'clearTimeout' ? clearTimeout : clearInterval)(id);\n            return;\n        }\n        this.callbacks.delete(id);\n        this.sendMessage({\n            type,\n            id\n        });\n    }\n    getTimerId() {\n        return this.currentTimerId++;\n    }\n    sendMessage(message) {\n        if (!this.worker) {\n            throw new Error(\"Cannot use timer worker before it's set up\");\n        }\n        this.worker.postMessage(message);\n    }\n}\nlet timerWorkerEnabled = false;\nconst enableTimerWorker = ()=>{\n    timerWorkerEnabled = true;\n};\nconst getTimers = lazy(()=>{\n    const instance = new TimerWorker();\n    instance.setup({\n        useTimerWorker: timerWorkerEnabled\n    });\n    return instance;\n});\n/**\n * The client used for exchanging information with the SFU.\n */ class StreamSfuClient {\n    /**\n     * Constructs a new SFU client.\n     */ constructor({ dispatcher, credentials, sessionId, logTag, joinResponseTimeout = 5000, onSignalClose, streamClient }){\n        /**\n         * A buffer for ICE Candidates that are received before\n         * the Publisher and Subscriber Peer Connections are ready to handle them.\n         */ this.iceTrickleBuffer = new IceTrickleBuffer();\n        /**\n         * Flag to indicate if the client is in the process of leaving the call.\n         * This is set to `true` when the user initiates the leave process.\n         */ this.isLeaving = false;\n        this.pingIntervalInMs = 10 * 1000;\n        this.unhealthyTimeoutInMs = this.pingIntervalInMs + 5 * 1000;\n        /**\n         * Promise that resolves when the JoinResponse is received.\n         * Rejects after a certain threshold if the response is not received.\n         */ this.joinResponseTask = promiseWithResolvers();\n        /**\n         * A controller to abort the current requests.\n         */ this.abortController = new AbortController();\n        this.createWebSocket = ()=>{\n            this.signalWs = createWebSocketSignalChannel({\n                logTag: this.logTag,\n                endpoint: `${this.credentials.server.ws_endpoint}?tag=${this.logTag}`,\n                onMessage: (message)=>{\n                    this.lastMessageTimestamp = new Date();\n                    this.scheduleConnectionCheck();\n                    this.dispatcher.dispatch(message, this.logTag);\n                }\n            });\n            this.signalWs.addEventListener('close', this.handleWebSocketClose);\n            this.signalReady = makeSafePromise(Promise.race([\n                new Promise((resolve)=>{\n                    const onOpen = ()=>{\n                        this.signalWs.removeEventListener('open', onOpen);\n                        resolve(this.signalWs);\n                    };\n                    this.signalWs.addEventListener('open', onOpen);\n                }),\n                new Promise((resolve, reject)=>{\n                    setTimeout(()=>reject(new Error('SFU WS connection timed out')), this.joinResponseTimeout);\n                })\n            ]));\n        };\n        this.cleanUpWebSocket = ()=>{\n            this.signalWs.removeEventListener('close', this.handleWebSocketClose);\n        };\n        this.handleWebSocketClose = ()=>{\n            this.signalWs.removeEventListener('close', this.handleWebSocketClose);\n            getTimers().clearInterval(this.keepAliveInterval);\n            clearTimeout(this.connectionCheckTimeout);\n            this.onSignalClose?.();\n        };\n        this.close = (code = StreamSfuClient.NORMAL_CLOSURE, reason)=>{\n            if (this.signalWs.readyState === WebSocket.OPEN) {\n                this.logger('debug', `Closing SFU WS connection: ${code} - ${reason}`);\n                this.signalWs.close(code, `js-client: ${reason}`);\n                this.cleanUpWebSocket();\n            }\n            this.dispose();\n        };\n        this.dispose = ()=>{\n            this.logger('debug', 'Disposing SFU client');\n            this.unsubscribeIceTrickle();\n            this.unsubscribeNetworkChanged();\n            clearInterval(this.keepAliveInterval);\n            clearTimeout(this.connectionCheckTimeout);\n            clearTimeout(this.migrateAwayTimeout);\n            this.abortController.abort();\n            this.migrationTask?.resolve();\n            this.iceTrickleBuffer.dispose();\n        };\n        this.leaveAndClose = async (reason)=>{\n            await this.joinTask;\n            try {\n                this.isLeaving = true;\n                await this.notifyLeave(reason);\n            } catch (err) {\n                this.logger('debug', 'Error notifying SFU about leaving call', err);\n            }\n            this.close(StreamSfuClient.NORMAL_CLOSURE, reason.substring(0, 115));\n        };\n        this.updateSubscriptions = async (tracks)=>{\n            await this.joinTask;\n            return retryable(()=>this.rpc.updateSubscriptions({\n                    sessionId: this.sessionId,\n                    tracks\n                }), this.abortController.signal);\n        };\n        this.setPublisher = async (data)=>{\n            await this.joinTask;\n            return retryable(()=>this.rpc.setPublisher({\n                    ...data,\n                    sessionId: this.sessionId\n                }), this.abortController.signal);\n        };\n        this.sendAnswer = async (data)=>{\n            await this.joinTask;\n            return retryable(()=>this.rpc.sendAnswer({\n                    ...data,\n                    sessionId: this.sessionId\n                }), this.abortController.signal);\n        };\n        this.iceTrickle = async (data)=>{\n            await this.joinTask;\n            return retryable(()=>this.rpc.iceTrickle({\n                    ...data,\n                    sessionId: this.sessionId\n                }), this.abortController.signal);\n        };\n        this.iceRestart = async (data)=>{\n            await this.joinTask;\n            return retryable(()=>this.rpc.iceRestart({\n                    ...data,\n                    sessionId: this.sessionId\n                }), this.abortController.signal);\n        };\n        this.updateMuteStates = async (muteStates)=>{\n            await this.joinTask;\n            return retryable(()=>this.rpc.updateMuteStates({\n                    muteStates,\n                    sessionId: this.sessionId\n                }), this.abortController.signal);\n        };\n        this.sendStats = async (stats)=>{\n            await this.joinTask;\n            return retryable(()=>this.rpc.sendStats({\n                    ...stats,\n                    sessionId: this.sessionId\n                }), this.abortController.signal);\n        };\n        this.startNoiseCancellation = async ()=>{\n            await this.joinTask;\n            return retryable(()=>this.rpc.startNoiseCancellation({\n                    sessionId: this.sessionId\n                }), this.abortController.signal);\n        };\n        this.stopNoiseCancellation = async ()=>{\n            await this.joinTask;\n            return retryable(()=>this.rpc.stopNoiseCancellation({\n                    sessionId: this.sessionId\n                }), this.abortController.signal);\n        };\n        this.enterMigration = async (opts = {})=>{\n            this.isLeaving = true;\n            const { timeout = 7 * 1000 } = opts;\n            this.migrationTask?.reject(new Error('Cancelled previous migration'));\n            const task = this.migrationTask = promiseWithResolvers();\n            const unsubscribe = this.dispatcher.on('participantMigrationComplete', ()=>{\n                unsubscribe();\n                clearTimeout(this.migrateAwayTimeout);\n                task.resolve();\n            });\n            this.migrateAwayTimeout = setTimeout(()=>{\n                unsubscribe();\n                task.reject(new Error(`Migration (${this.logTag}) failed to complete in ${timeout}ms`));\n            }, timeout);\n            return task.promise;\n        };\n        this.join = async (data)=>{\n            // wait for the signal web socket to be ready before sending \"joinRequest\"\n            await this.signalReady();\n            if (this.joinResponseTask.isResolved || this.joinResponseTask.isRejected) {\n                // we need to lock the RPC requests until we receive a JoinResponse.\n                // that's why we have this primitive lock mechanism.\n                // the client starts with already initialized joinResponseTask,\n                // and this code creates a new one for the next join request.\n                this.joinResponseTask = promiseWithResolvers();\n            }\n            // capture a reference to the current joinResponseTask as it might\n            // be replaced with a new one in case a second join request is made\n            const current = this.joinResponseTask;\n            let timeoutId;\n            const unsubscribe = this.dispatcher.on('joinResponse', (joinResponse)=>{\n                this.logger('debug', 'Received joinResponse', joinResponse);\n                clearTimeout(timeoutId);\n                unsubscribe();\n                this.keepAlive();\n                current.resolve(joinResponse);\n            });\n            timeoutId = setTimeout(()=>{\n                unsubscribe();\n                current.reject(new Error('Waiting for \"joinResponse\" has timed out'));\n            }, this.joinResponseTimeout);\n            await this.send(SfuRequest.create({\n                requestPayload: {\n                    oneofKind: 'joinRequest',\n                    joinRequest: JoinRequest.create({\n                        ...data,\n                        sessionId: this.sessionId,\n                        token: this.credentials.token\n                    })\n                }\n            }));\n            return current.promise;\n        };\n        this.ping = async ()=>{\n            return this.send(SfuRequest.create({\n                requestPayload: {\n                    oneofKind: 'healthCheckRequest',\n                    healthCheckRequest: {}\n                }\n            }));\n        };\n        this.notifyLeave = async (reason)=>{\n            return this.send(SfuRequest.create({\n                requestPayload: {\n                    oneofKind: 'leaveCallRequest',\n                    leaveCallRequest: {\n                        sessionId: this.sessionId,\n                        reason\n                    }\n                }\n            }));\n        };\n        this.send = async (message)=>{\n            await this.signalReady(); // wait for the signal ws to be open\n            const msgJson = SfuRequest.toJson(message);\n            if (this.signalWs.readyState !== WebSocket.OPEN) {\n                this.logger('debug', 'Signal WS is not open. Skipping message', msgJson);\n                return;\n            }\n            this.logger('debug', `Sending message to: ${this.edgeName}`, msgJson);\n            this.signalWs.send(SfuRequest.toBinary(message));\n        };\n        this.keepAlive = ()=>{\n            const timers = getTimers();\n            timers.clearInterval(this.keepAliveInterval);\n            this.keepAliveInterval = timers.setInterval(()=>{\n                this.ping().catch((e)=>{\n                    this.logger('error', 'Error sending healthCheckRequest to SFU', e);\n                });\n            }, this.pingIntervalInMs);\n        };\n        this.scheduleConnectionCheck = ()=>{\n            clearTimeout(this.connectionCheckTimeout);\n            this.connectionCheckTimeout = setTimeout(()=>{\n                if (this.lastMessageTimestamp) {\n                    const timeSinceLastMessage = new Date().getTime() - this.lastMessageTimestamp.getTime();\n                    if (timeSinceLastMessage > this.unhealthyTimeoutInMs) {\n                        this.close(StreamSfuClient.ERROR_CONNECTION_UNHEALTHY, `SFU connection unhealthy. Didn't receive any message for ${this.unhealthyTimeoutInMs}ms`);\n                    }\n                }\n            }, this.unhealthyTimeoutInMs);\n        };\n        this.dispatcher = dispatcher;\n        this.sessionId = sessionId || generateUUIDv4();\n        this.onSignalClose = onSignalClose;\n        this.credentials = credentials;\n        const { server, token } = credentials;\n        this.edgeName = server.edge_name;\n        this.joinResponseTimeout = joinResponseTimeout;\n        this.logTag = logTag;\n        this.logger = getLogger([\n            'SfuClient',\n            logTag\n        ]);\n        this.rpc = createSignalClient({\n            baseUrl: server.url,\n            interceptors: [\n                withHeaders({\n                    Authorization: `Bearer ${token}`\n                }),\n                getLogLevel() === 'trace' && withRequestLogger(this.logger, 'trace')\n            ].filter((v)=>!!v)\n        });\n        // Special handling for the ICETrickle kind of events.\n        // The SFU might trigger these events before the initial RTC\n        // connection is established or \"JoinResponse\" received.\n        // In that case, those events (ICE candidates) need to be buffered\n        // and later added to the appropriate PeerConnection\n        // once the remoteDescription is known and set.\n        this.unsubscribeIceTrickle = dispatcher.on('iceTrickle', (iceTrickle)=>{\n            this.iceTrickleBuffer.push(iceTrickle);\n        });\n        // listen to network changes to handle offline state\n        // we shouldn't attempt to recover websocket connection when offline\n        this.unsubscribeNetworkChanged = streamClient.on('network.changed', (e)=>{\n            if (!e.online) {\n                this.networkAvailableTask = promiseWithResolvers();\n            } else {\n                this.networkAvailableTask?.resolve();\n            }\n        });\n        this.createWebSocket();\n    }\n    get isHealthy() {\n        return this.signalWs.readyState === WebSocket.OPEN;\n    }\n    get joinTask() {\n        return this.joinResponseTask.promise;\n    }\n}\n/**\n * The normal closure code. Used for controlled shutdowns.\n */ StreamSfuClient.NORMAL_CLOSURE = 1000;\n/**\n * The error code used when the SFU connection is unhealthy.\n * Usually, this means that no message has been received from the SFU for\n * a certain amount of time (`connectionCheckTimeout`).\n */ StreamSfuClient.ERROR_CONNECTION_UNHEALTHY = 4001;\n/**\n * The error code used when the SFU connection is disposed because a new\n * connection is established or is about to be established.\n * Here, we don't use 1000 (normal closure) because we don't want the\n * SFU to clean up the resources associated with the current participant.\n */ StreamSfuClient.DISPOSE_OLD_SOCKET = 4002;\n/**\n * Event handler that watched the delivery of `call.accepted`.\n * Once the event is received, the call is joined.\n */ const watchCallAccepted = (call)=>{\n    return async function onCallAccepted(event) {\n        // We want to discard the event if it's from the current user\n        if (event.user.id === call.currentUserId) return;\n        const { state } = call;\n        if (event.call.created_by.id === call.currentUserId && state.callingState === CallingState.RINGING) {\n            await call.join();\n        }\n    };\n};\n/**\n * Event handler that watches delivery of `call.rejected` Websocket event.\n * Once the event is received, the call is left.\n */ const watchCallRejected = (call)=>{\n    return async function onCallRejected(event) {\n        // We want to discard the event if it's from the current user\n        if (event.user.id === call.currentUserId) return;\n        const { call: eventCall } = event;\n        const { session: callSession } = eventCall;\n        if (!callSession) {\n            call.logger('warn', 'No call session provided. Ignoring call.rejected event.', event);\n            return;\n        }\n        const rejectedBy = callSession.rejected_by;\n        const { members, callingState } = call.state;\n        if (callingState !== CallingState.RINGING) {\n            call.logger('info', 'Call is not in ringing mode (it is either accepted or rejected already). Ignoring call.rejected event.', event);\n            return;\n        }\n        if (call.isCreatedByMe) {\n            const everyoneElseRejected = members.filter((m)=>m.user_id !== call.currentUserId).every((m)=>rejectedBy[m.user_id]);\n            if (everyoneElseRejected) {\n                call.logger('info', 'everyone rejected, leaving the call');\n                await call.leave({\n                    reason: 'ring: everyone rejected'\n                });\n            }\n        } else {\n            if (rejectedBy[eventCall.created_by.id]) {\n                call.logger('info', 'call creator rejected, leaving call');\n                await call.leave({\n                    reason: 'ring: creator rejected'\n                });\n            }\n        }\n    };\n};\n/**\n * Event handler that watches the delivery of `call.ended` Websocket event.\n */ const watchCallEnded = (call)=>{\n    return function onCallEnded() {\n        const { callingState } = call.state;\n        if (callingState !== CallingState.IDLE && callingState !== CallingState.LEFT) {\n            call.leave({\n                reason: 'call.ended event received',\n                reject: false\n            }).catch((err)=>{\n                call.logger('error', 'Failed to leave call after call.ended ', err);\n            });\n        }\n    };\n};\n/**\n * Watches for `callEnded` events.\n */ const watchSfuCallEnded = (call)=>{\n    return call.on('callEnded', async (e)=>{\n        if (call.state.callingState === CallingState.LEFT) return;\n        try {\n            // `call.ended` event arrived after the call is already left\n            // and all event handlers are detached. We need to manually\n            // update the call state to reflect the call has ended.\n            call.state.setEndedAt(new Date());\n            const reason = CallEndedReason[e.reason];\n            await call.leave({\n                reason: `callEnded received: ${reason}`\n            });\n        } catch (err) {\n            call.logger('error', 'Failed to leave call after being ended by the SFU', err);\n        }\n    });\n};\n/**\n * Event handler that watches for `callGrantsUpdated` events.\n *\n * @param state the call state to update.\n */ const watchCallGrantsUpdated = (state)=>{\n    return function onCallGrantsUpdated(event) {\n        const { currentGrants } = event;\n        if (currentGrants) {\n            const { canPublishAudio, canPublishVideo, canScreenshare } = currentGrants;\n            const update = {\n                [OwnCapability.SEND_AUDIO]: canPublishAudio,\n                [OwnCapability.SEND_VIDEO]: canPublishVideo,\n                [OwnCapability.SCREENSHARE]: canScreenshare\n            };\n            const nextCapabilities = state.ownCapabilities.filter((capability)=>update[capability] !== false);\n            Object.entries(update).forEach(([capability, value])=>{\n                if (value && !nextCapabilities.includes(capability)) {\n                    nextCapabilities.push(capability);\n                }\n            });\n            state.setOwnCapabilities(nextCapabilities);\n        }\n    };\n};\nconst watchConnectionQualityChanged = (dispatcher, state)=>{\n    return dispatcher.on('connectionQualityChanged', (e)=>{\n        const { connectionQualityUpdates } = e;\n        if (!connectionQualityUpdates) return;\n        state.updateParticipants(connectionQualityUpdates.reduce((patches, update)=>{\n            const { sessionId, connectionQuality } = update;\n            patches[sessionId] = {\n                connectionQuality\n            };\n            return patches;\n        }, {}));\n    });\n};\n/**\n * Updates the approximate number of participants in the call by peeking at the\n * health check events that our SFU sends.\n */ const watchParticipantCountChanged = (dispatcher, state)=>{\n    return dispatcher.on('healthCheckResponse', (e)=>{\n        const { participantCount } = e;\n        if (participantCount) {\n            state.setParticipantCount(participantCount.total);\n            state.setAnonymousParticipantCount(participantCount.anonymous);\n        }\n    });\n};\nconst watchLiveEnded = (dispatcher, call)=>{\n    return dispatcher.on('error', (e)=>{\n        if (e.error && e.error.code !== ErrorCode.LIVE_ENDED) return;\n        if (!call.permissionsContext.hasPermission(OwnCapability.JOIN_BACKSTAGE)) {\n            call.leave({\n                reason: 'live ended'\n            }).catch((err)=>{\n                call.logger('error', 'Failed to leave call after live ended', err);\n            });\n        }\n    });\n};\n/**\n * Watches and logs the errors reported by the currently connected SFU.\n */ const watchSfuErrorReports = (dispatcher)=>{\n    return dispatcher.on('error', (e)=>{\n        if (!e.error) return;\n        const logger = getLogger([\n            'SfuClient'\n        ]);\n        const { error, reconnectStrategy } = e;\n        logger('error', 'SFU reported error', {\n            code: ErrorCode[error.code],\n            reconnectStrategy: WebsocketReconnectStrategy[reconnectStrategy],\n            message: error.message,\n            shouldRetry: error.shouldRetry\n        });\n    });\n};\n/**\n * Watches for `pinsUpdated` events and updates the pinned state of participants\n * in the call.\n */ const watchPinsUpdated = (state)=>{\n    return function onPinsUpdated(e) {\n        const { pins } = e;\n        state.setServerSidePins(pins);\n    };\n};\n/**\n * An event handler that handles soft mutes.\n *\n * @param call the call.\n */ const handleRemoteSoftMute = (call)=>{\n    return call.on('trackUnpublished', async (event)=>{\n        const { cause, type, sessionId } = event;\n        const { localParticipant } = call.state;\n        if (cause === TrackUnpublishReason.MODERATION && sessionId === localParticipant?.sessionId) {\n            const logger = call.logger;\n            logger('info', `Local participant's ${TrackType[type]} track is muted remotely`);\n            try {\n                if (type === TrackType.VIDEO) {\n                    await call.camera.disable();\n                } else if (type === TrackType.AUDIO) {\n                    await call.microphone.disable();\n                } else if (type === TrackType.SCREEN_SHARE || type === TrackType.SCREEN_SHARE_AUDIO) {\n                    await call.screenShare.disable();\n                } else {\n                    logger('warn', 'Unsupported track type to soft mute', TrackType[type]);\n                }\n            } catch (error) {\n                logger('error', 'Failed to stop publishing', error);\n            }\n        }\n    });\n};\n/**\n * Adds unique values to an array.\n *\n * @param arr the array to add to.\n * @param values the values to add.\n */ const pushToIfMissing = (arr, ...values)=>{\n    for (const v of values){\n        if (!arr.includes(v)) {\n            arr.push(v);\n        }\n    }\n    return arr;\n};\n/**\n * An event responder which handles the `participantJoined` event.\n */ const watchParticipantJoined = (state)=>{\n    return function onParticipantJoined(e) {\n        const { participant } = e;\n        if (!participant) return;\n        // `state.updateOrAddParticipant` acts as a safeguard against\n        // potential duplicate events from the SFU.\n        //\n        // Although the SFU should not send duplicate events, we have seen\n        // some race conditions in the past during the `join-flow`.\n        // The SFU would send participant info as part of the `join`\n        // response and then follow up with a `participantJoined` event for\n        // already announced participants.\n        const orphanedTracks = reconcileOrphanedTracks(state, participant);\n        state.updateOrAddParticipant(participant.sessionId, Object.assign(participant, orphanedTracks, {\n            viewportVisibilityState: {\n                videoTrack: VisibilityState.UNKNOWN,\n                screenShareTrack: VisibilityState.UNKNOWN\n            }\n        }));\n    };\n};\n/**\n * An event responder which handles the `participantLeft` event.\n */ const watchParticipantLeft = (state)=>{\n    return function onParticipantLeft(e) {\n        const { participant } = e;\n        if (!participant) return;\n        state.setParticipants((participants)=>participants.filter((p)=>p.sessionId !== participant.sessionId));\n    };\n};\n/**\n * An event responder which handles the `participantUpdated` event.\n */ const watchParticipantUpdated = (state)=>{\n    return function onParticipantUpdated(e) {\n        const { participant } = e;\n        if (!participant) return;\n        state.updateParticipant(participant.sessionId, participant);\n    };\n};\n/**\n * An event responder which handles the `trackPublished` event.\n * The SFU will send this event when a participant publishes a track.\n */ const watchTrackPublished = (state)=>{\n    return function onTrackPublished(e) {\n        const { type, sessionId } = e;\n        // An optimization for large calls.\n        // After a certain threshold, the SFU would stop emitting `participantJoined`\n        // events, and instead, it would only provide the participant's information\n        // once they start publishing a track.\n        if (e.participant) {\n            const orphanedTracks = reconcileOrphanedTracks(state, e.participant);\n            const participant = Object.assign(e.participant, orphanedTracks);\n            state.updateOrAddParticipant(sessionId, participant);\n        } else {\n            state.updateParticipant(sessionId, (p)=>({\n                    publishedTracks: pushToIfMissing([\n                        ...p.publishedTracks\n                    ], type)\n                }));\n        }\n    };\n};\n/**\n * An event responder which handles the `trackUnpublished` event.\n * The SFU will send this event when a participant unpublishes a track.\n */ const watchTrackUnpublished = (state)=>{\n    return function onTrackUnpublished(e) {\n        const { type, sessionId } = e;\n        // An optimization for large calls. See `watchTrackPublished`.\n        if (e.participant) {\n            const orphanedTracks = reconcileOrphanedTracks(state, e.participant);\n            const participant = Object.assign(e.participant, orphanedTracks);\n            state.updateOrAddParticipant(sessionId, participant);\n        } else {\n            state.updateParticipant(sessionId, (p)=>({\n                    publishedTracks: p.publishedTracks.filter((t)=>t !== type)\n                }));\n        }\n    };\n};\n/**\n * Reconciles orphaned tracks (if any) for the given participant.\n *\n * @param state the call state.\n * @param participant the participant.\n */ const reconcileOrphanedTracks = (state, participant)=>{\n    const orphanTracks = state.takeOrphanedTracks(participant.trackLookupPrefix);\n    if (!orphanTracks.length) return;\n    const reconciledTracks = {};\n    for (const orphan of orphanTracks){\n        const key = trackTypeToParticipantStreamKey(orphan.trackType);\n        if (!key) continue;\n        reconciledTracks[key] = orphan.track;\n    }\n    return reconciledTracks;\n};\n/**\n * Watches for `dominantSpeakerChanged` events.\n */ const watchDominantSpeakerChanged = (dispatcher, state)=>{\n    return dispatcher.on('dominantSpeakerChanged', (e)=>{\n        const { sessionId } = e;\n        if (sessionId === state.dominantSpeaker?.sessionId) return;\n        state.setParticipants((participants)=>participants.map((participant)=>{\n                // mark the new dominant speaker\n                if (participant.sessionId === sessionId) {\n                    return {\n                        ...participant,\n                        isDominantSpeaker: true\n                    };\n                }\n                // unmark the old dominant speaker\n                if (participant.isDominantSpeaker) {\n                    return {\n                        ...participant,\n                        isDominantSpeaker: false\n                    };\n                }\n                return participant; // no change\n            }));\n    });\n};\n/**\n * Watches for `audioLevelChanged` events.\n */ const watchAudioLevelChanged = (dispatcher, state)=>{\n    return dispatcher.on('audioLevelChanged', (e)=>{\n        const { audioLevels } = e;\n        state.updateParticipants(audioLevels.reduce((patches, current)=>{\n            patches[current.sessionId] = {\n                audioLevel: current.level,\n                isSpeaking: current.isSpeaking\n            };\n            return patches;\n        }, {}));\n    });\n};\n/**\n * Registers the default event handlers for a call during its lifecycle.\n *\n * @param call the call to register event handlers for.\n * @param dispatcher the dispatcher.\n */ const registerEventHandlers = (call, dispatcher)=>{\n    const state = call.state;\n    const eventHandlers = [\n        call.on('call.ended', watchCallEnded(call)),\n        watchSfuCallEnded(call),\n        watchLiveEnded(dispatcher, call),\n        watchSfuErrorReports(dispatcher),\n        watchConnectionQualityChanged(dispatcher, state),\n        watchParticipantCountChanged(dispatcher, state),\n        call.on('participantJoined', watchParticipantJoined(state)),\n        call.on('participantLeft', watchParticipantLeft(state)),\n        call.on('participantUpdated', watchParticipantUpdated(state)),\n        call.on('trackPublished', watchTrackPublished(state)),\n        call.on('trackUnpublished', watchTrackUnpublished(state)),\n        watchAudioLevelChanged(dispatcher, state),\n        watchDominantSpeakerChanged(dispatcher, state),\n        call.on('callGrantsUpdated', watchCallGrantsUpdated(state)),\n        call.on('pinsUpdated', watchPinsUpdated(state)),\n        handleRemoteSoftMute(call)\n    ];\n    if (call.ringing) {\n        // these events are only relevant when the call is ringing\n        eventHandlers.push(registerRingingCallEventHandlers(call));\n    }\n    return ()=>{\n        eventHandlers.forEach((unsubscribe)=>unsubscribe());\n    };\n};\n/**\n * Registers event handlers for a call that is of ringing type.\n *\n * @param call the call to register event handlers for.\n */ const registerRingingCallEventHandlers = (call)=>{\n    const coordinatorRingEvents = {\n        'call.accepted': watchCallAccepted(call),\n        'call.rejected': watchCallRejected(call)\n    };\n    const eventHandlers = Object.keys(coordinatorRingEvents).map((event)=>{\n        const eventName = event;\n        return call.on(eventName, coordinatorRingEvents[eventName]);\n    });\n    return ()=>{\n        eventHandlers.forEach((unsubscribe)=>unsubscribe());\n    };\n};\n/**\n * Flatten the stats report into an array of stats objects.\n *\n * @param report the report to flatten.\n */ const flatten = (report)=>{\n    const stats = [];\n    report.forEach((s)=>{\n        stats.push(s);\n    });\n    return stats;\n};\nconst getSdkSignature = (clientDetails)=>{\n    const { sdk, ...platform } = clientDetails;\n    const sdkName = getSdkName(sdk);\n    const sdkVersion = getSdkVersion(sdk);\n    return {\n        sdkName,\n        sdkVersion,\n        ...platform\n    };\n};\nconst getSdkName = (sdk)=>{\n    return sdk && sdk.type === SdkType.REACT ? 'stream-react' : sdk && sdk.type === SdkType.REACT_NATIVE ? 'stream-react-native' : 'stream-js';\n};\nconst getSdkVersion = (sdk)=>{\n    return sdk ? `${sdk.major}.${sdk.minor}.${sdk.patch}` : '0.0.0-development';\n};\n/**\n * Checks whether the current browser is Safari.\n */ const isSafari = ()=>{\n    if (typeof navigator === 'undefined') return false;\n    return /^((?!chrome|android).)*safari/i.test(navigator.userAgent || '');\n};\n/**\n * Checks whether the current browser is Firefox.\n */ const isFirefox = ()=>{\n    if (typeof navigator === 'undefined') return false;\n    return navigator.userAgent?.includes('Firefox');\n};\n/**\n * Checks whether the current browser is Google Chrome.\n */ const isChrome = ()=>{\n    if (typeof navigator === 'undefined') return false;\n    return navigator.userAgent?.includes('Chrome');\n};\nvar browsers = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    isChrome: isChrome,\n    isFirefox: isFirefox,\n    isSafari: isSafari\n});\n/**\n * Creates a new StatsReporter instance that collects metrics about the ongoing call and reports them to the state store\n */ const createStatsReporter = ({ subscriber, publisher, state, datacenter, pollingIntervalInMs = 2000 })=>{\n    const logger = getLogger([\n        'stats'\n    ]);\n    const getRawStatsForTrack = async (kind, selector)=>{\n        if (kind === 'subscriber' && subscriber) {\n            return subscriber.getStats(selector);\n        } else if (kind === 'publisher' && publisher) {\n            return publisher.getStats(selector);\n        } else {\n            return undefined;\n        }\n    };\n    const getStatsForStream = async (kind, tracks)=>{\n        const pc = kind === 'subscriber' ? subscriber : publisher;\n        if (!pc) return [];\n        const statsForStream = [];\n        for (const track of tracks){\n            const report = await pc.getStats(track);\n            const stats = transform(report, {\n                // @ts-ignore\n                trackKind: track.kind,\n                kind\n            });\n            statsForStream.push(stats);\n        }\n        return statsForStream;\n    };\n    const startReportingStatsFor = (sessionId)=>{\n        sessionIdsToTrack.add(sessionId);\n        void run();\n    };\n    const stopReportingStatsFor = (sessionId)=>{\n        sessionIdsToTrack.delete(sessionId);\n        void run();\n    };\n    const sessionIdsToTrack = new Set();\n    /**\n     * The main stats reporting loop.\n     */ const run = async ()=>{\n        const participantStats = {};\n        if (sessionIdsToTrack.size > 0) {\n            const sessionIds = new Set(sessionIdsToTrack);\n            for (const participant of state.participants){\n                if (!sessionIds.has(participant.sessionId)) continue;\n                const { audioStream, isLocalParticipant, sessionId, userId, videoStream } = participant;\n                const kind = isLocalParticipant ? 'publisher' : 'subscriber';\n                try {\n                    const tracks = isLocalParticipant ? publisher?.getPublishedTracks() || [] : [\n                        ...videoStream?.getVideoTracks() || [],\n                        ...audioStream?.getAudioTracks() || []\n                    ];\n                    participantStats[sessionId] = await getStatsForStream(kind, tracks);\n                } catch (e) {\n                    logger('warn', `Failed to collect ${kind} stats for ${userId}`, e);\n                }\n            }\n        }\n        const [subscriberStats, publisherStats] = await Promise.all([\n            subscriber.getStats().then((report)=>transform(report, {\n                    kind: 'subscriber',\n                    trackKind: 'video',\n                    publisher\n                })).then(aggregate),\n            publisher ? publisher.getStats().then((report)=>transform(report, {\n                    kind: 'publisher',\n                    trackKind: 'video',\n                    publisher\n                })).then(aggregate) : getEmptyStats()\n        ]);\n        const [subscriberRawStats, publisherRawStats] = await Promise.all([\n            getRawStatsForTrack('subscriber'),\n            publisher ? getRawStatsForTrack('publisher') : undefined\n        ]);\n        state.setCallStatsReport({\n            datacenter,\n            publisherStats,\n            subscriberStats,\n            subscriberRawStats,\n            publisherRawStats,\n            participants: participantStats,\n            timestamp: Date.now()\n        });\n    };\n    let timeoutId;\n    if (pollingIntervalInMs > 0) {\n        const loop = async ()=>{\n            await run().catch((e)=>{\n                logger('debug', 'Failed to collect stats', e);\n            });\n            timeoutId = setTimeout(loop, pollingIntervalInMs);\n        };\n        void loop();\n    }\n    const stop = ()=>{\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n    };\n    return {\n        getRawStatsForTrack,\n        getStatsForStream,\n        startReportingStatsFor,\n        stopReportingStatsFor,\n        stop\n    };\n};\n/**\n * Transforms raw RTC stats into a slimmer and uniform across browsers format.\n *\n * @param report the report to transform.\n * @param opts the transform options.\n */ const transform = (report, opts)=>{\n    const { trackKind, kind, publisher } = opts;\n    const direction = kind === 'subscriber' ? 'inbound-rtp' : 'outbound-rtp';\n    const stats = flatten(report);\n    const streams = stats.filter((stat)=>stat.type === direction && stat.kind === trackKind).map((stat)=>{\n        const rtcStreamStats = stat;\n        const codec = stats.find((s)=>s.type === 'codec' && s.id === rtcStreamStats.codecId);\n        const transport = stats.find((s)=>s.type === 'transport' && s.id === rtcStreamStats.transportId);\n        let roundTripTime;\n        if (transport && transport.dtlsState === 'connected') {\n            const candidatePair = stats.find((s)=>s.type === 'candidate-pair' && s.id === transport.selectedCandidatePairId);\n            roundTripTime = candidatePair?.currentRoundTripTime;\n        }\n        let trackType;\n        if (kind === 'publisher' && publisher) {\n            const firefox = isFirefox();\n            const mediaSource = stats.find((s)=>s.type === 'media-source' && // Firefox doesn't have mediaSourceId, so we need to guess the media source\n                (firefox ? true : s.id === rtcStreamStats.mediaSourceId));\n            if (mediaSource) {\n                trackType = publisher.getTrackType(mediaSource.trackIdentifier);\n            }\n        }\n        return {\n            bytesSent: rtcStreamStats.bytesSent,\n            bytesReceived: rtcStreamStats.bytesReceived,\n            codec: codec?.mimeType,\n            currentRoundTripTime: roundTripTime,\n            frameHeight: rtcStreamStats.frameHeight,\n            frameWidth: rtcStreamStats.frameWidth,\n            framesPerSecond: rtcStreamStats.framesPerSecond,\n            jitter: rtcStreamStats.jitter,\n            kind: rtcStreamStats.kind,\n            mediaSourceId: rtcStreamStats.mediaSourceId,\n            // @ts-ignore: available in Chrome only, TS doesn't recognize this\n            qualityLimitationReason: rtcStreamStats.qualityLimitationReason,\n            rid: rtcStreamStats.rid,\n            ssrc: rtcStreamStats.ssrc,\n            trackType\n        };\n    });\n    return {\n        rawStats: report,\n        streams,\n        timestamp: Date.now()\n    };\n};\nconst getEmptyStats = (stats)=>{\n    return {\n        rawReport: stats ?? {\n            streams: [],\n            timestamp: Date.now()\n        },\n        totalBytesSent: 0,\n        totalBytesReceived: 0,\n        averageJitterInMs: 0,\n        averageRoundTripTimeInMs: 0,\n        qualityLimitationReasons: 'none',\n        highestFrameWidth: 0,\n        highestFrameHeight: 0,\n        highestFramesPerSecond: 0,\n        codec: '',\n        codecPerTrackType: {},\n        timestamp: Date.now()\n    };\n};\n/**\n * Aggregates generic stats.\n *\n * @param stats the stats to aggregate.\n */ const aggregate = (stats)=>{\n    const aggregatedStats = getEmptyStats(stats);\n    let maxArea = -1;\n    const area = (w, h)=>w * h;\n    const qualityLimitationReasons = new Set();\n    const streams = stats.streams;\n    const report = streams.reduce((acc, stream)=>{\n        acc.totalBytesSent += stream.bytesSent || 0;\n        acc.totalBytesReceived += stream.bytesReceived || 0;\n        acc.averageJitterInMs += stream.jitter || 0;\n        acc.averageRoundTripTimeInMs += stream.currentRoundTripTime || 0;\n        // naive calculation of the highest resolution\n        const streamArea = area(stream.frameWidth || 0, stream.frameHeight || 0);\n        if (streamArea > maxArea) {\n            acc.highestFrameWidth = stream.frameWidth || 0;\n            acc.highestFrameHeight = stream.frameHeight || 0;\n            acc.highestFramesPerSecond = stream.framesPerSecond || 0;\n            maxArea = streamArea;\n        }\n        qualityLimitationReasons.add(stream.qualityLimitationReason || '');\n        return acc;\n    }, aggregatedStats);\n    if (streams.length > 0) {\n        report.averageJitterInMs = Math.round(report.averageJitterInMs / streams.length * 1000);\n        report.averageRoundTripTimeInMs = Math.round(report.averageRoundTripTimeInMs / streams.length * 1000);\n        // we take the first codec we find, as it should be the same for all streams\n        report.codec = streams[0].codec || '';\n        report.codecPerTrackType = streams.reduce((acc, stream)=>{\n            if (stream.trackType) {\n                acc[stream.trackType] = stream.codec || '';\n            }\n            return acc;\n        }, {});\n    }\n    const qualityLimitationReason = [\n        qualityLimitationReasons.has('cpu') && 'cpu',\n        qualityLimitationReasons.has('bandwidth') && 'bandwidth',\n        qualityLimitationReasons.has('other') && 'other'\n    ].filter(Boolean).join(', ');\n    if (qualityLimitationReason) {\n        report.qualityLimitationReasons = qualityLimitationReason;\n    }\n    return report;\n};\nconst version = \"1.15.1\";\nconst [major, minor, patch] = version.split('.');\nlet sdkInfo = {\n    type: SdkType.PLAIN_JAVASCRIPT,\n    major,\n    minor,\n    patch\n};\nlet osInfo;\nlet deviceInfo;\nlet webRtcInfo;\nlet deviceState = {\n    oneofKind: undefined\n};\nconst setSdkInfo = (info)=>{\n    sdkInfo = info;\n};\nconst getSdkInfo = ()=>{\n    return sdkInfo;\n};\nconst setOSInfo = (info)=>{\n    osInfo = info;\n};\nconst getOSInfo = ()=>{\n    return osInfo;\n};\nconst setDeviceInfo = (info)=>{\n    deviceInfo = info;\n};\nconst getDeviceInfo = ()=>{\n    return deviceInfo;\n};\nconst getWebRTCInfo = ()=>{\n    return webRtcInfo;\n};\nconst setWebRTCInfo = (info)=>{\n    webRtcInfo = info;\n};\nconst setThermalState = (state)=>{\n    if (!osInfo) {\n        deviceState = {\n            oneofKind: undefined\n        };\n        return;\n    }\n    if (osInfo.name === 'android') {\n        const thermalState = AndroidThermalState[state] || AndroidThermalState.UNSPECIFIED;\n        deviceState = {\n            oneofKind: 'android',\n            android: {\n                thermalState,\n                isPowerSaverMode: deviceState?.oneofKind === 'android' && deviceState.android.isPowerSaverMode\n            }\n        };\n    }\n    if (osInfo.name.toLowerCase() === 'ios') {\n        const thermalState = AppleThermalState[state] || AppleThermalState.UNSPECIFIED;\n        deviceState = {\n            oneofKind: 'apple',\n            apple: {\n                thermalState,\n                isLowPowerModeEnabled: deviceState?.oneofKind === 'apple' && deviceState.apple.isLowPowerModeEnabled\n            }\n        };\n    }\n};\nconst setPowerState = (powerMode)=>{\n    if (!osInfo) {\n        deviceState = {\n            oneofKind: undefined\n        };\n        return;\n    }\n    if (osInfo.name === 'android') {\n        deviceState = {\n            oneofKind: 'android',\n            android: {\n                thermalState: deviceState?.oneofKind === 'android' ? deviceState.android.thermalState : AndroidThermalState.UNSPECIFIED,\n                isPowerSaverMode: powerMode\n            }\n        };\n    }\n    if (osInfo.name.toLowerCase() === 'ios') {\n        deviceState = {\n            oneofKind: 'apple',\n            apple: {\n                thermalState: deviceState?.oneofKind === 'apple' ? deviceState.apple.thermalState : AppleThermalState.UNSPECIFIED,\n                isLowPowerModeEnabled: powerMode\n            }\n        };\n    }\n};\nconst getDeviceState = ()=>{\n    return deviceState;\n};\nconst getClientDetails = ()=>{\n    if (isReactNative()) {\n        // Since RN doesn't support web, sharing browser info is not required\n        return {\n            sdk: getSdkInfo(),\n            os: getOSInfo(),\n            device: getDeviceInfo()\n        };\n    }\n    const userAgent = new ua_parser_js__WEBPACK_IMPORTED_MODULE_3__.UAParser(navigator.userAgent);\n    const { browser, os, device, cpu } = userAgent.getResult();\n    return {\n        sdk: getSdkInfo(),\n        browser: {\n            name: browser.name || navigator.userAgent,\n            version: browser.version || ''\n        },\n        os: {\n            name: os.name || '',\n            version: os.version || '',\n            architecture: cpu.architecture || ''\n        },\n        device: {\n            name: [\n                device.vendor,\n                device.model,\n                device.type\n            ].filter(Boolean).join(' '),\n            version: ''\n        }\n    };\n};\nclass SfuStatsReporter {\n    constructor(sfuClient, { options, clientDetails, subscriber, publisher, microphone, camera, state }){\n        this.logger = getLogger([\n            'SfuStatsReporter'\n        ]);\n        this.inputDevices = new Map();\n        this.observeDevice = (device, kind)=>{\n            const { hasBrowserPermission$ } = device.state;\n            this.unsubscribeDevicePermissionsSubscription?.();\n            this.unsubscribeDevicePermissionsSubscription = createSubscription((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_14__.combineLatest)([\n                hasBrowserPermission$,\n                this.state.ownCapabilities$\n            ]), ([hasPermission, ownCapabilities])=>{\n                // cleanup the previous listDevices() subscription in case\n                // permissions or capabilities have changed.\n                // we will subscribe again if everything is in order.\n                this.unsubscribeListDevicesSubscription?.();\n                const hasCapability = kind === 'mic' ? ownCapabilities.includes(OwnCapability.SEND_AUDIO) : ownCapabilities.includes(OwnCapability.SEND_VIDEO);\n                if (!hasPermission || !hasCapability) {\n                    this.inputDevices.set(kind, {\n                        currentDevice: '',\n                        availableDevices: [],\n                        isPermitted: false\n                    });\n                    return;\n                }\n                this.unsubscribeListDevicesSubscription = createSubscription((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_14__.combineLatest)([\n                    device.listDevices(),\n                    device.state.selectedDevice$\n                ]), ([devices, deviceId])=>{\n                    const selected = devices.find((d)=>d.deviceId === deviceId);\n                    this.inputDevices.set(kind, {\n                        currentDevice: selected?.label || deviceId || '',\n                        availableDevices: devices.map((d)=>d.label),\n                        isPermitted: true\n                    });\n                });\n            });\n        };\n        this.sendConnectionTime = (connectionTimeSeconds)=>{\n            this.sendTelemetryData({\n                data: {\n                    oneofKind: 'connectionTimeSeconds',\n                    connectionTimeSeconds\n                }\n            });\n        };\n        this.sendReconnectionTime = (strategy, timeSeconds)=>{\n            this.sendTelemetryData({\n                data: {\n                    oneofKind: 'reconnection',\n                    reconnection: {\n                        strategy,\n                        timeSeconds\n                    }\n                }\n            });\n        };\n        this.sendTelemetryData = (telemetryData)=>{\n            // intentionally not awaiting the promise here\n            // to avoid impeding with the ongoing actions.\n            this.run(telemetryData).catch((err)=>{\n                this.logger('warn', 'Failed to send telemetry data', err);\n            });\n        };\n        this.run = async (telemetryData)=>{\n            const [subscriberStats, publisherStats] = await Promise.all([\n                this.subscriber.getStats().then(flatten).then(JSON.stringify),\n                this.publisher?.getStats().then(flatten).then(JSON.stringify) ?? '[]'\n            ]);\n            await this.sfuClient.sendStats({\n                sdk: this.sdkName,\n                sdkVersion: this.sdkVersion,\n                webrtcVersion: this.webRTCVersion,\n                subscriberStats,\n                publisherStats,\n                audioDevices: this.inputDevices.get('mic'),\n                videoDevices: this.inputDevices.get('camera'),\n                deviceState: getDeviceState(),\n                telemetry: telemetryData\n            });\n        };\n        this.start = ()=>{\n            if (this.options.reporting_interval_ms <= 0) return;\n            this.observeDevice(this.microphone, 'mic');\n            this.observeDevice(this.camera, 'camera');\n            clearInterval(this.intervalId);\n            this.intervalId = setInterval(()=>{\n                this.run().catch((err)=>{\n                    this.logger('warn', 'Failed to report stats', err);\n                });\n            }, this.options.reporting_interval_ms);\n        };\n        this.stop = ()=>{\n            this.unsubscribeDevicePermissionsSubscription?.();\n            this.unsubscribeDevicePermissionsSubscription = undefined;\n            this.unsubscribeListDevicesSubscription?.();\n            this.unsubscribeListDevicesSubscription = undefined;\n            this.inputDevices.clear();\n            clearInterval(this.intervalId);\n            this.intervalId = undefined;\n        };\n        this.sfuClient = sfuClient;\n        this.options = options;\n        this.subscriber = subscriber;\n        this.publisher = publisher;\n        this.microphone = microphone;\n        this.camera = camera;\n        this.state = state;\n        const { sdk, browser } = clientDetails;\n        this.sdkName = getSdkName(sdk);\n        this.sdkVersion = getSdkVersion(sdk);\n        // use the WebRTC version if set by the SDK (React Native) otherwise,\n        // use the browser version as a fallback\n        const webRTCInfo = getWebRTCInfo();\n        this.webRTCVersion = webRTCInfo?.version || `${browser?.name || ''}-${browser?.version || ''}` || 'N/A';\n    }\n}\nconst DEFAULT_THRESHOLD = 0.35;\nclass ViewportTracker {\n    constructor(){\n        /**\n         * @private\n         */ this.elementHandlerMap = new Map();\n        /**\n         * @private\n         */ this.observer = null;\n        // in React children render before viewport is set, add\n        // them to the queue and observe them once the observer is ready\n        /**\n         * @private\n         */ this.queueSet = new Set();\n        /**\n         * Method to set scrollable viewport as root for the IntersectionObserver, returns\n         * cleanup function to be invoked upon disposing of the DOM element to prevent memory leaks\n         *\n         * @param viewportElement\n         * @param options\n         * @returns Unobserve\n         */ this.setViewport = (viewportElement, options)=>{\n            const cleanup = ()=>{\n                this.observer?.disconnect();\n                this.observer = null;\n                this.elementHandlerMap.clear();\n            };\n            this.observer = new IntersectionObserver((entries)=>{\n                entries.forEach((entry)=>{\n                    const handler = this.elementHandlerMap.get(entry.target);\n                    handler?.(entry);\n                });\n            }, {\n                root: viewportElement,\n                ...options,\n                threshold: options?.threshold ?? DEFAULT_THRESHOLD\n            });\n            if (this.queueSet.size) {\n                this.queueSet.forEach(([queueElement, queueHandler])=>{\n                    // check if element which requested observation is\n                    // a child of a viewport element, skip if isn't\n                    if (!viewportElement.contains(queueElement)) return;\n                    this.observer.observe(queueElement);\n                    this.elementHandlerMap.set(queueElement, queueHandler);\n                });\n                this.queueSet.clear();\n            }\n            return cleanup;\n        };\n        /**\n         * Method to set element to observe and handler to be triggered whenever IntersectionObserver\n         * detects a possible change in element's visibility within specified viewport, returns\n         * cleanup function to be invoked upon disposing of the DOM element to prevent memory leaks\n         *\n         * @param element\n         * @param handler\n         * @returns Unobserve\n         */ this.observe = (element, handler)=>{\n            const queueItem = [\n                element,\n                handler\n            ];\n            const cleanup = ()=>{\n                this.elementHandlerMap.delete(element);\n                this.observer?.unobserve(element);\n                this.queueSet.delete(queueItem);\n            };\n            if (this.elementHandlerMap.has(element)) return cleanup;\n            if (!this.observer) {\n                this.queueSet.add(queueItem);\n                return cleanup;\n            }\n            if (this.observer.root.contains(element)) {\n                this.elementHandlerMap.set(element, handler);\n                this.observer.observe(element);\n            }\n            return cleanup;\n        };\n    }\n}\nconst DEFAULT_VIEWPORT_VISIBILITY_STATE = {\n    videoTrack: VisibilityState.UNKNOWN,\n    screenShareTrack: VisibilityState.UNKNOWN\n};\nconst globalOverrideKey = Symbol('globalOverrideKey');\n/**\n * A manager class that handles dynascale related tasks like:\n *\n * - binding video elements to session ids\n * - binding audio elements to session ids\n * - tracking element visibility\n * - updating subscriptions based on viewport visibility\n * - updating subscriptions based on video element dimensions\n * - updating subscriptions based on published tracks\n */ class DynascaleManager {\n    /**\n     * Creates a new DynascaleManager instance.\n     *\n     * @param call the call to manage.\n     */ constructor(callState, speaker){\n        /**\n         * The viewport tracker instance.\n         */ this.viewportTracker = new ViewportTracker();\n        this.logger = getLogger([\n            'DynascaleManager'\n        ]);\n        this.pendingSubscriptionsUpdate = null;\n        this.videoTrackSubscriptionOverridesSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject({});\n        this.videoTrackSubscriptionOverrides$ = this.videoTrackSubscriptionOverridesSubject.asObservable();\n        this.incomingVideoSettings$ = this.videoTrackSubscriptionOverrides$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_16__.map)((overrides)=>{\n            const { [globalOverrideKey]: globalSettings, ...participants } = overrides;\n            return {\n                enabled: globalSettings?.enabled !== false,\n                preferredResolution: globalSettings?.enabled ? globalSettings.dimension : undefined,\n                participants: Object.fromEntries(Object.entries(participants).map(([sessionId, participantOverride])=>[\n                        sessionId,\n                        {\n                            enabled: participantOverride?.enabled !== false,\n                            preferredResolution: participantOverride?.enabled ? participantOverride.dimension : undefined\n                        }\n                    ])),\n                isParticipantVideoEnabled: (sessionId)=>overrides[sessionId]?.enabled ?? overrides[globalOverrideKey]?.enabled ?? true\n            };\n        }), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_17__.shareReplay)(1));\n        this.setVideoTrackSubscriptionOverrides = (override, sessionIds)=>{\n            if (!sessionIds) {\n                return setCurrentValue(this.videoTrackSubscriptionOverridesSubject, override ? {\n                    [globalOverrideKey]: override\n                } : {});\n            }\n            return setCurrentValue(this.videoTrackSubscriptionOverridesSubject, (overrides)=>({\n                    ...overrides,\n                    ...Object.fromEntries(sessionIds.map((id)=>[\n                            id,\n                            override\n                        ]))\n                }));\n        };\n        this.applyTrackSubscriptions = (debounceType = DebounceType.SLOW)=>{\n            if (this.pendingSubscriptionsUpdate) {\n                clearTimeout(this.pendingSubscriptionsUpdate);\n            }\n            const updateSubscriptions = ()=>{\n                this.pendingSubscriptionsUpdate = null;\n                this.sfuClient?.updateSubscriptions(this.trackSubscriptions).catch((err)=>{\n                    this.logger('debug', `Failed to update track subscriptions`, err);\n                });\n            };\n            if (debounceType) {\n                this.pendingSubscriptionsUpdate = setTimeout(updateSubscriptions, debounceType);\n            } else {\n                updateSubscriptions();\n            }\n        };\n        /**\n         * Will begin tracking the given element for visibility changes within the\n         * configured viewport element (`call.setViewport`).\n         *\n         * @param element the element to track.\n         * @param sessionId the session id.\n         * @param trackType the kind of video.\n         * @returns Untrack.\n         */ this.trackElementVisibility = (element, sessionId, trackType)=>{\n            const cleanup = this.viewportTracker.observe(element, (entry)=>{\n                this.callState.updateParticipant(sessionId, (participant)=>{\n                    const previousVisibilityState = participant.viewportVisibilityState ?? DEFAULT_VIEWPORT_VISIBILITY_STATE;\n                    // observer triggers when the element is \"moved\" to be a fullscreen element\n                    // keep it VISIBLE if that happens to prevent fullscreen with placeholder\n                    const isVisible = entry.isIntersecting || document.fullscreenElement === element ? VisibilityState.VISIBLE : VisibilityState.INVISIBLE;\n                    return {\n                        ...participant,\n                        viewportVisibilityState: {\n                            ...previousVisibilityState,\n                            [trackType]: isVisible\n                        }\n                    };\n                });\n            });\n            return ()=>{\n                cleanup();\n                // reset visibility state to UNKNOWN upon cleanup\n                // so that the layouts that are not actively observed\n                // can still function normally (runtime layout switching)\n                this.callState.updateParticipant(sessionId, (participant)=>{\n                    const previousVisibilityState = participant.viewportVisibilityState ?? DEFAULT_VIEWPORT_VISIBILITY_STATE;\n                    return {\n                        ...participant,\n                        viewportVisibilityState: {\n                            ...previousVisibilityState,\n                            [trackType]: VisibilityState.UNKNOWN\n                        }\n                    };\n                });\n            };\n        };\n        /**\n         * Sets the viewport element to track bound video elements for visibility.\n         *\n         * @param element the viewport element.\n         */ this.setViewport = (element)=>{\n            return this.viewportTracker.setViewport(element);\n        };\n        /**\n         * Binds a DOM <video> element to the given session id.\n         * This method will make sure that the video element will play\n         * the correct video stream for the given session id.\n         *\n         * Under the hood, it would also keep track of the video element dimensions\n         * and update the subscription accordingly in order to optimize the bandwidth.\n         *\n         * If a \"viewport\" is configured, the video element will be automatically\n         * tracked for visibility and the subscription will be updated accordingly.\n         *\n         * @param videoElement the video element to bind to.\n         * @param sessionId the session id.\n         * @param trackType the kind of video.\n         */ this.bindVideoElement = (videoElement, sessionId, trackType)=>{\n            const boundParticipant = this.callState.findParticipantBySessionId(sessionId);\n            if (!boundParticipant) return;\n            const requestTrackWithDimensions = (debounceType, dimension)=>{\n                if (dimension && (dimension.width === 0 || dimension.height === 0)) {\n                    // ignore 0x0 dimensions. this can happen when the video element\n                    // is not visible (e.g., has display: none).\n                    // we treat this as \"unsubscription\" as we don't want to keep\n                    // consuming bandwidth for a video that is not visible on the screen.\n                    this.logger('debug', `Ignoring 0x0 dimension`, boundParticipant);\n                    dimension = undefined;\n                }\n                this.callState.updateParticipantTracks(trackType, {\n                    [sessionId]: {\n                        dimension\n                    }\n                });\n                this.applyTrackSubscriptions(debounceType);\n            };\n            const participant$ = this.callState.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_16__.map)((participants)=>participants.find((participant)=>participant.sessionId === sessionId)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_19__.takeWhile)((participant)=>!!participant), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_18__.distinctUntilChanged)(), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_17__.shareReplay)({\n                bufferSize: 1,\n                refCount: true\n            }));\n            /**\n             * Since the video elements are now being removed from the DOM (React SDK) upon\n             * visibility change, this subscription is not in use an stays here only for the\n             * plain JS integrations where integrators might choose not to remove the video\n             * elements from the DOM.\n             */ // keep copy for resize observer handler\n            let viewportVisibilityState;\n            const viewportVisibilityStateSubscription = boundParticipant.isLocalParticipant ? null : participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_16__.map)((p)=>p.viewportVisibilityState?.[trackType]), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_18__.distinctUntilChanged)()).subscribe((nextViewportVisibilityState)=>{\n                // skip initial trigger\n                if (!viewportVisibilityState) {\n                    viewportVisibilityState = nextViewportVisibilityState ?? VisibilityState.UNKNOWN;\n                    return;\n                }\n                viewportVisibilityState = nextViewportVisibilityState ?? VisibilityState.UNKNOWN;\n                if (nextViewportVisibilityState === VisibilityState.INVISIBLE) {\n                    return requestTrackWithDimensions(DebounceType.MEDIUM, undefined);\n                }\n                requestTrackWithDimensions(DebounceType.MEDIUM, {\n                    width: videoElement.clientWidth,\n                    height: videoElement.clientHeight\n                });\n            });\n            let lastDimensions;\n            const resizeObserver = boundParticipant.isLocalParticipant ? null : new ResizeObserver(()=>{\n                const currentDimensions = {\n                    width: videoElement.clientWidth,\n                    height: videoElement.clientHeight\n                };\n                // skip initial trigger\n                if (!lastDimensions) {\n                    lastDimensions = currentDimensions;\n                    return;\n                }\n                if (lastDimensions.width === currentDimensions.width && lastDimensions.height === currentDimensions.height || viewportVisibilityState === VisibilityState.INVISIBLE) {\n                    return;\n                }\n                const relativeDelta = Math.max(currentDimensions.width / lastDimensions.width, currentDimensions.height / lastDimensions.height);\n                // Low quality video in an upscaled video element is very noticable.\n                // We try to upscale faster, and downscale slower. We also update debounce\n                // more if the size change is not significant, gurading against fast-firing\n                // resize events.\n                const debounceType = relativeDelta > 1.2 ? DebounceType.IMMEDIATE : DebounceType.MEDIUM;\n                requestTrackWithDimensions(debounceType, {\n                    width: videoElement.clientWidth,\n                    height: videoElement.clientHeight\n                });\n                lastDimensions = currentDimensions;\n            });\n            resizeObserver?.observe(videoElement);\n            // element renders and gets bound - track subscription gets\n            // triggered first other ones get skipped on initial subscriptions\n            const publishedTracksSubscription = boundParticipant.isLocalParticipant ? null : participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilKeyChanged)('publishedTracks'), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_16__.map)((p)=>trackType === 'videoTrack' ? hasVideo(p) : hasScreenShare(p)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_18__.distinctUntilChanged)()).subscribe((isPublishing)=>{\n                if (isPublishing) {\n                    // the participant just started to publish a track\n                    requestTrackWithDimensions(DebounceType.IMMEDIATE, {\n                        width: videoElement.clientWidth,\n                        height: videoElement.clientHeight\n                    });\n                } else {\n                    // the participant just stopped publishing a track\n                    requestTrackWithDimensions(DebounceType.FAST, undefined);\n                }\n            });\n            videoElement.autoplay = true;\n            videoElement.playsInline = true;\n            // explicitly marking the element as muted will allow autoplay to work\n            // without prior user interaction:\n            // https://developer.mozilla.org/en-US/docs/Web/Media/Autoplay_guide\n            videoElement.muted = true;\n            const streamSubscription = participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilKeyChanged)(trackType === 'videoTrack' ? 'videoStream' : 'screenShareStream')).subscribe((p)=>{\n                const source = trackType === 'videoTrack' ? p.videoStream : p.screenShareStream;\n                if (videoElement.srcObject === source) return;\n                videoElement.srcObject = source ?? null;\n                if (isSafari() || isFirefox()) {\n                    setTimeout(()=>{\n                        videoElement.srcObject = source ?? null;\n                        videoElement.play().catch((e)=>{\n                            this.logger('warn', `Failed to play stream`, e);\n                        });\n                    // we add extra delay until we attempt to force-play\n                    // the participant's media stream in Firefox and Safari,\n                    // as they seem to have some timing issues\n                    }, 25);\n                }\n            });\n            return ()=>{\n                requestTrackWithDimensions(DebounceType.FAST, undefined);\n                viewportVisibilityStateSubscription?.unsubscribe();\n                publishedTracksSubscription?.unsubscribe();\n                streamSubscription.unsubscribe();\n                resizeObserver?.disconnect();\n            };\n        };\n        /**\n         * Binds a DOM <audio> element to the given session id.\n         *\n         * This method will make sure that the audio element will\n         * play the correct audio stream for the given session id.\n         *\n         * @param audioElement the audio element to bind to.\n         * @param sessionId the session id.\n         * @param trackType the kind of audio.\n         * @returns a cleanup function that will unbind the audio element.\n         */ this.bindAudioElement = (audioElement, sessionId, trackType)=>{\n            const participant = this.callState.findParticipantBySessionId(sessionId);\n            if (!participant || participant.isLocalParticipant) return;\n            const participant$ = this.callState.participants$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_16__.map)((participants)=>participants.find((p)=>p.sessionId === sessionId)), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_19__.takeWhile)((p)=>!!p), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_18__.distinctUntilChanged)(), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_17__.shareReplay)({\n                bufferSize: 1,\n                refCount: true\n            }));\n            const updateMediaStreamSubscription = participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilKeyChanged)(trackType === 'screenShareAudioTrack' ? 'screenShareAudioStream' : 'audioStream')).subscribe((p)=>{\n                const source = trackType === 'screenShareAudioTrack' ? p.screenShareAudioStream : p.audioStream;\n                if (audioElement.srcObject === source) return;\n                setTimeout(()=>{\n                    audioElement.srcObject = source ?? null;\n                    if (audioElement.srcObject) {\n                        audioElement.play().catch((e)=>{\n                            this.logger('warn', `Failed to play stream`, e);\n                        });\n                        // audio output device shall be set after the audio element is played\n                        // otherwise, the browser will not pick it up, and will always\n                        // play audio through the system's default device\n                        const { selectedDevice } = this.speaker.state;\n                        if (selectedDevice && 'setSinkId' in audioElement) {\n                            audioElement.setSinkId(selectedDevice);\n                        }\n                    }\n                });\n            });\n            const sinkIdSubscription = !('setSinkId' in audioElement) ? null : this.speaker.state.selectedDevice$.subscribe((deviceId)=>{\n                if (deviceId) {\n                    audioElement.setSinkId(deviceId);\n                }\n            });\n            const volumeSubscription = (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_14__.combineLatest)([\n                this.speaker.state.volume$,\n                participant$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilKeyChanged)('audioVolume'))\n            ]).subscribe(([volume, p])=>{\n                audioElement.volume = p.audioVolume ?? volume;\n            });\n            audioElement.autoplay = true;\n            return ()=>{\n                sinkIdSubscription?.unsubscribe();\n                volumeSubscription.unsubscribe();\n                updateMediaStreamSubscription.unsubscribe();\n            };\n        };\n        this.callState = callState;\n        this.speaker = speaker;\n    }\n    setSfuClient(sfuClient) {\n        this.sfuClient = sfuClient;\n    }\n    get trackSubscriptions() {\n        const subscriptions = [];\n        for (const p of this.callState.remoteParticipants){\n            // NOTE: audio tracks don't have to be requested explicitly\n            // as the SFU will implicitly subscribe us to all of them,\n            // once they become available.\n            if (p.videoDimension && hasVideo(p)) {\n                const override = this.videoTrackSubscriptionOverrides[p.sessionId] ?? this.videoTrackSubscriptionOverrides[globalOverrideKey];\n                if (override?.enabled !== false) {\n                    subscriptions.push({\n                        userId: p.userId,\n                        sessionId: p.sessionId,\n                        trackType: TrackType.VIDEO,\n                        dimension: override?.dimension ?? p.videoDimension\n                    });\n                }\n            }\n            if (p.screenShareDimension && hasScreenShare(p)) {\n                subscriptions.push({\n                    userId: p.userId,\n                    sessionId: p.sessionId,\n                    trackType: TrackType.SCREEN_SHARE,\n                    dimension: p.screenShareDimension\n                });\n            }\n            if (hasScreenShareAudio(p)) {\n                subscriptions.push({\n                    userId: p.userId,\n                    sessionId: p.sessionId,\n                    trackType: TrackType.SCREEN_SHARE_AUDIO\n                });\n            }\n        }\n        return subscriptions;\n    }\n    get videoTrackSubscriptionOverrides() {\n        return getCurrentValue(this.videoTrackSubscriptionOverrides$);\n    }\n}\n/**\n * Stores the permissions for the current user and exposes\n * a few helper methods which make it easier to work with permissions.\n *\n * This is an internal class meant to be used in combination with\n * a {@link Call} instance.\n *\n * @internal\n */ class PermissionsContext {\n    constructor(){\n        this.permissions = [];\n        /**\n         * Sets the permissions for the current user.\n         *\n         * @param permissions the permissions to set.\n         */ this.setPermissions = (permissions)=>{\n            this.permissions = permissions || [];\n        };\n        /**\n         * Sets the settings for the bound call.\n         * @param settings\n         */ this.setCallSettings = (settings)=>{\n            this.settings = settings;\n        };\n        /**\n         * Checks if the current user has a specific permission.\n         *\n         * @param permission the permission to check for.\n         */ this.hasPermission = (permission)=>{\n            return this.permissions.includes(permission);\n        };\n        /**\n         * Helper method that checks whether the current user has the permission\n         * to publish the given track type.\n         */ this.canPublish = (trackType)=>{\n            switch(trackType){\n                case TrackType.AUDIO:\n                    return this.hasPermission(OwnCapability.SEND_AUDIO);\n                case TrackType.VIDEO:\n                    return this.hasPermission(OwnCapability.SEND_VIDEO);\n                case TrackType.SCREEN_SHARE:\n                case TrackType.SCREEN_SHARE_AUDIO:\n                    return this.hasPermission(OwnCapability.SCREENSHARE);\n                case TrackType.UNSPECIFIED:\n                    return false;\n                default:\n                    ensureExhausted(trackType, 'Unknown track type');\n            }\n        };\n        /**\n         * Checks if the current user can request a specific permission\n         * within the call.\n         *\n         * @param permission the permission to check for.\n         * @param settings the call settings to check against (optional).\n         */ this.canRequest = (permission, settings = this.settings)=>{\n            if (!settings) return false;\n            const { audio, video, screensharing } = settings;\n            switch(permission){\n                case OwnCapability.SEND_AUDIO:\n                    return audio.access_request_enabled;\n                case OwnCapability.SEND_VIDEO:\n                    return video.access_request_enabled;\n                case OwnCapability.SCREENSHARE:\n                    return screensharing.access_request_enabled;\n                default:\n                    return false;\n            }\n        };\n    }\n}\n/**\n * Represents a call type.\n */ class CallType {\n    /**\n     * Constructs a new CallType.\n     *\n     * @param name the name of the call type.\n     * @param options the options for the call type.\n     */ constructor(name, options = {\n        sortParticipantsBy: defaultSortPreset\n    }){\n        this.name = name;\n        this.options = options;\n    }\n}\n/**\n * A registry of {@link CallType}s.\n * You can register and unregister call types.\n */ class CallTypesRegistry {\n    /**\n     * Constructs a new CallTypesRegistry.\n     *\n     * @param callTypes the initial call types to register.\n     */ constructor(callTypes){\n        /**\n         * Registers a new call type.\n         *\n         * @param callType the call type to register.\n         */ this.register = (callType)=>{\n            this.callTypes[callType.name] = callType;\n        };\n        /**\n         * Unregisters a call type.\n         *\n         * @param name the name of the call type to unregister.\n         */ this.unregister = (name)=>{\n            delete this.callTypes[name];\n        };\n        /**\n         * Gets a call type by name.\n         *\n         * @param name the name of the call type to get.\n         */ this.get = (name)=>{\n            if (!this.callTypes[name]) {\n                this.register(new CallType(name));\n            }\n            return this.callTypes[name];\n        };\n        this.callTypes = callTypes.reduce((acc, callType)=>{\n            acc[callType.name] = callType;\n            return acc;\n        }, {});\n    }\n}\n/**\n * The default call types registry.\n * You can use this instance to dynamically register and unregister call types.\n */ const CallTypes = new CallTypesRegistry([\n    new CallType('default', {\n        sortParticipantsBy: defaultSortPreset\n    }),\n    new CallType('development', {\n        sortParticipantsBy: defaultSortPreset\n    }),\n    new CallType('livestream', {\n        sortParticipantsBy: livestreamOrAudioRoomSortPreset\n    }),\n    new CallType('audio_room', {\n        sortParticipantsBy: livestreamOrAudioRoomSortPreset\n    })\n]);\nclass BrowserPermission {\n    constructor(permission){\n        this.permission = permission;\n        this.disposeController = new AbortController();\n        this.wasPrompted = false;\n        this.listeners = new Set();\n        this.logger = getLogger([\n            'permissions'\n        ]);\n        const signal = this.disposeController.signal;\n        this.ready = (async ()=>{\n            const assumeGranted = (error)=>{\n                this.setState('prompt');\n            };\n            if (!canQueryPermissions()) {\n                return assumeGranted();\n            }\n            try {\n                const status = await navigator.permissions.query({\n                    name: permission.queryName\n                });\n                if (!signal.aborted) {\n                    this.setState(status.state);\n                    status.addEventListener('change', ()=>this.setState(status.state), {\n                        signal\n                    });\n                }\n            } catch (err) {\n                assumeGranted();\n            }\n        })();\n    }\n    dispose() {\n        this.state = undefined;\n        this.disposeController.abort();\n    }\n    async getState() {\n        await this.ready;\n        if (!this.state) {\n            throw new Error('BrowserPermission instance possibly disposed');\n        }\n        return this.state;\n    }\n    async prompt({ forcePrompt = false, throwOnNotAllowed = false } = {}) {\n        return await withoutConcurrency(`permission-prompt-${this.permission.queryName}`, async ()=>{\n            if (await this.getState() !== 'prompt' || this.wasPrompted && !forcePrompt) {\n                const isGranted = this.state === 'granted';\n                if (!isGranted && throwOnNotAllowed) {\n                    throw new Error('Permission was not granted previously, and prompting again is not allowed');\n                }\n                return isGranted;\n            }\n            try {\n                this.wasPrompted = true;\n                const stream = await navigator.mediaDevices.getUserMedia(this.permission.constraints);\n                disposeOfMediaStream(stream);\n                this.setState('granted');\n                return true;\n            } catch (e) {\n                if (e && typeof e === 'object' && 'name' in e && (e.name === 'NotAllowedError' || e.name === 'SecurityError')) {\n                    this.logger('info', 'Browser permission was not granted', {\n                        permission: this.permission\n                    });\n                    this.setState('denied');\n                    if (throwOnNotAllowed) {\n                        throw e;\n                    }\n                    return false;\n                }\n                this.logger('error', `Failed to getUserMedia`, {\n                    error: e,\n                    permission: this.permission\n                });\n                throw e;\n            }\n        });\n    }\n    listen(cb) {\n        this.listeners.add(cb);\n        if (this.state) cb(this.state);\n        return ()=>this.listeners.delete(cb);\n    }\n    asObservable() {\n        return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_21__.fromEventPattern)((handler)=>this.listen(handler), (handler, unlisten)=>unlisten()).pipe(// In some browsers, the 'change' event doesn't reliably emit and hence,\n        // permissionState stays in 'prompt' state forever.\n        // Typically, this happens when a user grants one-time permission.\n        // Instead of checking if a permission is granted, we check if it isn't denied\n        (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_16__.map)((state)=>state !== 'denied'));\n    }\n    setState(state) {\n        if (this.state !== state) {\n            this.state = state;\n            this.listeners.forEach((listener)=>listener(state));\n        }\n    }\n}\nfunction canQueryPermissions() {\n    return !isReactNative() && typeof navigator !== 'undefined' && !!navigator.permissions?.query;\n}\n/**\n * Returns an Observable that emits the list of available devices\n * that meet the given constraints.\n *\n * @param permission a BrowserPermission instance.\n * @param kind the kind of devices to enumerate.\n */ const getDevices = (permission, kind)=>{\n    return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_22__.from)((async ()=>{\n        let devices = await navigator.mediaDevices.enumerateDevices();\n        // for privacy reasons, most browsers don't give you device labels\n        // unless you have a corresponding camera or microphone permission\n        const shouldPromptForBrowserPermission = devices.some((device)=>device.kind === kind && device.label === '');\n        if (shouldPromptForBrowserPermission && await permission.prompt()) {\n            devices = await navigator.mediaDevices.enumerateDevices();\n        }\n        return devices.filter((device)=>device.kind === kind && device.label !== '' && device.deviceId !== 'default');\n    })());\n};\n/**\n * Tells if the browser supports audio output change on 'audio' elements,\n * see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId.\n */ const checkIfAudioOutputChangeSupported = ()=>{\n    if (typeof document === 'undefined') return false;\n    const element = document.createElement('audio');\n    return 'setSinkId' in element;\n};\n/**\n * The default constraints used to request audio devices.\n */ const audioDeviceConstraints = {\n    audio: {\n        autoGainControl: true,\n        noiseSuppression: true,\n        echoCancellation: true\n    }\n};\n/**\n * The default constraints used to request video devices.\n */ const videoDeviceConstraints = {\n    video: {\n        width: 1280,\n        height: 720\n    }\n};\n/**\n * Keeps track of the browser permission to use microphone. This permission also\n * affects an ability to enumerate audio devices.\n */ const getAudioBrowserPermission = lazy(()=>new BrowserPermission({\n        constraints: audioDeviceConstraints,\n        queryName: 'microphone'\n    }));\n/**\n * Keeps track of the browser permission to use camera. This permission also\n * affects an ability to enumerate video devices.\n */ const getVideoBrowserPermission = lazy(()=>new BrowserPermission({\n        constraints: videoDeviceConstraints,\n        queryName: 'camera'\n    }));\nconst getDeviceChangeObserver = lazy(()=>{\n    // 'addEventListener' is not available in React Native, returning\n    // an observable that will never fire\n    if (!navigator.mediaDevices.addEventListener) return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_22__.from)([]);\n    return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_23__.fromEvent)(navigator.mediaDevices, 'devicechange').pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_16__.map)(()=>undefined), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_24__.debounceTime)(500));\n});\n/**\n * Prompts the user for a permission to use audio devices (if not already granted\n * and was not prompted before) and lists the available 'audioinput' devices,\n * if devices are added/removed the list is updated, and if the permission is revoked,\n * the observable errors.\n */ const getAudioDevices = lazy(()=>{\n    return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_25__.merge)(getDeviceChangeObserver(), getAudioBrowserPermission().asObservable()).pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_26__.startWith)(undefined), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_27__.concatMap)(()=>getDevices(getAudioBrowserPermission(), 'audioinput')), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_17__.shareReplay)(1));\n});\n/**\n * Prompts the user for a permission to use video devices (if not already granted\n * and was not prompted before) and lists the available 'videoinput' devices,\n * if devices are added/removed the list is updated, and if the permission is revoked,\n * the observable errors.\n */ const getVideoDevices = lazy(()=>{\n    return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_25__.merge)(getDeviceChangeObserver(), getVideoBrowserPermission().asObservable()).pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_26__.startWith)(undefined), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_27__.concatMap)(()=>getDevices(getVideoBrowserPermission(), 'videoinput')), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_17__.shareReplay)(1));\n});\n/**\n * Prompts the user for a permission to use video devices (if not already granted\n * and was not prompted before) and lists the available 'audiooutput' devices,\n * if devices are added/removed the list is updated, and if the permission is revoked,\n * the observable errors.\n */ const getAudioOutputDevices = lazy(()=>{\n    return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_25__.merge)(getDeviceChangeObserver(), getAudioBrowserPermission().asObservable()).pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_26__.startWith)(undefined), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_27__.concatMap)(()=>getDevices(getAudioBrowserPermission(), 'audiooutput')), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_17__.shareReplay)(1));\n});\nconst getStream = async (constraints)=>{\n    const stream = await navigator.mediaDevices.getUserMedia(constraints);\n    if (isFirefox()) {\n        // When enumerating devices, Firefox will hide device labels unless there's been\n        // an active user media stream on the page. So we force device list updates after\n        // every successful getUserMedia call.\n        navigator.mediaDevices.dispatchEvent(new Event('devicechange'));\n    }\n    return stream;\n};\nfunction isOverconstrainedError(error) {\n    return error && typeof error === 'object' && ('name' in error && error.name === 'OverconstrainedError' || 'message' in error && typeof error.message === 'string' && error.message.startsWith('OverconstrainedError'));\n}\n/**\n * Returns an audio media stream that fulfills the given constraints.\n * If no constraints are provided, it uses the browser's default ones.\n *\n * @angular It's recommended to use the [`DeviceManagerService`](./DeviceManagerService.md) for a higher level API, use this low-level method only if the `DeviceManagerService` doesn't suit your requirements.\n * @param trackConstraints the constraints to use when requesting the stream.\n * @returns the new `MediaStream` fulfilling the given constraints.\n */ const getAudioStream = async (trackConstraints)=>{\n    const constraints = {\n        audio: {\n            ...audioDeviceConstraints.audio,\n            ...trackConstraints\n        }\n    };\n    try {\n        await getAudioBrowserPermission().prompt({\n            throwOnNotAllowed: true,\n            forcePrompt: true\n        });\n        return await getStream(constraints);\n    } catch (error) {\n        if (isOverconstrainedError(error) && trackConstraints?.deviceId) {\n            const { deviceId, ...relaxedConstraints } = trackConstraints;\n            getLogger([\n                'devices'\n            ])('warn', 'Failed to get audio stream, will try again with relaxed constraints', {\n                error,\n                constraints,\n                relaxedConstraints\n            });\n            return getAudioStream(relaxedConstraints);\n        }\n        getLogger([\n            'devices'\n        ])('error', 'Failed to get audio stream', {\n            error,\n            constraints\n        });\n        throw error;\n    }\n};\n/**\n * Returns a video media stream that fulfills the given constraints.\n * If no constraints are provided, it uses the browser's default ones.\n *\n * @angular It's recommended to use the [`DeviceManagerService`](./DeviceManagerService.md) for a higher level API, use this low-level method only if the `DeviceManagerService` doesn't suit your requirements.\n * @param trackConstraints the constraints to use when requesting the stream.\n * @returns a new `MediaStream` fulfilling the given constraints.\n */ const getVideoStream = async (trackConstraints)=>{\n    const constraints = {\n        video: {\n            ...videoDeviceConstraints.video,\n            ...trackConstraints\n        }\n    };\n    try {\n        await getVideoBrowserPermission().prompt({\n            throwOnNotAllowed: true,\n            forcePrompt: true\n        });\n        return await getStream(constraints);\n    } catch (error) {\n        if (isOverconstrainedError(error) && trackConstraints?.deviceId) {\n            const { deviceId, ...relaxedConstraints } = trackConstraints;\n            getLogger([\n                'devices'\n            ])('warn', 'Failed to get video stream, will try again with relaxed constraints', {\n                error,\n                constraints,\n                relaxedConstraints\n            });\n            return getVideoStream(relaxedConstraints);\n        }\n        getLogger([\n            'devices'\n        ])('error', 'Failed to get video stream', {\n            error,\n            constraints\n        });\n        throw error;\n    }\n};\n/**\n * Prompts the user for a permission to share a screen.\n * If the user grants the permission, a screen sharing stream is returned. Throws otherwise.\n *\n * The callers of this API are responsible to handle the possible errors.\n *\n * @angular It's recommended to use the [`DeviceManagerService`](./DeviceManagerService.md) for a higher level API, use this low-level method only if the `DeviceManagerService` doesn't suit your requirements.\n *\n * @param options any additional options to pass to the [`getDisplayMedia`](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia) API.\n */ const getScreenShareStream = async (options)=>{\n    try {\n        return await navigator.mediaDevices.getDisplayMedia({\n            video: true,\n            audio: {\n                channelCount: {\n                    ideal: 2\n                },\n                echoCancellation: false,\n                autoGainControl: false,\n                noiseSuppression: false\n            },\n            // @ts-expect-error - not present in types yet\n            systemAudio: 'include',\n            ...options\n        });\n    } catch (e) {\n        getLogger([\n            'devices'\n        ])('error', 'Failed to get screen share stream', e);\n        throw e;\n    }\n};\nconst deviceIds$ = typeof navigator !== 'undefined' && typeof navigator.mediaDevices !== 'undefined' ? getDeviceChangeObserver().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_26__.startWith)(undefined), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_27__.concatMap)(()=>navigator.mediaDevices.enumerateDevices()), (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_17__.shareReplay)(1)) : undefined;\n/**\n * Deactivates MediaStream (stops and removes tracks) to be later garbage collected\n *\n * @param stream MediaStream\n * @returns void\n */ const disposeOfMediaStream = (stream)=>{\n    if (!stream.active) return;\n    stream.getTracks().forEach((track)=>{\n        track.stop();\n    });\n    // @ts-expect-error release() is present in react-native-webrtc and must be called to dispose the stream\n    if (typeof stream.release === 'function') {\n        // @ts-expect-error\n        stream.release();\n    }\n};\n/**\n * Checks if the current platform is a mobile device.\n *\n * See:\n * https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent\n */ const isMobile = ()=>/Mobi/i.test(navigator.userAgent);\nclass InputMediaDeviceManager {\n    constructor(call, state, trackType){\n        this.call = call;\n        this.state = state;\n        this.trackType = trackType;\n        /**\n         * if true, stops the media stream when call is left\n         */ this.stopOnLeave = true;\n        this.subscriptions = [];\n        this.isTrackStoppedDueToTrackEnd = false;\n        this.filters = [];\n        this.statusChangeConcurrencyTag = Symbol('statusChangeConcurrencyTag');\n        this.filterRegistrationConcurrencyTag = Symbol('filterRegistrationConcurrencyTag');\n        /**\n         * Disposes the manager.\n         *\n         * @internal\n         */ this.dispose = ()=>{\n            this.subscriptions.forEach((s)=>s());\n        };\n        this.logger = getLogger([\n            `${TrackType[trackType].toLowerCase()} manager`\n        ]);\n        if (deviceIds$ && !isReactNative() && (this.trackType === TrackType.AUDIO || this.trackType === TrackType.VIDEO)) {\n            this.handleDisconnectedOrReplacedDevices();\n        }\n    }\n    /**\n     * Lists the available audio/video devices\n     *\n     * Note: It prompts the user for a permission to use devices (if not already granted)\n     *\n     * @returns an Observable that will be updated if a device is connected or disconnected\n     */ listDevices() {\n        return this.getDevices();\n    }\n    /**\n     * Returns `true` when this device is in enabled state.\n     */ get enabled() {\n        return this.state.status === 'enabled';\n    }\n    /**\n     * Starts stream.\n     */ async enable() {\n        this.state.prevStatus = this.state.optimisticStatus;\n        if (this.state.optimisticStatus === 'enabled') {\n            return;\n        }\n        this.state.setPendingStatus('enabled');\n        await withCancellation(this.statusChangeConcurrencyTag, async (signal)=>{\n            try {\n                await this.unmuteStream();\n                this.state.setStatus('enabled');\n            } finally{\n                if (!signal.aborted) {\n                    this.state.setPendingStatus(this.state.status);\n                }\n            }\n        });\n    }\n    /**\n     * Stops or pauses the stream based on state.disableMode\n     * @param {boolean} [forceStop=false] when true, stops the tracks regardless of the state.disableMode\n     */ async disable(forceStop = false) {\n        this.state.prevStatus = this.state.optimisticStatus;\n        if (!forceStop && this.state.optimisticStatus === 'disabled') {\n            return;\n        }\n        this.state.setPendingStatus('disabled');\n        await withCancellation(this.statusChangeConcurrencyTag, async (signal)=>{\n            try {\n                const stopTracks = forceStop || this.state.disableMode === 'stop-tracks';\n                await this.muteStream(stopTracks);\n                this.state.setStatus('disabled');\n            } finally{\n                if (!signal.aborted) {\n                    this.state.setPendingStatus(this.state.status);\n                }\n            }\n        });\n    }\n    /**\n     * Returns a promise that resolves when all pe\n     */ async statusChangeSettled() {\n        await settled(this.statusChangeConcurrencyTag);\n    }\n    /**\n     * If status was previously enabled, it will re-enable the device.\n     */ async resume() {\n        if (this.state.prevStatus === 'enabled' && this.state.status !== 'enabled') {\n            await this.enable();\n        }\n    }\n    /**\n     * If the current device status is disabled, it will enable the device,\n     * else it will disable it.\n     */ async toggle() {\n        if (this.state.optimisticStatus === 'enabled') {\n            return await this.disable();\n        } else {\n            return await this.enable();\n        }\n    }\n    /**\n     * Registers a filter that will be applied to the stream.\n     *\n     * The registered filter will get the existing stream, and it should return\n     * a new stream with the applied filter.\n     *\n     * @param filter the filter to register.\n     * @returns MediaStreamFilterRegistrationResult\n     */ registerFilter(filter) {\n        const entry = {\n            start: filter,\n            stop: undefined\n        };\n        const registered = withoutConcurrency(this.filterRegistrationConcurrencyTag, async ()=>{\n            this.filters.push(entry);\n            await this.applySettingsToStream();\n        });\n        return {\n            registered,\n            unregister: ()=>withoutConcurrency(this.filterRegistrationConcurrencyTag, async ()=>{\n                    entry.stop?.();\n                    this.filters = this.filters.filter((f)=>f !== entry);\n                    await this.applySettingsToStream();\n                })\n        };\n    }\n    /**\n     * Will set the default constraints for the device.\n     *\n     * @param constraints the constraints to set.\n     */ setDefaultConstraints(constraints) {\n        this.state.setDefaultConstraints(constraints);\n    }\n    /**\n     * Selects a device.\n     *\n     * Note: This method is not supported in React Native\n     * @param deviceId the device id to select.\n     */ async select(deviceId) {\n        if (isReactNative()) {\n            throw new Error('This method is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for reference.');\n        }\n        const prevDeviceId = this.state.selectedDevice;\n        if (deviceId === prevDeviceId) {\n            return;\n        }\n        try {\n            this.state.setDevice(deviceId);\n            await this.applySettingsToStream();\n        } catch (error) {\n            this.state.setDevice(prevDeviceId);\n            throw error;\n        }\n    }\n    async applySettingsToStream() {\n        await withCancellation(this.statusChangeConcurrencyTag, async ()=>{\n            if (this.enabled) {\n                await this.muteStream();\n                await this.unmuteStream();\n            }\n        });\n    }\n    publishStream(stream) {\n        return this.call.publish(stream, this.trackType);\n    }\n    stopPublishStream() {\n        return this.call.stopPublish(this.trackType);\n    }\n    getTracks() {\n        return this.state.mediaStream?.getTracks() ?? [];\n    }\n    async muteStream(stopTracks = true) {\n        const mediaStream = this.state.mediaStream;\n        if (!mediaStream) return;\n        this.logger('debug', `${stopTracks ? 'Stopping' : 'Disabling'} stream`);\n        if (this.call.state.callingState === CallingState.JOINED) {\n            await this.stopPublishStream();\n        }\n        this.muteLocalStream(stopTracks);\n        const allEnded = this.getTracks().every((t)=>t.readyState === 'ended');\n        if (allEnded) {\n            // @ts-expect-error release() is present in react-native-webrtc\n            if (typeof mediaStream.release === 'function') {\n                // @ts-expect-error called to dispose the stream in RN\n                mediaStream.release();\n            }\n            this.state.setMediaStream(undefined, undefined);\n            this.filters.forEach((entry)=>entry.stop?.());\n        }\n    }\n    disableTracks() {\n        this.getTracks().forEach((track)=>{\n            if (track.enabled) track.enabled = false;\n        });\n    }\n    enableTracks() {\n        this.getTracks().forEach((track)=>{\n            if (!track.enabled) track.enabled = true;\n        });\n    }\n    stopTracks() {\n        this.getTracks().forEach((track)=>{\n            if (track.readyState === 'live') track.stop();\n        });\n    }\n    muteLocalStream(stopTracks) {\n        if (!this.state.mediaStream) {\n            return;\n        }\n        if (stopTracks) {\n            this.stopTracks();\n        } else {\n            this.disableTracks();\n        }\n    }\n    async unmuteStream() {\n        this.logger('debug', 'Starting stream');\n        let stream;\n        let rootStream;\n        if (this.state.mediaStream && this.getTracks().every((t)=>t.readyState === 'live')) {\n            stream = this.state.mediaStream;\n            this.enableTracks();\n        } else {\n            const defaultConstraints = this.state.defaultConstraints;\n            const constraints = {\n                ...defaultConstraints,\n                deviceId: this.state.selectedDevice ? {\n                    exact: this.state.selectedDevice\n                } : undefined\n            };\n            /**\n             * Chains two media streams together.\n             *\n             * In our case, filters MediaStreams are derived from their parent MediaStream.\n             * However, once a child filter's track is stopped,\n             * the tracks of the parent MediaStream aren't automatically stopped.\n             * This leads to a situation where the camera indicator light is still on\n             * even though the user stopped publishing video.\n             *\n             * This function works around this issue by stopping the parent MediaStream's tracks\n             * as well once the child filter's tracks are stopped.\n             *\n             * It works by patching the stop() method of the child filter's tracks to also stop\n             * the parent MediaStream's tracks of the same type. Here we assume that\n             * the parent MediaStream has only one track of each type.\n             *\n             * @param parentStream the parent MediaStream. Omit for the root stream.\n             */ const chainWith = (parentStream)=>async (filterStream)=>{\n                    if (!parentStream) return filterStream;\n                    // TODO OL: take care of track.enabled property as well\n                    const parent = await parentStream;\n                    filterStream.getTracks().forEach((track)=>{\n                        const originalStop = track.stop;\n                        track.stop = function stop() {\n                            originalStop.call(track);\n                            parent.getTracks().forEach((parentTrack)=>{\n                                if (parentTrack.kind === track.kind) {\n                                    parentTrack.stop();\n                                }\n                            });\n                        };\n                    });\n                    parent.getTracks().forEach((parentTrack)=>{\n                        // When the parent stream abruptly ends, we propagate the event\n                        // to the filter stream.\n                        // This usually happens when the camera/microphone permissions\n                        // are revoked or when the device is disconnected.\n                        const handleParentTrackEnded = ()=>{\n                            filterStream.getTracks().forEach((track)=>{\n                                if (parentTrack.kind !== track.kind) return;\n                                track.stop();\n                                track.dispatchEvent(new Event('ended')); // propagate the event\n                            });\n                        };\n                        parentTrack.addEventListener('ended', handleParentTrackEnded);\n                        this.subscriptions.push(()=>{\n                            parentTrack.removeEventListener('ended', handleParentTrackEnded);\n                        });\n                    });\n                    return filterStream;\n                };\n            // the rootStream represents the stream coming from the actual device\n            // e.g. camera or microphone stream\n            rootStream = this.getStream(constraints);\n            // we publish the last MediaStream of the chain\n            stream = await this.filters.reduce((parent, entry)=>parent.then((inputStream)=>{\n                    const { stop, output } = entry.start(inputStream);\n                    entry.stop = stop;\n                    return output;\n                }).then(chainWith(parent), (error)=>{\n                    this.logger('warn', 'Filter failed to start and will be ignored', error);\n                    return parent;\n                }), rootStream);\n        }\n        if (this.call.state.callingState === CallingState.JOINED) {\n            await this.publishStream(stream);\n        }\n        if (this.state.mediaStream !== stream) {\n            this.state.setMediaStream(stream, await rootStream);\n            const handleTrackEnded = async ()=>{\n                await this.statusChangeSettled();\n                if (this.enabled) {\n                    this.isTrackStoppedDueToTrackEnd = true;\n                    setTimeout(()=>{\n                        this.isTrackStoppedDueToTrackEnd = false;\n                    }, 2000);\n                    await this.disable();\n                }\n            };\n            const createTrackMuteHandler = (muted)=>()=>{\n                    if (!isMobile() || this.trackType !== TrackType.VIDEO) return;\n                    this.call.notifyTrackMuteState(muted, this.trackType).catch((err)=>{\n                        this.logger('warn', 'Error while notifying track mute state', err);\n                    });\n                };\n            stream.getTracks().forEach((track)=>{\n                const muteHandler = createTrackMuteHandler(true);\n                const unmuteHandler = createTrackMuteHandler(false);\n                track.addEventListener('mute', muteHandler);\n                track.addEventListener('unmute', unmuteHandler);\n                track.addEventListener('ended', handleTrackEnded);\n                this.subscriptions.push(()=>{\n                    track.removeEventListener('mute', muteHandler);\n                    track.removeEventListener('unmute', unmuteHandler);\n                    track.removeEventListener('ended', handleTrackEnded);\n                });\n            });\n        }\n    }\n    get mediaDeviceKind() {\n        if (this.trackType === TrackType.AUDIO) {\n            return 'audioinput';\n        }\n        if (this.trackType === TrackType.VIDEO) {\n            return 'videoinput';\n        }\n        return '';\n    }\n    handleDisconnectedOrReplacedDevices() {\n        this.subscriptions.push(createSubscription((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_14__.combineLatest)([\n            deviceIds$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_28__.pairwise)()),\n            this.state.selectedDevice$\n        ]), async ([[prevDevices, currentDevices], deviceId])=>{\n            try {\n                if (!deviceId) return;\n                await this.statusChangeSettled();\n                let isDeviceDisconnected = false;\n                let isDeviceReplaced = false;\n                const currentDevice = this.findDevice(currentDevices, deviceId);\n                const prevDevice = this.findDevice(prevDevices, deviceId);\n                if (!currentDevice && prevDevice) {\n                    isDeviceDisconnected = true;\n                } else if (currentDevice && prevDevice && currentDevice.deviceId === prevDevice.deviceId && currentDevice.groupId !== prevDevice.groupId) {\n                    isDeviceReplaced = true;\n                }\n                if (isDeviceDisconnected) {\n                    await this.disable();\n                    await this.select(undefined);\n                }\n                if (isDeviceReplaced) {\n                    if (this.isTrackStoppedDueToTrackEnd && this.state.status === 'disabled') {\n                        await this.enable();\n                        this.isTrackStoppedDueToTrackEnd = false;\n                    } else {\n                        await this.applySettingsToStream();\n                    }\n                }\n            } catch (err) {\n                this.logger('warn', 'Unexpected error while handling disconnected or replaced device', err);\n            }\n        }));\n    }\n    findDevice(devices, deviceId) {\n        const kind = this.mediaDeviceKind;\n        return devices.find((d)=>d.deviceId === deviceId && d.kind === kind);\n    }\n}\nclass InputMediaDeviceManagerState {\n    /**\n     * Constructs new InputMediaDeviceManagerState instance.\n     *\n     * @param disableMode the disable mode to use.\n     * @param permission the BrowserPermission to use for querying.\n     * `undefined` means no permission is required.\n     */ constructor(disableMode = 'stop-tracks', permission){\n        this.disableMode = disableMode;\n        this.statusSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(undefined);\n        this.optimisticStatusSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(undefined);\n        this.mediaStreamSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(undefined);\n        this.selectedDeviceSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(undefined);\n        this.defaultConstraintsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(undefined);\n        /**\n         * An Observable that emits the current media stream, or `undefined` if the device is currently disabled.\n         *\n         */ this.mediaStream$ = this.mediaStreamSubject.asObservable();\n        /**\n         * An Observable that emits the currently selected device\n         */ this.selectedDevice$ = this.selectedDeviceSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_18__.distinctUntilChanged)());\n        /**\n         * An Observable that emits the device status\n         */ this.status$ = this.statusSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_18__.distinctUntilChanged)());\n        /**\n         * An Observable the reflects the requested device status. Useful for optimistic UIs\n         */ this.optimisticStatus$ = this.optimisticStatusSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_18__.distinctUntilChanged)());\n        /**\n         * The default constraints for the device.\n         */ this.defaultConstraints$ = this.defaultConstraintsSubject.asObservable();\n        /**\n         * Gets the current value of an observable, or undefined if the observable has\n         * not emitted a value yet.\n         *\n         * @param observable$ the observable to get the value from.\n         */ this.getCurrentValue = getCurrentValue;\n        /**\n         * Updates the value of the provided Subject.\n         * An `update` can either be a new value or a function which takes\n         * the current value and returns a new value.\n         *\n         * @internal\n         *\n         * @param subject the subject to update.\n         * @param update the update to apply to the subject.\n         * @return the updated value.\n         */ this.setCurrentValue = setCurrentValue;\n        this.hasBrowserPermission$ = permission ? permission.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_17__.shareReplay)(1)) : (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_29__.of)(true);\n    }\n    /**\n     * The device status\n     */ get status() {\n        return this.getCurrentValue(this.status$);\n    }\n    /**\n     * The requested device status. Useful for optimistic UIs\n     */ get optimisticStatus() {\n        return this.getCurrentValue(this.optimisticStatus$);\n    }\n    /**\n     * The currently selected device\n     */ get selectedDevice() {\n        return this.getCurrentValue(this.selectedDevice$);\n    }\n    /**\n     * The current media stream, or `undefined` if the device is currently disabled.\n     */ get mediaStream() {\n        return this.getCurrentValue(this.mediaStream$);\n    }\n    /**\n     * @internal\n     * @param status\n     */ setStatus(status) {\n        this.setCurrentValue(this.statusSubject, status);\n    }\n    /**\n     * @internal\n     * @param pendingStatus\n     */ setPendingStatus(pendingStatus) {\n        this.setCurrentValue(this.optimisticStatusSubject, pendingStatus);\n    }\n    /**\n     * Updates the `mediaStream` state variable.\n     *\n     * @internal\n     * @param stream the stream to set.\n     * @param rootStream the root stream, applicable when filters are used\n     * as this is the stream that holds the actual deviceId information.\n     */ setMediaStream(stream, rootStream) {\n        this.setCurrentValue(this.mediaStreamSubject, stream);\n        if (rootStream) {\n            this.setDevice(this.getDeviceIdFromStream(rootStream));\n        }\n    }\n    /**\n     * @internal\n     * @param deviceId the device id to set.\n     */ setDevice(deviceId) {\n        this.setCurrentValue(this.selectedDeviceSubject, deviceId);\n    }\n    /**\n     * Gets the default constraints for the device.\n     */ get defaultConstraints() {\n        return this.getCurrentValue(this.defaultConstraints$);\n    }\n    /**\n     * Sets the default constraints for the device.\n     *\n     * @internal\n     * @param constraints the constraints to set.\n     */ setDefaultConstraints(constraints) {\n        this.setCurrentValue(this.defaultConstraintsSubject, constraints);\n    }\n}\nclass CameraManagerState extends InputMediaDeviceManagerState {\n    constructor(){\n        super('stop-tracks', getVideoBrowserPermission());\n        this.directionSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(undefined);\n        this.direction$ = this.directionSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_18__.distinctUntilChanged)());\n    }\n    /**\n     * The preferred camera direction\n     * front - means the camera facing the user\n     * back - means the camera facing the environment\n     */ get direction() {\n        return this.getCurrentValue(this.direction$);\n    }\n    /**\n     * @internal\n     */ setDirection(direction) {\n        this.setCurrentValue(this.directionSubject, direction);\n    }\n    /**\n     * @internal\n     */ setMediaStream(stream, rootStream) {\n        super.setMediaStream(stream, rootStream);\n        if (stream) {\n            // RN getSettings() doesn't return facingMode, so we don't verify camera direction\n            const direction = isReactNative() ? this.direction : stream.getVideoTracks()[0]?.getSettings().facingMode === 'environment' ? 'back' : 'front';\n            this.setDirection(direction);\n        }\n    }\n    getDeviceIdFromStream(stream) {\n        const [track] = stream.getVideoTracks();\n        return track?.getSettings().deviceId;\n    }\n}\nclass CameraManager extends InputMediaDeviceManager {\n    /**\n     * Constructs a new CameraManager.\n     *\n     * @param call the call instance.\n     */ constructor(call){\n        super(call, new CameraManagerState(), TrackType.VIDEO);\n        this.targetResolution = {\n            width: 1280,\n            height: 720\n        };\n    }\n    isDirectionSupportedByDevice() {\n        return isReactNative() || isMobile();\n    }\n    /**\n     * Select the camera direction.\n     *\n     * @param direction the direction of the camera to select.\n     */ async selectDirection(direction) {\n        if (this.isDirectionSupportedByDevice()) {\n            this.state.setDirection(direction);\n            // Providing both device id and direction doesn't work, so we deselect the device\n            this.state.setDevice(undefined);\n            await this.applySettingsToStream();\n        } else {\n            this.logger('warn', 'Camera direction ignored for desktop devices');\n        }\n    }\n    /**\n     * Flips the camera direction: if it's front it will change to back, if it's back, it will change to front.\n     *\n     * Note: if there is no available camera with the desired direction, this method will do nothing.\n     * @returns\n     */ async flip() {\n        const newDirection = this.state.direction === 'front' ? 'back' : 'front';\n        await this.selectDirection(newDirection);\n    }\n    /**\n     * @internal\n     */ async selectTargetResolution(resolution) {\n        this.targetResolution.height = resolution.height;\n        this.targetResolution.width = resolution.width;\n        if (this.state.optimisticStatus === 'enabled') {\n            try {\n                await this.statusChangeSettled();\n            } catch (error) {\n                // couldn't enable device, target resolution will be applied the next time user attempts to start the device\n                this.logger('warn', 'could not apply target resolution', error);\n            }\n        }\n        if (this.enabled && this.state.mediaStream) {\n            const [videoTrack] = this.state.mediaStream.getVideoTracks();\n            if (!videoTrack) return;\n            const { width, height } = videoTrack.getSettings();\n            if (width !== this.targetResolution.width || height !== this.targetResolution.height) {\n                await this.applySettingsToStream();\n                this.logger('debug', `${width}x${height} target resolution applied to media stream`);\n            }\n        }\n    }\n    /**\n     * Applies the video settings to the camera.\n     *\n     * @param settings the video settings to apply.\n     * @param publish whether to publish the stream after applying the settings.\n     */ async apply(settings, publish) {\n        const hasPublishedVideo = !!this.call.state.localParticipant?.videoStream;\n        const hasPermission = this.call.permissionsContext.hasPermission(OwnCapability.SEND_AUDIO);\n        if (hasPublishedVideo || !hasPermission) return;\n        // Wait for any in progress camera operation\n        await this.statusChangeSettled();\n        const { target_resolution, camera_facing, camera_default_on } = settings;\n        await this.selectTargetResolution(target_resolution);\n        // Set camera direction if it's not yet set\n        if (!this.state.direction && !this.state.selectedDevice) {\n            this.state.setDirection(camera_facing === 'front' ? 'front' : 'back');\n        }\n        if (!publish) return;\n        const { mediaStream } = this.state;\n        if (this.enabled && mediaStream) {\n            // The camera is already enabled (e.g. lobby screen). Publish the stream\n            await this.publishStream(mediaStream);\n        } else if (this.state.status === undefined && camera_default_on) {\n            // Start camera if backend config specifies, and there is no local setting\n            await this.enable();\n        }\n    }\n    getDevices() {\n        return getVideoDevices();\n    }\n    getStream(constraints) {\n        constraints.width = this.targetResolution.width;\n        constraints.height = this.targetResolution.height;\n        // We can't set both device id and facing mode\n        // Device id has higher priority\n        if (!constraints.deviceId && this.state.direction && this.isDirectionSupportedByDevice()) {\n            constraints.facingMode = this.state.direction === 'front' ? 'user' : 'environment';\n        }\n        return getVideoStream(constraints);\n    }\n}\nclass MicrophoneManagerState extends InputMediaDeviceManagerState {\n    constructor(disableMode){\n        super(disableMode, getAudioBrowserPermission());\n        this.speakingWhileMutedSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(false);\n        this.speakingWhileMuted$ = this.speakingWhileMutedSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_18__.distinctUntilChanged)());\n    }\n    /**\n     * `true` if the user's microphone is muted but they'are speaking.\n     *\n     * This feature is not available in the React Native SDK.\n     */ get speakingWhileMuted() {\n        return this.getCurrentValue(this.speakingWhileMuted$);\n    }\n    /**\n     * @internal\n     */ setSpeakingWhileMuted(isSpeaking) {\n        this.setCurrentValue(this.speakingWhileMutedSubject, isSpeaking);\n    }\n    getDeviceIdFromStream(stream) {\n        const [track] = stream.getAudioTracks();\n        return track?.getSettings().deviceId;\n    }\n}\nconst DETECTION_FREQUENCY_IN_MS = 500;\nconst AUDIO_LEVEL_THRESHOLD$1 = 150;\nconst FFT_SIZE = 128;\n/**\n * Creates a new sound detector.\n *\n * @param audioStream the audio stream to observe. Depending on the provided configuration, this stream might be destroyed when the sound detector is stopped.\n * @param onSoundDetectedStateChanged a callback which is called when the sound state changes.\n * @param options custom options for the sound detector.\n * @returns a clean-up function which once invoked stops the sound detector.\n */ const createSoundDetector = (audioStream, onSoundDetectedStateChanged, options = {})=>{\n    const { detectionFrequencyInMs = DETECTION_FREQUENCY_IN_MS, audioLevelThreshold = AUDIO_LEVEL_THRESHOLD$1, fftSize = FFT_SIZE, destroyStreamOnStop = true } = options;\n    const audioContext = new AudioContext();\n    const analyser = audioContext.createAnalyser();\n    analyser.fftSize = fftSize;\n    const microphone = audioContext.createMediaStreamSource(audioStream);\n    microphone.connect(analyser);\n    const intervalId = setInterval(()=>{\n        const data = new Uint8Array(analyser.frequencyBinCount);\n        analyser.getByteFrequencyData(data);\n        const isSoundDetected = data.some((value)=>value >= audioLevelThreshold);\n        const averagedDataValue = data.reduce((pv, cv)=>pv + cv, 0) / data.length;\n        const percentage = averagedDataValue > audioLevelThreshold ? 100 : Math.round(averagedDataValue / audioLevelThreshold * 100);\n        // When the track is disabled, it takes time for the buffer to empty\n        // This check will ensure that we don't send anything if the track is disabled\n        if (audioStream.getAudioTracks()[0]?.enabled) {\n            onSoundDetectedStateChanged({\n                isSoundDetected,\n                audioLevel: percentage\n            });\n        } else {\n            onSoundDetectedStateChanged({\n                isSoundDetected: false,\n                audioLevel: 0\n            });\n        }\n    }, detectionFrequencyInMs);\n    return async function stop() {\n        clearInterval(intervalId);\n        // clean-up the AudioContext elements\n        microphone.disconnect();\n        analyser.disconnect();\n        if (audioContext.state !== 'closed') {\n            await audioContext.close();\n        }\n        // stop the stream\n        if (destroyStreamOnStop) {\n            audioStream.getTracks().forEach((track)=>{\n                track.stop();\n                audioStream.removeTrack(track);\n            });\n        }\n    };\n};\nconst AUDIO_LEVEL_THRESHOLD = 0.2;\nclass RNSpeechDetector {\n    constructor(){\n        this.pc1 = new RTCPeerConnection({});\n        this.pc2 = new RTCPeerConnection({});\n    }\n    /**\n     * Starts the speech detection.\n     */ async start() {\n        try {\n            this.cleanupAudioStream();\n            const audioStream = await navigator.mediaDevices.getUserMedia({\n                audio: true\n            });\n            this.audioStream = audioStream;\n            this.pc1.addEventListener('icecandidate', async (e)=>{\n                await this.pc2.addIceCandidate(e.candidate);\n            });\n            this.pc2.addEventListener('icecandidate', async (e)=>{\n                await this.pc1.addIceCandidate(e.candidate);\n            });\n            audioStream.getTracks().forEach((track)=>this.pc1.addTrack(track, audioStream));\n            const offer = await this.pc1.createOffer({});\n            await this.pc2.setRemoteDescription(offer);\n            await this.pc1.setLocalDescription(offer);\n            const answer = await this.pc2.createAnswer();\n            await this.pc1.setRemoteDescription(answer);\n            await this.pc2.setLocalDescription(answer);\n            const audioTracks = audioStream.getAudioTracks();\n            // We need to mute the audio track for this temporary stream, or else you will hear yourself twice while in the call.\n            audioTracks.forEach((track)=>track.enabled = false);\n        } catch (error) {\n            console.error('Error connecting and negotiating between PeerConnections:', error);\n        }\n    }\n    /**\n     * Stops the speech detection and releases all allocated resources.\n     */ stop() {\n        this.pc1.close();\n        this.pc2.close();\n        this.cleanupAudioStream();\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n        }\n    }\n    /**\n     * Public method that detects the audio levels and returns the status.\n     */ onSpeakingDetectedStateChange(onSoundDetectedStateChanged) {\n        this.intervalId = setInterval(async ()=>{\n            const stats = await this.pc1.getStats();\n            const report = flatten(stats);\n            // Audio levels are present inside stats of type `media-source` and of kind `audio`\n            const audioMediaSourceStats = report.find((stat)=>stat.type === 'media-source' && stat.kind === 'audio');\n            if (audioMediaSourceStats) {\n                const { audioLevel } = audioMediaSourceStats;\n                if (audioLevel) {\n                    if (audioLevel >= AUDIO_LEVEL_THRESHOLD) {\n                        onSoundDetectedStateChanged({\n                            isSoundDetected: true,\n                            audioLevel\n                        });\n                    } else {\n                        onSoundDetectedStateChanged({\n                            isSoundDetected: false,\n                            audioLevel: 0\n                        });\n                    }\n                }\n            }\n        }, 1000);\n        return ()=>{\n            clearInterval(this.intervalId);\n        };\n    }\n    cleanupAudioStream() {\n        if (!this.audioStream) {\n            return;\n        }\n        this.audioStream.getTracks().forEach((track)=>track.stop());\n        if (// @ts-expect-error release() is present in react-native-webrtc\n        typeof this.audioStream.release === 'function') {\n            // @ts-expect-error called to dispose the stream in RN\n            this.audioStream.release();\n        }\n    }\n}\nclass MicrophoneManager extends InputMediaDeviceManager {\n    constructor(call, disableMode = isReactNative() ? 'disable-tracks' : 'stop-tracks'){\n        super(call, new MicrophoneManagerState(disableMode), TrackType.AUDIO);\n        this.speakingWhileMutedNotificationEnabled = true;\n        this.soundDetectorConcurrencyTag = Symbol('soundDetectorConcurrencyTag');\n        this.subscriptions.push(createSubscription((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_14__.combineLatest)([\n            this.call.state.callingState$,\n            this.call.state.ownCapabilities$,\n            this.state.selectedDevice$,\n            this.state.status$\n        ]), async ([callingState, ownCapabilities, deviceId, status])=>{\n            try {\n                if (callingState === CallingState.LEFT) {\n                    await this.stopSpeakingWhileMutedDetection();\n                }\n                if (callingState !== CallingState.JOINED) return;\n                if (!this.speakingWhileMutedNotificationEnabled) return;\n                if (ownCapabilities.includes(OwnCapability.SEND_AUDIO)) {\n                    if (status === 'disabled') {\n                        await this.startSpeakingWhileMutedDetection(deviceId);\n                    } else {\n                        await this.stopSpeakingWhileMutedDetection();\n                    }\n                } else {\n                    await this.stopSpeakingWhileMutedDetection();\n                }\n            } catch (err) {\n                this.logger('warn', 'Could not enable speaking while muted', err);\n            }\n        }));\n        this.subscriptions.push(createSubscription(this.call.state.callingState$, (callingState)=>{\n            // do nothing when noise filtering isn't turned on\n            if (!this.noiseCancellationRegistration || !this.noiseCancellation) return;\n            const autoOn = this.call.state.settings?.audio.noise_cancellation?.mode === NoiseCancellationSettingsModeEnum.AUTO_ON;\n            if (autoOn && callingState === CallingState.JOINED) {\n                this.noiseCancellationRegistration.then(()=>this.noiseCancellation?.enable()).catch((err)=>{\n                    this.logger('warn', `Failed to enable noise cancellation`, err);\n                    return this.call.notifyNoiseCancellationStopped();\n                });\n            } else if (callingState === CallingState.LEFT) {\n                this.noiseCancellationRegistration.then(()=>this.noiseCancellation?.disable()).catch((err)=>{\n                    this.logger('warn', `Failed to disable noise cancellation`, err);\n                });\n            }\n        }));\n    }\n    /**\n     * Enables noise cancellation for the microphone.\n     *\n     * Note: not supported in React Native.\n     * @param noiseCancellation - a noise cancellation instance to use.\n     */ async enableNoiseCancellation(noiseCancellation) {\n        if (isReactNative()) {\n            throw new Error('Noise cancellation is not supported in React Native');\n        }\n        const { ownCapabilities, settings } = this.call.state;\n        const hasNoiseCancellationCapability = ownCapabilities.includes(OwnCapability.ENABLE_NOISE_CANCELLATION);\n        if (!hasNoiseCancellationCapability) {\n            throw new Error('Noise cancellation is not available.');\n        }\n        const noiseCancellationSettings = settings?.audio.noise_cancellation;\n        if (!noiseCancellationSettings || noiseCancellationSettings.mode === NoiseCancellationSettingsModeEnum.DISABLED) {\n            throw new Error('Noise cancellation is disabled for this call type.');\n        }\n        try {\n            this.noiseCancellation = noiseCancellation;\n            // listen for change events and notify the SFU\n            this.noiseCancellationChangeUnsubscribe = this.noiseCancellation.on('change', (enabled)=>{\n                if (enabled) {\n                    this.call.notifyNoiseCancellationStarting().catch((err)=>{\n                        this.logger('warn', `notifyNoiseCancellationStart failed`, err);\n                    });\n                } else {\n                    this.call.notifyNoiseCancellationStopped().catch((err)=>{\n                        this.logger('warn', `notifyNoiseCancellationStop failed`, err);\n                    });\n                }\n            });\n            const registrationResult = this.registerFilter(noiseCancellation.toFilter());\n            this.noiseCancellationRegistration = registrationResult.registered;\n            this.unregisterNoiseCancellation = registrationResult.unregister;\n            await this.noiseCancellationRegistration;\n            // handles an edge case where a noise cancellation is enabled after\n            // the participant as joined the call -> we immediately enable NC\n            if (noiseCancellationSettings.mode === NoiseCancellationSettingsModeEnum.AUTO_ON && this.call.state.callingState === CallingState.JOINED) {\n                noiseCancellation.enable();\n            }\n        } catch (e) {\n            this.logger('warn', 'Failed to enable noise cancellation', e);\n            await this.disableNoiseCancellation().catch((err)=>{\n                this.logger('warn', 'Failed to disable noise cancellation', err);\n            });\n        }\n    }\n    /**\n     * Disables noise cancellation for the microphone.\n     *\n     * Note: not supported in React Native.\n     */ async disableNoiseCancellation() {\n        if (isReactNative()) {\n            throw new Error('Noise cancellation is not supported in React Native');\n        }\n        await (this.unregisterNoiseCancellation?.() ?? Promise.resolve()).then(()=>this.noiseCancellation?.disable()).then(()=>this.noiseCancellationChangeUnsubscribe?.()).catch((err)=>{\n            this.logger('warn', 'Failed to unregister noise cancellation', err);\n        });\n        await this.call.notifyNoiseCancellationStopped();\n    }\n    /**\n     * Enables speaking while muted notification.\n     */ async enableSpeakingWhileMutedNotification() {\n        this.speakingWhileMutedNotificationEnabled = true;\n        if (this.state.status === 'disabled') {\n            await this.startSpeakingWhileMutedDetection(this.state.selectedDevice);\n        }\n    }\n    /**\n     * Disables speaking while muted notification.\n     */ async disableSpeakingWhileMutedNotification() {\n        this.speakingWhileMutedNotificationEnabled = false;\n        await this.stopSpeakingWhileMutedDetection();\n    }\n    /**\n     * Applies the audio settings to the microphone.\n     * @param settings the audio settings to apply.\n     * @param publish whether to publish the stream after applying the settings.\n     */ async apply(settings, publish) {\n        if (!publish) return;\n        const hasPublishedAudio = !!this.call.state.localParticipant?.audioStream;\n        const hasPermission = this.call.permissionsContext.hasPermission(OwnCapability.SEND_AUDIO);\n        if (hasPublishedAudio || !hasPermission) return;\n        // Wait for any in progress mic operation\n        await this.statusChangeSettled();\n        // Publish media stream that was set before we joined\n        const { mediaStream } = this.state;\n        if (this.enabled && mediaStream) {\n            // The mic is already enabled (e.g. lobby screen). Publish the stream\n            await this.publishStream(mediaStream);\n        } else if (this.state.status === undefined && settings.mic_default_on) {\n            // Start mic if backend config specifies, and there is no local setting\n            await this.enable();\n        }\n    }\n    getDevices() {\n        return getAudioDevices();\n    }\n    getStream(constraints) {\n        return getAudioStream(constraints);\n    }\n    async startSpeakingWhileMutedDetection(deviceId) {\n        await withoutConcurrency(this.soundDetectorConcurrencyTag, async ()=>{\n            await this.stopSpeakingWhileMutedDetection();\n            if (isReactNative()) {\n                this.rnSpeechDetector = new RNSpeechDetector();\n                await this.rnSpeechDetector.start();\n                const unsubscribe = this.rnSpeechDetector?.onSpeakingDetectedStateChange((event)=>{\n                    this.state.setSpeakingWhileMuted(event.isSoundDetected);\n                });\n                this.soundDetectorCleanup = ()=>{\n                    unsubscribe();\n                    this.rnSpeechDetector?.stop();\n                    this.rnSpeechDetector = undefined;\n                };\n            } else {\n                // Need to start a new stream that's not connected to publisher\n                const stream = await this.getStream({\n                    deviceId\n                });\n                this.soundDetectorCleanup = createSoundDetector(stream, (event)=>{\n                    this.state.setSpeakingWhileMuted(event.isSoundDetected);\n                });\n            }\n        });\n    }\n    async stopSpeakingWhileMutedDetection() {\n        await withoutConcurrency(this.soundDetectorConcurrencyTag, async ()=>{\n            if (!this.soundDetectorCleanup) return;\n            const soundDetectorCleanup = this.soundDetectorCleanup;\n            this.soundDetectorCleanup = undefined;\n            this.state.setSpeakingWhileMuted(false);\n            await soundDetectorCleanup();\n        });\n    }\n}\nclass ScreenShareState extends InputMediaDeviceManagerState {\n    constructor(){\n        super(...arguments);\n        this.audioEnabledSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(true);\n        this.settingsSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(undefined);\n        /**\n         * An Observable that emits the current screen share audio status.\n         */ this.audioEnabled$ = this.audioEnabledSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_18__.distinctUntilChanged)());\n        /**\n         * An Observable that emits the current screen share settings.\n         */ this.settings$ = this.settingsSubject.asObservable();\n        /**\n         * @internal\n         */ this.getDeviceIdFromStream = (stream)=>{\n            const [track] = stream.getTracks();\n            return track?.getSettings().deviceId;\n        };\n    }\n    /**\n     * The current screen share audio status.\n     */ get audioEnabled() {\n        return this.getCurrentValue(this.audioEnabled$);\n    }\n    /**\n     * Set the current screen share audio status.\n     */ setAudioEnabled(isEnabled) {\n        this.setCurrentValue(this.audioEnabledSubject, isEnabled);\n    }\n    /**\n     * The current screen share settings.\n     */ get settings() {\n        return this.getCurrentValue(this.settings$);\n    }\n    /**\n     * Set the current screen share settings.\n     *\n     * @param settings the screen share settings to set.\n     */ setSettings(settings) {\n        this.setCurrentValue(this.settingsSubject, settings);\n    }\n}\nclass ScreenShareManager extends InputMediaDeviceManager {\n    constructor(call){\n        super(call, new ScreenShareState(), TrackType.SCREEN_SHARE);\n        this.subscriptions.push(createSubscription(call.state.settings$, (settings)=>{\n            const maybeTargetResolution = settings?.screensharing.target_resolution;\n            if (maybeTargetResolution) {\n                this.setDefaultConstraints({\n                    video: {\n                        width: maybeTargetResolution.width,\n                        height: maybeTargetResolution.height\n                    }\n                });\n            }\n        }));\n    }\n    /**\n     * Will enable screen share audio options on supported platforms.\n     *\n     * Note: for ongoing screen share, audio won't be enabled until you\n     * re-publish the screen share stream.\n     */ enableScreenShareAudio() {\n        this.state.setAudioEnabled(true);\n    }\n    /**\n     * Will disable screen share audio options on supported platforms.\n     */ async disableScreenShareAudio() {\n        this.state.setAudioEnabled(false);\n        if (this.call.publisher?.isPublishing(TrackType.SCREEN_SHARE_AUDIO)) {\n            await this.call.stopPublish(TrackType.SCREEN_SHARE_AUDIO);\n        }\n    }\n    /**\n     * Returns the current screen share settings.\n     */ getSettings() {\n        return this.state.settings;\n    }\n    /**\n     * Sets the current screen share settings.\n     *\n     * @param settings the settings to set.\n     */ setSettings(settings) {\n        this.state.setSettings(settings);\n    }\n    getDevices() {\n        return (0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_29__.of)([]); // there are no devices to be listed for Screen Share\n    }\n    getStream(constraints) {\n        if (!this.state.audioEnabled) {\n            constraints.audio = false;\n        }\n        return getScreenShareStream(constraints);\n    }\n    async stopPublishStream() {\n        return this.call.stopPublish(TrackType.SCREEN_SHARE, TrackType.SCREEN_SHARE_AUDIO);\n    }\n    /**\n     * Overrides the default `select` method to throw an error.\n     *\n     * @param deviceId ignored.\n     */ async select(deviceId) {\n        throw new Error('This method is not supported in for Screen Share');\n    }\n}\nclass SpeakerState {\n    constructor(){\n        this.selectedDeviceSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject('');\n        this.volumeSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(1);\n        /**\n         * [Tells if the browser supports audio output change on 'audio' elements](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId).\n         */ this.isDeviceSelectionSupported = checkIfAudioOutputChangeSupported();\n        /**\n         * Gets the current value of an observable, or undefined if the observable has\n         * not emitted a value yet.\n         *\n         * @param observable$ the observable to get the value from.\n         */ this.getCurrentValue = getCurrentValue;\n        /**\n         * Updates the value of the provided Subject.\n         * An `update` can either be a new value or a function which takes\n         * the current value and returns a new value.\n         *\n         * @internal\n         *\n         * @param subject the subject to update.\n         * @param update the update to apply to the subject.\n         * @return the updated value.\n         */ this.setCurrentValue = setCurrentValue;\n        this.selectedDevice$ = this.selectedDeviceSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_18__.distinctUntilChanged)());\n        this.volume$ = this.volumeSubject.asObservable().pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_18__.distinctUntilChanged)());\n    }\n    /**\n     * The currently selected device\n     *\n     * Note: this feature is not supported in React Native\n     */ get selectedDevice() {\n        return this.getCurrentValue(this.selectedDevice$);\n    }\n    /**\n     * The currently selected volume\n     *\n     * Note: this feature is not supported in React Native\n     */ get volume() {\n        return this.getCurrentValue(this.volume$);\n    }\n    /**\n     * @internal\n     * @param deviceId\n     */ setDevice(deviceId) {\n        this.setCurrentValue(this.selectedDeviceSubject, deviceId);\n    }\n    /**\n     * @internal\n     * @param volume\n     */ setVolume(volume) {\n        this.setCurrentValue(this.volumeSubject, volume);\n    }\n}\nclass SpeakerManager {\n    constructor(call){\n        this.state = new SpeakerState();\n        this.subscriptions = [];\n        /**\n         * Disposes the manager.\n         *\n         * @internal\n         */ this.dispose = ()=>{\n            this.subscriptions.forEach((s)=>s.unsubscribe());\n        };\n        this.call = call;\n        if (deviceIds$ && !isReactNative()) {\n            this.subscriptions.push((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_14__.combineLatest)([\n                deviceIds$,\n                this.state.selectedDevice$\n            ]).subscribe(([devices, deviceId])=>{\n                if (!deviceId) {\n                    return;\n                }\n                const device = devices.find((d)=>d.deviceId === deviceId && d.kind === 'audiooutput');\n                if (!device) {\n                    this.select('');\n                }\n            }));\n        }\n    }\n    /**\n     * Lists the available audio output devices\n     *\n     * Note: It prompts the user for a permission to use devices (if not already granted)\n     * Note: This method is not supported in React Native\n     *\n     * @returns an Observable that will be updated if a device is connected or disconnected\n     */ listDevices() {\n        if (isReactNative()) {\n            throw new Error('This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details');\n        }\n        return getAudioOutputDevices();\n    }\n    /**\n     * Select a device.\n     *\n     * Note: This method is not supported in React Native\n     *\n     * @param deviceId empty string means the system default\n     */ select(deviceId) {\n        if (isReactNative()) {\n            throw new Error('This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details');\n        }\n        this.state.setDevice(deviceId);\n    }\n    /**\n     * Set the volume of the audio elements\n     * @param volume a number between 0 and 1.\n     *\n     * Note: This method is not supported in React Native\n     */ setVolume(volume) {\n        if (isReactNative()) {\n            throw new Error('This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details');\n        }\n        if (volume && (volume < 0 || volume > 1)) {\n            throw new Error('Volume must be between 0 and 1');\n        }\n        this.state.setVolume(volume);\n    }\n    /**\n     * Set the volume of a participant.\n     *\n     * Note: This method is not supported in React Native.\n     *\n     * @param sessionId the participant's session id.\n     * @param volume a number between 0 and 1. Set it to `undefined` to use the default volume.\n     */ setParticipantVolume(sessionId, volume) {\n        if (isReactNative()) {\n            throw new Error('This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details');\n        }\n        if (volume && (volume < 0 || volume > 1)) {\n            throw new Error('Volume must be between 0 and 1, or undefined');\n        }\n        this.call.state.updateParticipant(sessionId, {\n            audioVolume: volume\n        });\n    }\n}\n/**\n * An object representation of a `Call`.\n */ class Call {\n    /**\n     * Constructs a new `Call` instance.\n     *\n     * NOTE: Don't call the constructor directly, instead\n     * Use the [`StreamVideoClient.call`](./StreamVideoClient.md/#call)\n     * method to construct a `Call` instance.\n     */ constructor({ type, id, streamClient, members, ownCapabilities, sortParticipantsBy, clientStore, ringing = false, watching = false }){\n        /**\n         * The state of this call.\n         */ this.state = new CallState();\n        /**\n         * The permissions context of this call.\n         */ this.permissionsContext = new PermissionsContext();\n        /**\n         * The event dispatcher instance dedicated to this Call instance.\n         * @private\n         */ this.dispatcher = new Dispatcher();\n        this.sfuClientTag = 0;\n        this.reconnectConcurrencyTag = Symbol('reconnectConcurrencyTag');\n        this.reconnectAttempts = 0;\n        this.reconnectStrategy = WebsocketReconnectStrategy.UNSPECIFIED;\n        this.fastReconnectDeadlineSeconds = 0;\n        this.disconnectionTimeoutSeconds = 0;\n        this.lastOfflineTimestamp = 0;\n        // maintain the order of publishing tracks to restore them after a reconnection\n        // it shouldn't contain duplicates\n        this.trackPublishOrder = [];\n        this.hasJoinedOnce = false;\n        this.deviceSettingsAppliedOnce = false;\n        this.initialized = false;\n        this.joinLeaveConcurrencyTag = Symbol('joinLeaveConcurrencyTag');\n        /**\n         * A list hooks/functions to invoke when the call is left.\n         * A typical use case is to clean up some global event handlers.\n         * @private\n         */ this.leaveCallHooks = new Set();\n        this.streamClientEventHandlers = new Map();\n        this.setup = async ()=>{\n            await withoutConcurrency(this.joinLeaveConcurrencyTag, async ()=>{\n                if (this.initialized) return;\n                this.leaveCallHooks.add(this.on('all', (event)=>{\n                    // update state with the latest event data\n                    this.state.updateFromEvent(event);\n                }));\n                this.leaveCallHooks.add(this.on('changePublishOptions', (event)=>{\n                    this.currentPublishOptions = event.publishOptions;\n                }));\n                this.leaveCallHooks.add(registerEventHandlers(this, this.dispatcher));\n                this.registerEffects();\n                this.registerReconnectHandlers();\n                if (this.state.callingState === CallingState.LEFT) {\n                    this.state.setCallingState(CallingState.IDLE);\n                }\n                this.initialized = true;\n            });\n        };\n        this.registerEffects = ()=>{\n            this.leaveCallHooks.add(// handles updating the permissions context when the settings change.\n            createSubscription(this.state.settings$, (settings)=>{\n                if (!settings) return;\n                this.permissionsContext.setCallSettings(settings);\n            }));\n            this.leaveCallHooks.add(// handle the case when the user permissions are modified.\n            createSafeAsyncSubscription(this.state.ownCapabilities$, this.handleOwnCapabilitiesUpdated));\n            this.leaveCallHooks.add(// handles the case when the user is blocked by the call owner.\n            createSubscription(this.state.blockedUserIds$, async (blockedUserIds)=>{\n                if (!blockedUserIds || blockedUserIds.length === 0) return;\n                const currentUserId = this.currentUserId;\n                if (currentUserId && blockedUserIds.includes(currentUserId)) {\n                    this.logger('info', 'Leaving call because of being blocked');\n                    await this.leave({\n                        reason: 'user blocked'\n                    }).catch((err)=>{\n                        this.logger('error', 'Error leaving call after being blocked', err);\n                    });\n                }\n            }));\n            this.leaveCallHooks.add(// cancel auto-drop when call is\n            createSubscription(this.state.session$, (session)=>{\n                if (!this.ringing) return;\n                const receiverId = this.clientStore.connectedUser?.id;\n                if (!receiverId) return;\n                const isAcceptedByMe = Boolean(session?.accepted_by[receiverId]);\n                const isRejectedByMe = Boolean(session?.rejected_by[receiverId]);\n                if (isAcceptedByMe || isRejectedByMe) {\n                    this.cancelAutoDrop();\n                }\n            }));\n            this.leaveCallHooks.add(// \"ringing\" mode effects and event handlers\n            createSubscription(this.ringingSubject, (isRinging)=>{\n                if (!isRinging) return;\n                const callSession = this.state.session;\n                const receiver_id = this.clientStore.connectedUser?.id;\n                const ended_at = callSession?.ended_at;\n                const created_by_id = this.state.createdBy?.id;\n                const rejected_by = callSession?.rejected_by;\n                const accepted_by = callSession?.accepted_by;\n                let leaveCallIdle = false;\n                if (ended_at) {\n                    // call was ended before it was accepted or rejected so we should leave it to idle\n                    leaveCallIdle = true;\n                } else if (created_by_id && rejected_by) {\n                    if (rejected_by[created_by_id]) {\n                        // call was cancelled by the caller\n                        leaveCallIdle = true;\n                    }\n                } else if (receiver_id && rejected_by) {\n                    if (rejected_by[receiver_id]) {\n                        // call was rejected by the receiver in some other device\n                        leaveCallIdle = true;\n                    }\n                } else if (receiver_id && accepted_by) {\n                    if (accepted_by[receiver_id]) {\n                        // call was accepted by the receiver in some other device\n                        leaveCallIdle = true;\n                    }\n                }\n                if (leaveCallIdle) {\n                    if (this.state.callingState !== CallingState.IDLE) {\n                        this.state.setCallingState(CallingState.IDLE);\n                    }\n                } else {\n                    if (this.state.callingState === CallingState.IDLE) {\n                        this.state.setCallingState(CallingState.RINGING);\n                    }\n                    this.scheduleAutoDrop();\n                    this.leaveCallHooks.add(registerRingingCallEventHandlers(this));\n                }\n            }));\n        };\n        this.handleOwnCapabilitiesUpdated = async (ownCapabilities)=>{\n            // update the permission context.\n            this.permissionsContext.setPermissions(ownCapabilities);\n            if (!this.publisher) return;\n            // check if the user still has publishing permissions and stop publishing if not.\n            const permissionToTrackType = {\n                [OwnCapability.SEND_AUDIO]: TrackType.AUDIO,\n                [OwnCapability.SEND_VIDEO]: TrackType.VIDEO,\n                [OwnCapability.SCREENSHARE]: TrackType.SCREEN_SHARE\n            };\n            for (const [permission, trackType] of Object.entries(permissionToTrackType)){\n                const hasPermission = this.permissionsContext.hasPermission(permission);\n                if (hasPermission) continue;\n                try {\n                    switch(trackType){\n                        case TrackType.AUDIO:\n                            if (this.microphone.enabled) await this.microphone.disable();\n                            break;\n                        case TrackType.VIDEO:\n                            if (this.camera.enabled) await this.camera.disable();\n                            break;\n                        case TrackType.SCREEN_SHARE:\n                            if (this.screenShare.enabled) await this.screenShare.disable();\n                            break;\n                    }\n                } catch (err) {\n                    this.logger('error', `Can't disable mic/camera/screenshare after revoked permissions`, err);\n                }\n            }\n        };\n        /**\n         * You can subscribe to WebSocket events provided by the API. To remove a subscription, call the `off` method.\n         * Please note that subscribing to WebSocket events is an advanced use-case.\n         * For most use-cases, it should be enough to watch for state changes.\n         *\n         * @param eventName the event name.\n         * @param fn the event handler.\n         */ this.on = (eventName, fn)=>{\n            if (isSfuEvent(eventName)) {\n                return this.dispatcher.on(eventName, fn);\n            }\n            const offHandler = this.streamClient.on(eventName, (e)=>{\n                const event = e;\n                if (event.call_cid && event.call_cid === this.cid) {\n                    fn(event);\n                }\n            });\n            // keep the 'off' reference returned by the stream client\n            this.streamClientEventHandlers.set(fn, offHandler);\n            return ()=>{\n                this.off(eventName, fn);\n            };\n        };\n        /**\n         * Remove subscription for WebSocket events that were created by the `on` method.\n         *\n         * @param eventName the event name.\n         * @param fn the event handler.\n         */ this.off = (eventName, fn)=>{\n            if (isSfuEvent(eventName)) {\n                return this.dispatcher.off(eventName, fn);\n            }\n            // unsubscribe from the stream client event by using the 'off' reference\n            const registeredOffHandler = this.streamClientEventHandlers.get(fn);\n            if (registeredOffHandler) {\n                registeredOffHandler();\n            }\n        };\n        /**\n         * Leave the call and stop the media streams that were published by the call.\n         */ this.leave = async ({ reject, reason = 'user is leaving the call' } = {})=>{\n            await withoutConcurrency(this.joinLeaveConcurrencyTag, async ()=>{\n                const callingState = this.state.callingState;\n                if (callingState === CallingState.LEFT) {\n                    throw new Error('Cannot leave call that has already been left.');\n                }\n                if (callingState === CallingState.JOINING) {\n                    const waitUntilCallJoined = ()=>{\n                        return new Promise((resolve)=>{\n                            this.state.callingState$.pipe((0,_barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_19__.takeWhile)((state)=>state !== CallingState.JOINED, true)).subscribe(()=>resolve());\n                        });\n                    };\n                    await waitUntilCallJoined();\n                }\n                if (callingState === CallingState.RINGING && reject !== false) {\n                    if (reject) {\n                        await this.reject(reason);\n                    } else {\n                        // if reject was undefined, we still have to cancel the call automatically\n                        // when I am the creator and everyone else left the call\n                        const hasOtherParticipants = this.state.remoteParticipants.length > 0;\n                        if (this.isCreatedByMe && !hasOtherParticipants) {\n                            await this.reject('cancel');\n                        }\n                    }\n                }\n                this.statsReporter?.stop();\n                this.statsReporter = undefined;\n                this.sfuStatsReporter?.stop();\n                this.sfuStatsReporter = undefined;\n                this.subscriber?.dispose();\n                this.subscriber = undefined;\n                this.publisher?.dispose();\n                this.publisher = undefined;\n                await this.sfuClient?.leaveAndClose(reason);\n                this.sfuClient = undefined;\n                this.dynascaleManager.setSfuClient(undefined);\n                this.state.setCallingState(CallingState.LEFT);\n                this.state.dispose();\n                // Call all leave call hooks, e.g. to clean up global event handlers\n                this.leaveCallHooks.forEach((hook)=>hook());\n                this.initialized = false;\n                this.hasJoinedOnce = false;\n                this.clientStore.unregisterCall(this);\n                this.camera.dispose();\n                this.microphone.dispose();\n                this.screenShare.dispose();\n                this.speaker.dispose();\n                const stopOnLeavePromises = [];\n                if (this.camera.stopOnLeave) {\n                    stopOnLeavePromises.push(this.camera.disable(true));\n                }\n                if (this.microphone.stopOnLeave) {\n                    stopOnLeavePromises.push(this.microphone.disable(true));\n                }\n                if (this.screenShare.stopOnLeave) {\n                    stopOnLeavePromises.push(this.screenShare.disable(true));\n                }\n                await Promise.all(stopOnLeavePromises);\n            });\n        };\n        /**\n         * Update from the call response from the \"call.ring\" event\n         * @internal\n         */ this.updateFromRingingEvent = async (event)=>{\n            await this.setup();\n            // call.ring event excludes the call creator in the members list\n            // as the creator does not get the ring event\n            // so update the member list accordingly\n            const { created_by, settings } = event.call;\n            const creator = this.state.members.find((m)=>m.user.id === created_by.id);\n            if (!creator) {\n                this.state.setMembers(event.members);\n            } else {\n                this.state.setMembers([\n                    creator,\n                    ...event.members\n                ]);\n            }\n            // update the call state with the latest event data\n            this.state.updateFromCallResponse(event.call);\n            this.watching = true;\n            this.ringingSubject.next(true);\n            // we remove the instance from the calls list to enable the following filter in useCalls hook\n            // const calls = useCalls().filter((c) => c.ringing);\n            const calls = this.clientStore.calls.filter((c)=>c.cid !== this.cid);\n            this.clientStore.setCalls([\n                this,\n                ...calls\n            ]);\n            await this.applyDeviceConfig(settings, false);\n        };\n        /**\n         * Loads the information about the call.\n         *\n         * @param params.ring if set to true, a `call.ring` event will be sent to the call members.\n         * @param params.notify if set to true, a `call.notification` event will be sent to the call members.\n         * @param params.members_limit the total number of members to return as part of the response.\n         */ this.get = async (params)=>{\n            await this.setup();\n            const response = await this.streamClient.get(this.streamClientBasePath, params);\n            this.state.updateFromCallResponse(response.call);\n            this.state.setMembers(response.members);\n            this.state.setOwnCapabilities(response.own_capabilities);\n            if (params?.ring || this.ringing) {\n                // the call response can indicate where the call is still ringing or not\n                this.ringingSubject.next(true);\n            }\n            if (this.streamClient._hasConnectionID()) {\n                this.watching = true;\n                this.clientStore.registerCall(this);\n            }\n            await this.applyDeviceConfig(response.call.settings, false);\n            return response;\n        };\n        /**\n         * Loads the information about the call and creates it if it doesn't exist.\n         *\n         * @param data the data to create the call with.\n         */ this.getOrCreate = async (data)=>{\n            await this.setup();\n            const response = await this.streamClient.post(this.streamClientBasePath, data);\n            this.state.updateFromCallResponse(response.call);\n            this.state.setMembers(response.members);\n            this.state.setOwnCapabilities(response.own_capabilities);\n            if (data?.ring || this.ringing) {\n                // the call response can indicate where the call is still ringing or not\n                this.ringingSubject.next(true);\n            }\n            if (this.streamClient._hasConnectionID()) {\n                this.watching = true;\n                this.clientStore.registerCall(this);\n            }\n            await this.applyDeviceConfig(response.call.settings, false);\n            return response;\n        };\n        /**\n         * Creates a call\n         *\n         * @param data the data to create the call with.\n         */ this.create = async (data)=>{\n            return this.getOrCreate(data);\n        };\n        /**\n         * A shortcut for {@link Call.get} with `ring` parameter set to `true`.\n         * Will send a `call.ring` event to the call members.\n         */ this.ring = async ()=>{\n            return await this.get({\n                ring: true\n            });\n        };\n        /**\n         * A shortcut for {@link Call.get} with `notify` parameter set to `true`.\n         * Will send a `call.notification` event to the call members.\n         */ this.notify = async ()=>{\n            return await this.get({\n                notify: true\n            });\n        };\n        /**\n         * Marks the incoming call as accepted.\n         *\n         * This method should be used only for \"ringing\" call flows.\n         * {@link Call.join} invokes this method automatically for you when joining a call.\n         * Unless you are implementing a custom \"ringing\" flow, you should not use this method.\n         */ this.accept = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/accept`);\n        };\n        /**\n         * Marks the incoming call as rejected.\n         *\n         * This method should be used only for \"ringing\" call flows.\n         * {@link Call.leave} invokes this method automatically for you when you leave or reject this call.\n         * Unless you are implementing a custom \"ringing\" flow, you should not use this method.\n         *\n         * @param reason the reason for rejecting the call.\n         */ this.reject = async (reason)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/reject`, {\n                reason: reason\n            });\n        };\n        /**\n         * Will start to watch for call related WebSocket events and initiate a call session with the server.\n         *\n         * @returns a promise which resolves once the call join-flow has finished.\n         */ this.join = async (data)=>{\n            const connectStartTime = Date.now();\n            await this.setup();\n            const callingState = this.state.callingState;\n            if ([\n                CallingState.JOINED,\n                CallingState.JOINING\n            ].includes(callingState)) {\n                throw new Error(`Illegal State: call.join() shall be called only once`);\n            }\n            this.joinCallData = data;\n            this.logger('debug', 'Starting join flow');\n            this.state.setCallingState(CallingState.JOINING);\n            const performingMigration = this.reconnectStrategy === WebsocketReconnectStrategy.MIGRATE;\n            const performingRejoin = this.reconnectStrategy === WebsocketReconnectStrategy.REJOIN;\n            const performingFastReconnect = this.reconnectStrategy === WebsocketReconnectStrategy.FAST;\n            let statsOptions = this.sfuStatsReporter?.options;\n            if (!this.credentials || !statsOptions || performingRejoin || performingMigration) {\n                try {\n                    const joinResponse = await this.doJoinRequest(data);\n                    this.credentials = joinResponse.credentials;\n                    statsOptions = joinResponse.stats_options;\n                } catch (error) {\n                    // restore the previous call state if the join-flow fails\n                    this.state.setCallingState(callingState);\n                    throw error;\n                }\n            }\n            const previousSfuClient = this.sfuClient;\n            const previousSessionId = previousSfuClient?.sessionId;\n            const isWsHealthy = !!previousSfuClient?.isHealthy;\n            const sfuClient = performingRejoin || performingMigration || !isWsHealthy ? new StreamSfuClient({\n                logTag: String(this.sfuClientTag++),\n                dispatcher: this.dispatcher,\n                credentials: this.credentials,\n                streamClient: this.streamClient,\n                // a new session_id is necessary for the REJOIN strategy.\n                // we use the previous session_id if available\n                sessionId: performingRejoin ? undefined : previousSessionId,\n                onSignalClose: ()=>this.handleSfuSignalClose(sfuClient)\n            }) : previousSfuClient;\n            this.sfuClient = sfuClient;\n            this.dynascaleManager.setSfuClient(sfuClient);\n            const clientDetails = getClientDetails();\n            // we don't need to send JoinRequest if we are re-using an existing healthy SFU client\n            if (previousSfuClient !== sfuClient) {\n                // prepare a generic SDP and send it to the SFU.\n                // these are throw-away SDPs that the SFU will use to determine\n                // the capabilities of the client (codec support, etc.)\n                const [subscriberSdp, publisherSdp] = await Promise.all([\n                    getGenericSdp('recvonly'),\n                    getGenericSdp('sendonly')\n                ]);\n                const isReconnecting = this.reconnectStrategy !== WebsocketReconnectStrategy.UNSPECIFIED;\n                const reconnectDetails = isReconnecting ? this.getReconnectDetails(data?.migrating_from, previousSessionId) : undefined;\n                const preferredPublishOptions = !isReconnecting ? this.getPreferredPublishOptions() : this.currentPublishOptions || [];\n                const preferredSubscribeOptions = !isReconnecting ? this.getPreferredSubscribeOptions() : [];\n                const { callState, fastReconnectDeadlineSeconds, publishOptions } = await sfuClient.join({\n                    subscriberSdp,\n                    publisherSdp,\n                    clientDetails,\n                    fastReconnect: performingFastReconnect,\n                    reconnectDetails,\n                    preferredPublishOptions,\n                    preferredSubscribeOptions\n                });\n                this.currentPublishOptions = publishOptions;\n                this.fastReconnectDeadlineSeconds = fastReconnectDeadlineSeconds;\n                if (callState) {\n                    this.state.updateFromSfuCallState(callState, sfuClient.sessionId, reconnectDetails);\n                }\n            }\n            if (!performingMigration) {\n                // in MIGRATION, `JOINED` state is set in `this.reconnectMigrate()`\n                this.state.setCallingState(CallingState.JOINED);\n            }\n            this.hasJoinedOnce = true;\n            // when performing fast reconnect, or when we reuse the same SFU client,\n            // (ws remained healthy), we just need to restore the ICE connection\n            if (performingFastReconnect) {\n                // the SFU automatically issues an ICE restart on the subscriber\n                // we don't have to do it ourselves\n                await this.restoreICE(sfuClient, {\n                    includeSubscriber: false\n                });\n            } else {\n                const connectionConfig = toRtcConfiguration(this.credentials.ice_servers);\n                this.initPublisherAndSubscriber({\n                    sfuClient,\n                    connectionConfig,\n                    clientDetails,\n                    statsOptions,\n                    publishOptions: this.currentPublishOptions || [],\n                    closePreviousInstances: !performingMigration\n                });\n            }\n            // make sure we only track connection timing if we are not calling this method as part of a reconnection flow\n            if (!performingRejoin && !performingFastReconnect && !performingMigration) {\n                this.sfuStatsReporter?.sendConnectionTime((Date.now() - connectStartTime) / 1000);\n            }\n            if (performingRejoin) {\n                const strategy = WebsocketReconnectStrategy[this.reconnectStrategy];\n                await previousSfuClient?.leaveAndClose(`Closing previous WS after reconnect with strategy: ${strategy}`);\n            } else if (!isWsHealthy) {\n                previousSfuClient?.close(StreamSfuClient.DISPOSE_OLD_SOCKET, 'Closing unhealthy WS after reconnect');\n            }\n            // device settings should be applied only once, we don't have to\n            // re-apply them on later reconnections or server-side data fetches\n            if (!this.deviceSettingsAppliedOnce && this.state.settings) {\n                await this.applyDeviceConfig(this.state.settings, true);\n                this.deviceSettingsAppliedOnce = true;\n            }\n            // We shouldn't persist the `ring` and `notify` state after joining the call\n            // as it's a one-time event and clashes with the potential reconnection attempts.\n            // When reconnecting, if provided with `ring: true` or `notify: true`,\n            // we will spam the other participants with push notifications and `call.ring` events.\n            delete this.joinCallData?.ring;\n            delete this.joinCallData?.notify;\n            // reset the reconnect strategy to unspecified after a successful reconnection\n            this.reconnectStrategy = WebsocketReconnectStrategy.UNSPECIFIED;\n            this.logger('info', `Joined call ${this.cid}`);\n        };\n        /**\n         * Prepares Reconnect Details object.\n         * @internal\n         */ this.getReconnectDetails = (migratingFromSfuId, previousSessionId)=>{\n            const strategy = this.reconnectStrategy;\n            const performingRejoin = strategy === WebsocketReconnectStrategy.REJOIN;\n            const announcedTracks = this.publisher?.getAnnouncedTracksForReconnect() || [];\n            return {\n                strategy,\n                announcedTracks,\n                subscriptions: this.dynascaleManager.trackSubscriptions,\n                reconnectAttempt: this.reconnectAttempts,\n                fromSfuId: migratingFromSfuId || '',\n                previousSessionId: performingRejoin ? previousSessionId || '' : ''\n            };\n        };\n        /**\n         * Prepares the preferred codec for the call.\n         * This is an experimental client feature and subject to change.\n         * @internal\n         */ this.getPreferredPublishOptions = ()=>{\n            const { preferredCodec, fmtpLine, preferredBitrate, maxSimulcastLayers } = this.clientPublishOptions || {};\n            if (!preferredCodec && !preferredBitrate && !maxSimulcastLayers) return [];\n            const codec = preferredCodec ? Codec.create({\n                name: preferredCodec.split('/').pop(),\n                fmtp: fmtpLine\n            }) : undefined;\n            const preferredPublishOptions = [\n                PublishOption.create({\n                    trackType: TrackType.VIDEO,\n                    codec,\n                    bitrate: preferredBitrate,\n                    maxSpatialLayers: maxSimulcastLayers\n                })\n            ];\n            const screenShareSettings = this.screenShare.getSettings();\n            if (screenShareSettings) {\n                preferredPublishOptions.push(PublishOption.create({\n                    trackType: TrackType.SCREEN_SHARE,\n                    fps: screenShareSettings.maxFramerate,\n                    bitrate: screenShareSettings.maxBitrate\n                }));\n            }\n            return preferredPublishOptions;\n        };\n        /**\n         * Prepares the preferred options for subscribing to tracks.\n         * This is an experimental client feature and subject to change.\n         * @internal\n         */ this.getPreferredSubscribeOptions = ()=>{\n            const { subscriberCodec, subscriberFmtpLine } = this.clientPublishOptions || {};\n            if (!subscriberCodec || !subscriberFmtpLine) return [];\n            return [\n                SubscribeOption.create({\n                    trackType: TrackType.VIDEO,\n                    codecs: [\n                        {\n                            name: subscriberCodec.split('/').pop(),\n                            fmtp: subscriberFmtpLine\n                        }\n                    ]\n                })\n            ];\n        };\n        /**\n         * Performs an ICE restart on both the Publisher and Subscriber Peer Connections.\n         * Uses the provided SFU client to restore the ICE connection.\n         *\n         * This method can throw an error if the ICE restart fails.\n         * This error should be handled by the reconnect loop,\n         * and a new reconnection shall be attempted.\n         *\n         * @internal\n         */ this.restoreICE = async (nextSfuClient, opts = {})=>{\n            const { includeSubscriber = true, includePublisher = true } = opts;\n            if (this.subscriber) {\n                this.subscriber.setSfuClient(nextSfuClient);\n                if (includeSubscriber) {\n                    await this.subscriber.restartIce();\n                }\n            }\n            if (this.publisher) {\n                this.publisher.setSfuClient(nextSfuClient);\n                if (includePublisher) {\n                    await this.publisher.restartIce();\n                }\n            }\n        };\n        /**\n         * Initializes the Publisher and Subscriber Peer Connections.\n         * @internal\n         */ this.initPublisherAndSubscriber = (opts)=>{\n            const { sfuClient, connectionConfig, clientDetails, statsOptions, publishOptions, closePreviousInstances } = opts;\n            if (closePreviousInstances && this.subscriber) {\n                this.subscriber.dispose();\n            }\n            this.subscriber = new Subscriber({\n                sfuClient,\n                dispatcher: this.dispatcher,\n                state: this.state,\n                connectionConfig,\n                logTag: String(this.sfuClientTag),\n                onUnrecoverableError: ()=>{\n                    this.reconnect(WebsocketReconnectStrategy.REJOIN).catch((err)=>{\n                        this.logger('warn', '[Reconnect] Error reconnecting after a subscriber error', err);\n                    });\n                }\n            });\n            // anonymous users can't publish anything hence, there is no need\n            // to create Publisher Peer Connection for them\n            const isAnonymous = this.streamClient.user?.type === 'anonymous';\n            if (!isAnonymous) {\n                if (closePreviousInstances && this.publisher) {\n                    this.publisher.dispose();\n                }\n                this.publisher = new Publisher({\n                    sfuClient,\n                    dispatcher: this.dispatcher,\n                    state: this.state,\n                    connectionConfig,\n                    publishOptions,\n                    logTag: String(this.sfuClientTag),\n                    onUnrecoverableError: ()=>{\n                        this.reconnect(WebsocketReconnectStrategy.REJOIN).catch((err)=>{\n                            this.logger('warn', '[Reconnect] Error reconnecting after a publisher error', err);\n                        });\n                    }\n                });\n            }\n            this.statsReporter?.stop();\n            this.statsReporter = createStatsReporter({\n                subscriber: this.subscriber,\n                publisher: this.publisher,\n                state: this.state,\n                datacenter: sfuClient.edgeName\n            });\n            this.sfuStatsReporter?.stop();\n            if (statsOptions?.reporting_interval_ms > 0) {\n                this.sfuStatsReporter = new SfuStatsReporter(sfuClient, {\n                    clientDetails,\n                    options: statsOptions,\n                    subscriber: this.subscriber,\n                    publisher: this.publisher,\n                    microphone: this.microphone,\n                    camera: this.camera,\n                    state: this.state\n                });\n                this.sfuStatsReporter.start();\n            }\n        };\n        /**\n         * Retrieves credentials for joining the call.\n         *\n         * @internal\n         *\n         * @param data the join call data.\n         */ this.doJoinRequest = async (data)=>{\n            const location = await this.streamClient.getLocationHint();\n            const request = {\n                ...data,\n                location\n            };\n            const joinResponse = await this.streamClient.post(`${this.streamClientBasePath}/join`, request);\n            this.state.updateFromCallResponse(joinResponse.call);\n            this.state.setMembers(joinResponse.members);\n            this.state.setOwnCapabilities(joinResponse.own_capabilities);\n            if (data?.ring && !this.ringing) {\n                this.ringingSubject.next(true);\n            }\n            if (this.ringing && !this.isCreatedByMe) {\n                // signals other users that I have accepted the incoming call.\n                await this.accept();\n            }\n            if (this.streamClient._hasConnectionID()) {\n                this.watching = true;\n                this.clientStore.registerCall(this);\n            }\n            return joinResponse;\n        };\n        /**\n         * Handles the closing of the SFU signal connection.\n         *\n         * @internal\n         * @param sfuClient the SFU client instance that was closed.\n         */ this.handleSfuSignalClose = (sfuClient)=>{\n            this.logger('debug', '[Reconnect] SFU signal connection closed');\n            // SFU WS closed before we finished current join, no need to schedule reconnect\n            // because join operation will fail\n            if (this.state.callingState === CallingState.JOINING) return;\n            // normal close, no need to reconnect\n            if (sfuClient.isLeaving) return;\n            this.reconnect(WebsocketReconnectStrategy.REJOIN).catch((err)=>{\n                this.logger('warn', '[Reconnect] Error reconnecting', err);\n            });\n        };\n        /**\n         * Handles the reconnection flow.\n         *\n         * @internal\n         *\n         * @param strategy the reconnection strategy to use.\n         */ this.reconnect = async (strategy)=>{\n            if (this.state.callingState === CallingState.RECONNECTING || this.state.callingState === CallingState.RECONNECTING_FAILED) return;\n            return withoutConcurrency(this.reconnectConcurrencyTag, async ()=>{\n                this.logger('info', `[Reconnect] Reconnecting with strategy ${WebsocketReconnectStrategy[strategy]}`);\n                let reconnectStartTime = Date.now();\n                this.reconnectStrategy = strategy;\n                do {\n                    if (this.disconnectionTimeoutSeconds > 0 && (Date.now() - reconnectStartTime) / 1000 > this.disconnectionTimeoutSeconds) {\n                        this.logger('warn', '[Reconnect] Stopping reconnection attempts after reaching disconnection timeout');\n                        this.state.setCallingState(CallingState.RECONNECTING_FAILED);\n                        return;\n                    }\n                    // we don't increment reconnect attempts for the FAST strategy.\n                    if (this.reconnectStrategy !== WebsocketReconnectStrategy.FAST) {\n                        this.reconnectAttempts++;\n                    }\n                    const current = WebsocketReconnectStrategy[this.reconnectStrategy];\n                    try {\n                        // wait until the network is available\n                        await this.networkAvailableTask?.promise;\n                        switch(this.reconnectStrategy){\n                            case WebsocketReconnectStrategy.UNSPECIFIED:\n                            case WebsocketReconnectStrategy.DISCONNECT:\n                                this.logger('debug', `[Reconnect] No-op strategy ${current}`);\n                                break;\n                            case WebsocketReconnectStrategy.FAST:\n                                await this.reconnectFast();\n                                break;\n                            case WebsocketReconnectStrategy.REJOIN:\n                                await this.reconnectRejoin();\n                                break;\n                            case WebsocketReconnectStrategy.MIGRATE:\n                                await this.reconnectMigrate();\n                                break;\n                            default:\n                                ensureExhausted(this.reconnectStrategy, 'Unknown reconnection strategy');\n                                break;\n                        }\n                        break; // do-while loop, reconnection worked, exit the loop\n                    } catch (error) {\n                        if (error instanceof ErrorFromResponse && error.unrecoverable) {\n                            this.logger('warn', `[Reconnect] Can't reconnect due to coordinator unrecoverable error`, error);\n                            this.state.setCallingState(CallingState.RECONNECTING_FAILED);\n                            return;\n                        }\n                        this.logger('warn', `[Reconnect] ${current} (${this.reconnectAttempts}) failed. Attempting with REJOIN`, error);\n                        await sleep(500);\n                        this.reconnectStrategy = WebsocketReconnectStrategy.REJOIN;\n                    }\n                }while (this.state.callingState !== CallingState.JOINED && this.state.callingState !== CallingState.RECONNECTING_FAILED && this.state.callingState !== CallingState.LEFT);\n            });\n        };\n        /**\n         * Initiates the reconnection flow with the \"fast\" strategy.\n         * @internal\n         */ this.reconnectFast = async ()=>{\n            const reconnectStartTime = Date.now();\n            this.reconnectStrategy = WebsocketReconnectStrategy.FAST;\n            this.state.setCallingState(CallingState.RECONNECTING);\n            await this.join(this.joinCallData);\n            this.sfuStatsReporter?.sendReconnectionTime(WebsocketReconnectStrategy.FAST, (Date.now() - reconnectStartTime) / 1000);\n        };\n        /**\n         * Initiates the reconnection flow with the \"rejoin\" strategy.\n         * @internal\n         */ this.reconnectRejoin = async ()=>{\n            const reconnectStartTime = Date.now();\n            this.reconnectStrategy = WebsocketReconnectStrategy.REJOIN;\n            this.state.setCallingState(CallingState.RECONNECTING);\n            await this.join(this.joinCallData);\n            await this.restorePublishedTracks();\n            this.restoreSubscribedTracks();\n            this.sfuStatsReporter?.sendReconnectionTime(WebsocketReconnectStrategy.REJOIN, (Date.now() - reconnectStartTime) / 1000);\n        };\n        /**\n         * Initiates the reconnection flow with the \"migrate\" strategy.\n         * @internal\n         */ this.reconnectMigrate = async ()=>{\n            const reconnectStartTime = Date.now();\n            const currentSfuClient = this.sfuClient;\n            if (!currentSfuClient) {\n                throw new Error('Cannot migrate without an active SFU client');\n            }\n            this.reconnectStrategy = WebsocketReconnectStrategy.MIGRATE;\n            this.state.setCallingState(CallingState.MIGRATING);\n            const currentSubscriber = this.subscriber;\n            const currentPublisher = this.publisher;\n            currentSubscriber?.detachEventHandlers();\n            currentPublisher?.detachEventHandlers();\n            const migrationTask = makeSafePromise(currentSfuClient.enterMigration());\n            try {\n                const currentSfu = currentSfuClient.edgeName;\n                await this.join({\n                    ...this.joinCallData,\n                    migrating_from: currentSfu\n                });\n            } finally{\n                // cleanup the migration_from field after the migration is complete or failed\n                // as we don't want to keep dirty data in the join call data\n                delete this.joinCallData?.migrating_from;\n            }\n            await this.restorePublishedTracks();\n            this.restoreSubscribedTracks();\n            try {\n                // Wait for the migration to complete, then close the previous SFU client\n                // and the peer connection instances. In case of failure, the migration\n                // task would throw an error and REJOIN would be attempted.\n                await migrationTask();\n                // in MIGRATE, we can consider the call as joined only after\n                // `participantMigrationComplete` event is received, signaled by\n                // the `migrationTask`\n                this.state.setCallingState(CallingState.JOINED);\n            } finally{\n                currentSubscriber?.dispose();\n                currentPublisher?.dispose();\n                // and close the previous SFU client, without specifying close code\n                currentSfuClient.close();\n            }\n            this.sfuStatsReporter?.sendReconnectionTime(WebsocketReconnectStrategy.MIGRATE, (Date.now() - reconnectStartTime) / 1000);\n        };\n        /**\n         * Registers the various event handlers for reconnection.\n         *\n         * @internal\n         */ this.registerReconnectHandlers = ()=>{\n            // handles the legacy \"goAway\" event\n            const unregisterGoAway = this.on('goAway', ()=>{\n                this.reconnect(WebsocketReconnectStrategy.MIGRATE).catch((err)=>{\n                    this.logger('warn', '[Reconnect] Error reconnecting', err);\n                });\n            });\n            // handles the \"error\" event, through which the SFU can request a reconnect\n            const unregisterOnError = this.on('error', (e)=>{\n                const { reconnectStrategy: strategy } = e;\n                if (strategy === WebsocketReconnectStrategy.UNSPECIFIED) return;\n                if (strategy === WebsocketReconnectStrategy.DISCONNECT) {\n                    this.leave({\n                        reason: 'SFU instructed to disconnect'\n                    }).catch((err)=>{\n                        this.logger('warn', `Can't leave call after disconnect request`, err);\n                    });\n                } else {\n                    this.reconnect(strategy).catch((err)=>{\n                        this.logger('warn', '[Reconnect] Error reconnecting', err);\n                    });\n                }\n            });\n            const unregisterNetworkChanged = this.streamClient.on('network.changed', (e)=>{\n                if (!e.online) {\n                    this.logger('debug', '[Reconnect] Going offline');\n                    if (!this.hasJoinedOnce) return;\n                    this.lastOfflineTimestamp = Date.now();\n                    // create a new task that would resolve when the network is available\n                    const networkAvailableTask = promiseWithResolvers();\n                    networkAvailableTask.promise.then(()=>{\n                        let strategy = WebsocketReconnectStrategy.FAST;\n                        if (this.lastOfflineTimestamp) {\n                            const offline = (Date.now() - this.lastOfflineTimestamp) / 1000;\n                            if (offline > this.fastReconnectDeadlineSeconds) {\n                                // We shouldn't attempt FAST if we have exceeded the deadline.\n                                // The SFU would have already wiped out the session.\n                                strategy = WebsocketReconnectStrategy.REJOIN;\n                            }\n                        }\n                        this.reconnect(strategy).catch((err)=>{\n                            this.logger('warn', '[Reconnect] Error reconnecting after going online', err);\n                        });\n                    });\n                    this.networkAvailableTask = networkAvailableTask;\n                    this.sfuStatsReporter?.stop();\n                    this.state.setCallingState(CallingState.OFFLINE);\n                } else {\n                    this.logger('debug', '[Reconnect] Going online');\n                    this.sfuClient?.close(StreamSfuClient.DISPOSE_OLD_SOCKET, 'Closing WS to reconnect after going online');\n                    // we went online, release the previous waiters and reset the state\n                    this.networkAvailableTask?.resolve();\n                    this.networkAvailableTask = undefined;\n                    this.sfuStatsReporter?.start();\n                }\n            });\n            this.leaveCallHooks.add(unregisterGoAway);\n            this.leaveCallHooks.add(unregisterOnError);\n            this.leaveCallHooks.add(unregisterNetworkChanged);\n        };\n        /**\n         * Restores the published tracks after a reconnection.\n         * @internal\n         */ this.restorePublishedTracks = async ()=>{\n            // the tracks need to be restored in their original order of publishing\n            // otherwise, we might get `m-lines order mismatch` errors\n            for (const trackType of this.trackPublishOrder){\n                let mediaStream;\n                switch(trackType){\n                    case TrackType.AUDIO:\n                        mediaStream = this.microphone.state.mediaStream;\n                        break;\n                    case TrackType.VIDEO:\n                        mediaStream = this.camera.state.mediaStream;\n                        break;\n                    case TrackType.SCREEN_SHARE:\n                        mediaStream = this.screenShare.state.mediaStream;\n                        break;\n                    // screen share audio can't exist without a screen share, so we handle it there\n                    case TrackType.SCREEN_SHARE_AUDIO:\n                    case TrackType.UNSPECIFIED:\n                        break;\n                    default:\n                        ensureExhausted(trackType, 'Unknown track type');\n                        break;\n                }\n                if (mediaStream) await this.publish(mediaStream, trackType);\n            }\n        };\n        /**\n         * Restores the subscribed tracks after a reconnection.\n         * @internal\n         */ this.restoreSubscribedTracks = ()=>{\n            const { remoteParticipants } = this.state;\n            if (remoteParticipants.length <= 0) return;\n            this.dynascaleManager.applyTrackSubscriptions(undefined);\n        };\n        /**\n         * Starts publishing the given video stream to the call.\n         * @deprecated use `call.publish()`.\n         */ this.publishVideoStream = async (videoStream)=>{\n            await this.publish(videoStream, TrackType.VIDEO);\n        };\n        /**\n         * Starts publishing the given audio stream to the call.\n         * @deprecated use `call.publish()`\n         */ this.publishAudioStream = async (audioStream)=>{\n            await this.publish(audioStream, TrackType.AUDIO);\n        };\n        /**\n         * Starts publishing the given screen-share stream to the call.\n         * @deprecated use `call.publish()`\n         */ this.publishScreenShareStream = async (screenShareStream)=>{\n            await this.publish(screenShareStream, TrackType.SCREEN_SHARE);\n        };\n        /**\n         * Publishes the given media stream.\n         *\n         * @param mediaStream the media stream to publish.\n         * @param trackType the type of the track to announce.\n         */ this.publish = async (mediaStream, trackType)=>{\n            if (!this.sfuClient) throw new Error(`Call not joined yet.`);\n            // joining is in progress, and we should wait until the client is ready\n            await this.sfuClient.joinTask;\n            if (!this.permissionsContext.canPublish(trackType)) {\n                throw new Error(`No permission to publish ${TrackType[trackType]}`);\n            }\n            if (!this.publisher) throw new Error('Publisher is not initialized');\n            const [track] = isAudioTrackType(trackType) ? mediaStream.getAudioTracks() : mediaStream.getVideoTracks();\n            if (!track) {\n                throw new Error(`There is no ${TrackType[trackType]} track in the stream`);\n            }\n            if (track.readyState === 'ended') {\n                throw new Error(`Can't publish ended tracks.`);\n            }\n            pushToIfMissing(this.trackPublishOrder, trackType);\n            await this.publisher.publish(track, trackType);\n            const trackTypes = [\n                trackType\n            ];\n            if (trackType === TrackType.SCREEN_SHARE) {\n                const [audioTrack] = mediaStream.getAudioTracks();\n                if (audioTrack) {\n                    pushToIfMissing(this.trackPublishOrder, TrackType.SCREEN_SHARE_AUDIO);\n                    await this.publisher.publish(audioTrack, TrackType.SCREEN_SHARE_AUDIO);\n                    trackTypes.push(TrackType.SCREEN_SHARE_AUDIO);\n                }\n            }\n            await this.updateLocalStreamState(mediaStream, ...trackTypes);\n        };\n        /**\n         * Stops publishing the given track type to the call, if it is currently being published.\n         *\n         * @param trackTypes the track types to stop publishing.\n         */ this.stopPublish = async (...trackTypes)=>{\n            if (!this.sfuClient || !this.publisher) return;\n            this.publisher.stopTracks(...trackTypes);\n            await this.updateLocalStreamState(undefined, ...trackTypes);\n        };\n        /**\n         * Updates the call state with the new stream.\n         *\n         * @param mediaStream the new stream to update the call state with.\n         * If undefined, the stream will be removed from the call state.\n         * @param trackTypes the track types to update the call state with.\n         */ this.updateLocalStreamState = async (mediaStream, ...trackTypes)=>{\n            if (!this.sfuClient || !this.sfuClient.sessionId) return;\n            await this.notifyTrackMuteState(!mediaStream, ...trackTypes);\n            const { sessionId } = this.sfuClient;\n            for (const trackType of trackTypes){\n                const streamStateProp = trackTypeToParticipantStreamKey(trackType);\n                if (!streamStateProp) continue;\n                this.state.updateParticipant(sessionId, (p)=>({\n                        publishedTracks: mediaStream ? pushToIfMissing([\n                            ...p.publishedTracks\n                        ], trackType) : p.publishedTracks.filter((t)=>t !== trackType),\n                        [streamStateProp]: mediaStream\n                    }));\n            }\n        };\n        /**\n         * Updates the preferred publishing options\n         *\n         * @internal\n         * @param options the options to use.\n         */ this.updatePublishOptions = (options)=>{\n            this.logger('warn', '[call.updatePublishOptions]: You are manually overriding the publish options for this call. ' + 'This is not recommended, and it can cause call stability/compatibility issues. Use with caution.');\n            if (this.state.callingState === CallingState.JOINED) {\n                this.logger('warn', 'Updating publish options after joining the call does not have an effect');\n            }\n            this.clientPublishOptions = {\n                ...this.clientPublishOptions,\n                ...options\n            };\n        };\n        /**\n         * Notifies the SFU that a noise cancellation process has started.\n         *\n         * @internal\n         */ this.notifyNoiseCancellationStarting = async ()=>{\n            return this.sfuClient?.startNoiseCancellation().catch((err)=>{\n                this.logger('warn', 'Failed to notify start of noise cancellation', err);\n            });\n        };\n        /**\n         * Notifies the SFU that a noise cancellation process has stopped.\n         *\n         * @internal\n         */ this.notifyNoiseCancellationStopped = async ()=>{\n            return this.sfuClient?.stopNoiseCancellation().catch((err)=>{\n                this.logger('warn', 'Failed to notify stop of noise cancellation', err);\n            });\n        };\n        /**\n         * Notifies the SFU about the mute state of the given track types.\n         * @internal\n         */ this.notifyTrackMuteState = async (muted, ...trackTypes)=>{\n            if (!this.sfuClient) return;\n            await this.sfuClient.updateMuteStates(trackTypes.map((trackType)=>({\n                    trackType,\n                    muted\n                })));\n        };\n        /**\n         * Will enhance the reported stats with additional participant-specific information (`callStatsReport$` state [store variable](./StreamVideoClient.md/#readonlystatestore)).\n         * This is usually helpful when detailed stats for a specific participant are needed.\n         *\n         * @param sessionId the sessionId to start reporting for.\n         */ this.startReportingStatsFor = (sessionId)=>{\n            return this.statsReporter?.startReportingStatsFor(sessionId);\n        };\n        /**\n         * Opposite of `startReportingStatsFor`.\n         * Will turn off stats reporting for a specific participant.\n         *\n         * @param sessionId the sessionId to stop reporting for.\n         */ this.stopReportingStatsFor = (sessionId)=>{\n            return this.statsReporter?.stopReportingStatsFor(sessionId);\n        };\n        /**\n         * Resets the last sent reaction for the user holding the given `sessionId`. This is a local action, it won't reset the reaction on the backend.\n         *\n         * @param sessionId the session id.\n         */ this.resetReaction = (sessionId)=>{\n            this.state.updateParticipant(sessionId, {\n                reaction: undefined\n            });\n        };\n        /**\n         * Sets the list of criteria to sort the participants by.\n         *\n         * @param criteria the list of criteria to sort the participants by.\n         */ this.setSortParticipantsBy = (criteria)=>{\n            return this.state.setSortParticipantsBy(criteria);\n        };\n        /**\n         * Sends a reaction to the other call participants.\n         *\n         * @param reaction the reaction to send.\n         */ this.sendReaction = async (reaction)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/reaction`, reaction);\n        };\n        /**\n         * Blocks the user with the given `userId`.\n         *\n         * @param userId the id of the user to block.\n         */ this.blockUser = async (userId)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/block`, {\n                user_id: userId\n            });\n        };\n        /**\n         * Unblocks the user with the given `userId`.\n         *\n         * @param userId the id of the user to unblock.\n         */ this.unblockUser = async (userId)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/unblock`, {\n                user_id: userId\n            });\n        };\n        /**\n         * Mutes the current user.\n         *\n         * @param type the type of the mute operation.\n         */ this.muteSelf = (type)=>{\n            const myUserId = this.currentUserId;\n            if (myUserId) {\n                return this.muteUser(myUserId, type);\n            }\n        };\n        /**\n         * Mutes all the other participants.\n         *\n         * @param type the type of the mute operation.\n         */ this.muteOthers = (type)=>{\n            const trackType = muteTypeToTrackType(type);\n            if (!trackType) return;\n            const userIdsToMute = [];\n            for (const participant of this.state.remoteParticipants){\n                if (participant.publishedTracks.includes(trackType)) {\n                    userIdsToMute.push(participant.userId);\n                }\n            }\n            if (userIdsToMute.length > 0) {\n                return this.muteUser(userIdsToMute, type);\n            }\n        };\n        /**\n         * Mutes the user with the given `userId`.\n         *\n         * @param userId the id of the user to mute.\n         * @param type the type of the mute operation.\n         */ this.muteUser = (userId, type)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/mute_users`, {\n                user_ids: Array.isArray(userId) ? userId : [\n                    userId\n                ],\n                [type]: true\n            });\n        };\n        /**\n         * Will mute all users in the call.\n         *\n         * @param type the type of the mute operation.\n         */ this.muteAllUsers = (type)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/mute_users`, {\n                mute_all_users: true,\n                [type]: true\n            });\n        };\n        /**\n         * Starts recording the call\n         */ this.startRecording = async (request)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/start_recording`, request ? request : {});\n        };\n        /**\n         * Stops recording the call\n         */ this.stopRecording = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/stop_recording`, {});\n        };\n        /**\n         * Starts the transcription of the call.\n         *\n         * @param request the request data.\n         */ this.startTranscription = async (request)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/start_transcription`, request);\n        };\n        /**\n         * Stops the transcription of the call.\n         */ this.stopTranscription = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/stop_transcription`);\n        };\n        /**\n         * Starts the closed captions of the call.\n         */ this.startClosedCaptions = async (options)=>{\n            const trx = this.state.setCaptioning(true); // optimistic update\n            try {\n                return await this.streamClient.post(`${this.streamClientBasePath}/start_closed_captions`, options);\n            } catch (err) {\n                trx.rollback(); // revert the optimistic update\n                throw err;\n            }\n        };\n        /**\n         * Stops the closed captions of the call.\n         */ this.stopClosedCaptions = async (options)=>{\n            const trx = this.state.setCaptioning(false); // optimistic update\n            try {\n                return await this.streamClient.post(`${this.streamClientBasePath}/stop_closed_captions`, options);\n            } catch (err) {\n                trx.rollback(); // revert the optimistic update\n                throw err;\n            }\n        };\n        /**\n         * Updates the closed caption settings.\n         *\n         * @param config the closed caption settings to apply\n         */ this.updateClosedCaptionSettings = (config)=>{\n            this.state.updateClosedCaptionSettings(config);\n        };\n        /**\n         * Sends a `call.permission_request` event to all users connected to the call.\n         * The call settings object contains information about which permissions can be requested during a call\n         * (for example, a user might be allowed to request permission to publish audio, but not video).\n         */ this.requestPermissions = async (data)=>{\n            const { permissions } = data;\n            const canRequestPermissions = permissions.every((permission)=>this.permissionsContext.canRequest(permission));\n            if (!canRequestPermissions) {\n                throw new Error(`You are not allowed to request permissions: ${permissions.join(', ')}`);\n            }\n            return this.streamClient.post(`${this.streamClientBasePath}/request_permission`, data);\n        };\n        /**\n         * Allows you to grant certain permissions to a user in a call.\n         * The permissions are specific to the call experience and do not survive the call itself.\n         *\n         * Supported permissions that can be granted are:\n         * - `send-audio`\n         * - `send-video`\n         * - `screenshare`\n         *\n         * @param userId the id of the user to grant permissions to.\n         * @param permissions the permissions to grant.\n         */ this.grantPermissions = async (userId, permissions)=>{\n            return this.updateUserPermissions({\n                user_id: userId,\n                grant_permissions: permissions\n            });\n        };\n        /**\n         * Allows you to revoke certain permissions from a user in a call.\n         * The permissions are specific to the call experience and do not survive the call itself.\n         *\n         * Supported permissions that can be revoked are:\n         * - `send-audio`\n         * - `send-video`\n         * - `screenshare`\n         *\n         * @param userId the id of the user to revoke permissions from.\n         * @param permissions the permissions to revoke.\n         */ this.revokePermissions = async (userId, permissions)=>{\n            return this.updateUserPermissions({\n                user_id: userId,\n                revoke_permissions: permissions\n            });\n        };\n        /**\n         * Allows you to grant or revoke a specific permission to a user in a call. The permissions are specific to the call experience and do not survive the call itself.\n         *\n         * When revoking a permission, this endpoint will also mute the relevant track from the user. This is similar to muting a user with the difference that the user will not be able to unmute afterwards.\n         *\n         * Supported permissions that can be granted or revoked: `send-audio`, `send-video` and `screenshare`.\n         *\n         * `call.permissions_updated` event is sent to all members of the call.\n         *\n         */ this.updateUserPermissions = async (data)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/user_permissions`, data);\n        };\n        /**\n         * Starts the livestreaming of the call.\n         *\n         * @param data the request data.\n         * @param params the request params.\n         */ this.goLive = async (data = {}, params)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/go_live`, data, params);\n        };\n        /**\n         * Stops the livestreaming of the call.\n         */ this.stopLive = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/stop_live`, {});\n        };\n        /**\n         * Starts the broadcasting of the call.\n         */ this.startHLS = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/start_broadcasting`, {});\n        };\n        /**\n         * Stops the broadcasting of the call.\n         */ this.stopHLS = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/stop_broadcasting`, {});\n        };\n        /**\n         * Updates the call settings or custom data.\n         *\n         * @param updates the updates to apply to the call.\n         */ this.update = async (updates)=>{\n            const response = await this.streamClient.patch(`${this.streamClientBasePath}`, updates);\n            const { call, members, own_capabilities } = response;\n            this.state.updateFromCallResponse(call);\n            this.state.setMembers(members);\n            this.state.setOwnCapabilities(own_capabilities);\n            return response;\n        };\n        /**\n         * Ends the call. Once the call is ended, it cannot be re-joined.\n         */ this.endCall = async ()=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/mark_ended`);\n        };\n        /**\n         * Pins the given session to the top of the participants list.\n         *\n         * @param sessionId the sessionId to pin.\n         */ this.pin = (sessionId)=>{\n            this.state.updateParticipant(sessionId, {\n                pin: {\n                    isLocalPin: true,\n                    pinnedAt: Date.now()\n                }\n            });\n        };\n        /**\n         * Unpins the given session from the top of the participants list.\n         *\n         * @param sessionId the sessionId to unpin.\n         */ this.unpin = (sessionId)=>{\n            this.state.updateParticipant(sessionId, {\n                pin: undefined\n            });\n        };\n        /**\n         * Pins the given session to the top of the participants list for everyone\n         * in the call.\n         * You can execute this method only if you have the `pin-for-everyone` capability.\n         *\n         * @param request the request object.\n         */ this.pinForEveryone = async (request)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/pin`, request);\n        };\n        /**\n         * Unpins the given session from the top of the participants list for everyone\n         * in the call.\n         * You can execute this method only if you have the `pin-for-everyone` capability.\n         *\n         * @param request the request object.\n         */ this.unpinForEveryone = async (request)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/unpin`, request);\n        };\n        /**\n         * Query call members with filter query. The result won't be stored in call state.\n         * @param request\n         * @returns\n         */ this.queryMembers = (request)=>{\n            return this.streamClient.post('/call/members', {\n                ...request || {},\n                id: this.id,\n                type: this.type\n            });\n        };\n        /**\n         * Will update the call members.\n         *\n         * @param data the request data.\n         */ this.updateCallMembers = async (data)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/members`, data);\n        };\n        /**\n         * Schedules an auto-drop timeout based on the call settings.\n         * Applicable only for ringing calls.\n         */ this.scheduleAutoDrop = ()=>{\n            this.cancelAutoDrop();\n            const settings = this.state.settings;\n            if (!settings) return;\n            // ignore if the call is not ringing\n            if (this.state.callingState !== CallingState.RINGING) return;\n            const timeoutInMs = this.isCreatedByMe ? settings.ring.auto_cancel_timeout_ms : settings.ring.incoming_call_timeout_ms;\n            // 0 means no auto-drop\n            if (timeoutInMs <= 0) return;\n            this.dropTimeout = setTimeout(()=>{\n                // the call might have stopped ringing by this point,\n                // e.g. it was already accepted and joined\n                if (this.state.callingState !== CallingState.RINGING) return;\n                this.leave({\n                    reject: true,\n                    reason: 'timeout'\n                }).catch((err)=>{\n                    this.logger('error', 'Failed to drop call', err);\n                });\n            }, timeoutInMs);\n        };\n        /**\n         * Cancels a scheduled auto-drop timeout.\n         */ this.cancelAutoDrop = ()=>{\n            clearTimeout(this.dropTimeout);\n            this.dropTimeout = undefined;\n        };\n        /**\n         * Retrieves the list of recordings for the current call or call session.\n         *\n         * If `callSessionId` is provided, it will return the recordings for that call session.\n         * Otherwise, all recordings for the current call will be returned.\n         *\n         * @param callSessionId the call session id to retrieve recordings for.\n         */ this.queryRecordings = async (callSessionId)=>{\n            let endpoint = this.streamClientBasePath;\n            if (callSessionId) {\n                endpoint = `${endpoint}/${callSessionId}`;\n            }\n            return this.streamClient.get(`${endpoint}/recordings`);\n        };\n        /**\n         * Retrieves the list of transcriptions for the current call.\n         *\n         * @returns the list of transcriptions.\n         */ this.queryTranscriptions = async ()=>{\n            return this.streamClient.get(`${this.streamClientBasePath}/transcriptions`);\n        };\n        /**\n         * Retrieve call statistics for a particular call session (historical).\n         * Here `callSessionID` is mandatory.\n         *\n         * @param callSessionID the call session ID to retrieve statistics for.\n         * @returns The call stats.\n         */ this.getCallStats = async (callSessionID)=>{\n            const endpoint = `${this.streamClientBasePath}/stats/${callSessionID}`;\n            return this.streamClient.get(endpoint);\n        };\n        /**\n         * Submit user feedback for the call\n         *\n         * @param rating Rating between 1 and 5 denoting the experience of the user in the call\n         * @param reason The reason/description for the rating\n         * @param custom Custom data\n         * @returns\n         */ this.submitFeedback = async (rating, { reason, custom } = {})=>{\n            if (rating < 1 || rating > 5) {\n                throw new Error('Rating must be between 1 and 5');\n            }\n            const callSessionId = this.state.session?.id;\n            if (!callSessionId) {\n                throw new Error('Feedback can be submitted only in the context of a call session');\n            }\n            const { sdkName, sdkVersion, ...platform } = getSdkSignature(getClientDetails());\n            // user sessionId is not available once the call has been left\n            // until we relax the backend validation, we'll send N/A\n            const userSessionId = this.sfuClient?.sessionId ?? 'N/A';\n            const endpoint = `${this.streamClientBasePath}/feedback/${callSessionId}`;\n            return this.streamClient.post(endpoint, {\n                rating,\n                reason,\n                user_session_id: userSessionId,\n                sdk: sdkName,\n                sdk_version: sdkVersion,\n                custom: {\n                    ...custom,\n                    'x-stream-platform-data': platform\n                }\n            });\n        };\n        /**\n         * Sends a custom event to all call participants.\n         *\n         * @param payload the payload to send.\n         */ this.sendCustomEvent = async (payload)=>{\n            return this.streamClient.post(`${this.streamClientBasePath}/event`, {\n                custom: payload\n            });\n        };\n        /**\n         * Applies the device configuration from the backend.\n         *\n         * @internal\n         */ this.applyDeviceConfig = async (settings, publish)=>{\n            await this.camera.apply(settings.video, publish).catch((err)=>{\n                this.logger('warn', 'Camera init failed', err);\n            });\n            await this.microphone.apply(settings.audio, publish).catch((err)=>{\n                this.logger('warn', 'Mic init failed', err);\n            });\n        };\n        /**\n         * Will begin tracking the given element for visibility changes within the\n         * configured viewport element (`call.setViewport`).\n         *\n         * @param element the element to track.\n         * @param sessionId the session id.\n         * @param trackType the video mode.\n         */ this.trackElementVisibility = (element, sessionId, trackType)=>{\n            return this.dynascaleManager.trackElementVisibility(element, sessionId, trackType);\n        };\n        /**\n         * Sets the viewport element to track bound video elements for visibility.\n         *\n         * @param element the viewport element.\n         */ this.setViewport = (element)=>{\n            return this.dynascaleManager.setViewport(element);\n        };\n        /**\n         * Binds a DOM <video> element to the given session id.\n         * This method will make sure that the video element will play\n         * the correct video stream for the given session id.\n         *\n         * Under the hood, it would also keep track of the video element dimensions\n         * and update the subscription accordingly in order to optimize the bandwidth.\n         *\n         * If a \"viewport\" is configured, the video element will be automatically\n         * tracked for visibility and the subscription will be updated accordingly.\n         *\n         * @param videoElement the video element to bind to.\n         * @param sessionId the session id.\n         * @param trackType the kind of video.\n         */ this.bindVideoElement = (videoElement, sessionId, trackType)=>{\n            const unbind = this.dynascaleManager.bindVideoElement(videoElement, sessionId, trackType);\n            if (!unbind) return;\n            this.leaveCallHooks.add(unbind);\n            return ()=>{\n                this.leaveCallHooks.delete(unbind);\n                unbind();\n            };\n        };\n        /**\n         * Binds a DOM <audio> element to the given session id.\n         *\n         * This method will make sure that the audio element will\n         * play the correct audio stream for the given session id.\n         *\n         * @param audioElement the audio element to bind to.\n         * @param sessionId the session id.\n         * @param trackType the kind of audio.\n         */ this.bindAudioElement = (audioElement, sessionId, trackType = 'audioTrack')=>{\n            const unbind = this.dynascaleManager.bindAudioElement(audioElement, sessionId, trackType);\n            if (!unbind) return;\n            this.leaveCallHooks.add(unbind);\n            return ()=>{\n                this.leaveCallHooks.delete(unbind);\n                unbind();\n            };\n        };\n        /**\n         * Binds a DOM <img> element to this call's thumbnail (if enabled in settings).\n         *\n         * @param imageElement the image element to bind to.\n         * @param opts options for the binding.\n         */ this.bindCallThumbnailElement = (imageElement, opts = {})=>{\n            const handleError = ()=>{\n                imageElement.src = opts.fallbackImageSource || 'https://getstream.io/random_svg/?name=x&id=x';\n            };\n            const unsubscribe = createSubscription(this.state.thumbnails$, (thumbnails)=>{\n                if (!thumbnails) return;\n                imageElement.addEventListener('error', handleError);\n                const thumbnailUrl = new URL(thumbnails.image_url);\n                thumbnailUrl.searchParams.set('w', String(imageElement.clientWidth));\n                thumbnailUrl.searchParams.set('h', String(imageElement.clientHeight));\n                imageElement.src = thumbnailUrl.toString();\n            });\n            return ()=>{\n                unsubscribe();\n                imageElement.removeEventListener('error', handleError);\n            };\n        };\n        /**\n         * Specify preference for incoming video resolution. The preference will\n         * be matched as close as possible, but actual resolution will depend\n         * on the video source quality and client network conditions. Will enable\n         * incoming video, if previously disabled.\n         *\n         * @param resolution preferred resolution, or `undefined` to clear preference\n         * @param sessionIds optionally specify session ids of the participants this\n         * preference has effect on. Affects all participants by default.\n         */ this.setPreferredIncomingVideoResolution = (resolution, sessionIds)=>{\n            this.dynascaleManager.setVideoTrackSubscriptionOverrides(resolution ? {\n                enabled: true,\n                dimension: resolution\n            } : undefined, sessionIds);\n            this.dynascaleManager.applyTrackSubscriptions();\n        };\n        /**\n         * Enables or disables incoming video from all remote call participants,\n         * and removes any preference for preferred resolution.\n         */ this.setIncomingVideoEnabled = (enabled)=>{\n            this.dynascaleManager.setVideoTrackSubscriptionOverrides(enabled ? undefined : {\n                enabled: false\n            });\n            this.dynascaleManager.applyTrackSubscriptions();\n        };\n        /**\n         * Sets the maximum amount of time a user can remain waiting for a reconnect\n         * after a network disruption\n         * @param timeoutSeconds Timeout in seconds, or 0 to keep reconnecting indefinetely\n         */ this.setDisconnectionTimeout = (timeoutSeconds)=>{\n            this.disconnectionTimeoutSeconds = timeoutSeconds;\n        };\n        this.type = type;\n        this.id = id;\n        this.cid = `${type}:${id}`;\n        this.ringingSubject = new _barrel_optimize_names_BehaviorSubject_ReplaySubject_combineLatest_concatMap_debounceTime_distinctUntilChanged_distinctUntilKeyChanged_from_fromEvent_fromEventPattern_map_merge_of_pairwise_shareReplay_startWith_takeWhile_rxjs__WEBPACK_IMPORTED_MODULE_15__.BehaviorSubject(ringing);\n        this.watching = watching;\n        this.streamClient = streamClient;\n        this.clientStore = clientStore;\n        this.streamClientBasePath = `/call/${this.type}/${this.id}`;\n        this.logger = getLogger([\n            'Call'\n        ]);\n        const callTypeConfig = CallTypes.get(type);\n        const participantSorter = sortParticipantsBy || callTypeConfig.options.sortParticipantsBy;\n        if (participantSorter) {\n            this.state.setSortParticipantsBy(participantSorter);\n        }\n        this.state.setMembers(members || []);\n        this.state.setOwnCapabilities(ownCapabilities || []);\n        this.state.setCallingState(ringing ? CallingState.RINGING : CallingState.IDLE);\n        this.camera = new CameraManager(this);\n        this.microphone = new MicrophoneManager(this);\n        this.speaker = new SpeakerManager(this);\n        this.screenShare = new ScreenShareManager(this);\n        this.dynascaleManager = new DynascaleManager(this.state, this.speaker);\n    }\n    /**\n     * A flag indicating whether the call is \"ringing\" type of call.\n     */ get ringing() {\n        return getCurrentValue(this.ringingSubject);\n    }\n    /**\n     * Retrieves the current user ID.\n     */ get currentUserId() {\n        return this.clientStore.connectedUser?.id;\n    }\n    /**\n     * A flag indicating whether the call was created by the current user.\n     */ get isCreatedByMe() {\n        return this.state.createdBy?.id === this.currentUserId;\n    }\n}\n/**\n * StableWSConnection - A WS connection that reconnects upon failure.\n * - the browser will sometimes report that you're online or offline\n * - the WS connection can break and fail (there is a 30s health check)\n * - sometimes your WS connection will seem to work while the user is in fact offline\n * - to speed up online/offline detection you can use the window.addEventListener('offline');\n *\n * There are 4 ways in which a connection can become unhealthy:\n * - websocket.onerror is called\n * - websocket.onclose is called\n * - the health check fails and no event is received for ~40 seconds\n * - the browser indicates the connection is now offline\n *\n * There are 2 assumptions we make about the server:\n * - state can be recovered by querying the channel again\n * - if the servers fails to publish a message to the client, the WS connection is destroyed\n */ class StableWSConnection {\n    constructor(client){\n        this._log = (msg, extra = {}, level = 'info')=>{\n            this.client.logger(level, 'connection:' + msg, {\n                ...extra\n            });\n        };\n        this.setClient = (client)=>{\n            this.client = client;\n        };\n        /**\n         * Builds and returns the url for websocket.\n         * @private\n         * @returns url string\n         */ this._buildUrl = ()=>{\n            const params = new URLSearchParams();\n            params.set('api_key', this.client.key);\n            params.set('stream-auth-type', this.client.getAuthType());\n            params.set('X-Stream-Client', this.client.getUserAgent());\n            return `${this.client.wsBaseURL}/connect?${params.toString()}`;\n        };\n        /**\n         * onlineStatusChanged - this function is called when the browser connects or disconnects from the internet.\n         *\n         * @param {Event} event Event with type online or offline\n         *\n         */ this.onlineStatusChanged = (event)=>{\n            if (event.type === 'offline') {\n                // mark the connection as down\n                this._log('onlineStatusChanged() - Status changing to offline');\n                // we know that the app is offline so dispatch the unhealthy connection event immediately\n                this._setHealth(false, true);\n            } else if (event.type === 'online') {\n                // retry right now...\n                // We check this.isHealthy, not sure if it's always\n                // smart to create a new WS connection if the old one is still up and running.\n                // it's possible we didn't miss any messages, so this process is just expensive and not needed.\n                this._log(`onlineStatusChanged() - Status changing to online. isHealthy: ${this.isHealthy}`);\n                if (!this.isHealthy) {\n                    this._reconnect({\n                        interval: 10\n                    });\n                }\n            }\n        };\n        this.onopen = (wsID)=>{\n            if (this.wsID !== wsID) return;\n            const user = this.client.user;\n            if (!user) {\n                this.client.logger('error', `User not set, can't connect to WS`);\n                return;\n            }\n            const token = this.client._getToken();\n            if (!token) {\n                this.client.logger('error', `Token not set, can't connect authenticate`);\n                return;\n            }\n            const authMessage = {\n                token,\n                user_details: {\n                    id: user.id,\n                    name: user.name,\n                    image: user.image,\n                    custom: user.custom\n                }\n            };\n            this.ws?.send(JSON.stringify(authMessage));\n            this._log('onopen() - onopen callback', {\n                wsID\n            });\n        };\n        this.onmessage = (wsID, event)=>{\n            if (this.wsID !== wsID) return;\n            this._log('onmessage() - onmessage callback', {\n                event,\n                wsID\n            });\n            const data = typeof event.data === 'string' ? JSON.parse(event.data) : null;\n            // we wait till the first message before we consider the connection open.\n            // the reason for this is that auth errors and similar errors trigger a ws.onopen and immediately\n            // after that a ws.onclose.\n            if (!this.isResolved && data && data.type === 'connection.error') {\n                this.isResolved = true;\n                if (data.error) {\n                    this.rejectPromise?.(this._errorFromWSEvent(data, false));\n                    return;\n                }\n            }\n            // trigger the event..\n            this.lastEvent = new Date();\n            if (data && (data.type === 'health.check' || data.type === 'connection.ok')) {\n                // the initial health-check should come from the client\n                this.scheduleNextPing();\n            }\n            if (data && data.type === 'connection.ok') {\n                this.resolvePromise?.(data);\n                this._setHealth(true);\n            }\n            if (data && data.type === 'connection.error' && data.error) {\n                const { code } = data.error;\n                this.isHealthy = false;\n                this.isConnecting = false;\n                this.consecutiveFailures += 1;\n                if (code === KnownCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n                    clearTimeout(this.connectionCheckTimeoutRef);\n                    this._log('connect() - WS failure due to expired token, so going to try to reload token and reconnect');\n                    this._reconnect({\n                        refreshToken: true\n                    });\n                }\n            }\n            if (data) {\n                data.received_at = new Date();\n                this.client.dispatchEvent(data);\n            }\n            this.scheduleConnectionCheck();\n        };\n        this.onclose = (wsID, event)=>{\n            if (this.wsID !== wsID) return;\n            this._log('onclose() - onclose callback - ' + event.code, {\n                event,\n                wsID\n            });\n            if (event.code === KnownCodes.WS_CLOSED_SUCCESS) {\n                // this is a permanent error raised by stream..\n                // usually caused by invalid auth details\n                const error = new Error(`WS connection reject with error ${event.reason}`);\n                // @ts-expect-error\n                error.reason = event.reason;\n                // @ts-expect-error\n                error.code = event.code;\n                // @ts-expect-error\n                error.wasClean = event.wasClean;\n                // @ts-expect-error\n                error.target = event.target;\n                this.rejectPromise?.(error);\n                this._log(`onclose() - WS connection reject with error ${event.reason}`, {\n                    event\n                });\n            } else {\n                this.consecutiveFailures += 1;\n                this.totalFailures += 1;\n                this._setHealth(false);\n                this.isConnecting = false;\n                this.rejectPromise?.(this._errorFromWSEvent(event));\n                this._log(`onclose() - WS connection closed. Calling reconnect ...`, {\n                    event\n                });\n                // reconnect if its an abnormal failure\n                this._reconnect();\n            }\n        };\n        this.onerror = (wsID, event)=>{\n            if (this.wsID !== wsID) return;\n            this.consecutiveFailures += 1;\n            this.totalFailures += 1;\n            this._setHealth(false);\n            this.isConnecting = false;\n            this.rejectPromise?.(new Error(`WebSocket error: ${event}`));\n            this._log(`onerror() - WS connection resulted into error`, {\n                event\n            });\n            this._reconnect();\n        };\n        /**\n         * _setHealth - Sets the connection to healthy or unhealthy.\n         * Broadcasts an event in case the connection status changed.\n         *\n         * @param {boolean} healthy boolean indicating if the connection is healthy or not\n         * @param {boolean} dispatchImmediately boolean indicating to dispatch event immediately even if the connection is unhealthy\n         */ this._setHealth = (healthy, dispatchImmediately = false)=>{\n            if (healthy === this.isHealthy) return;\n            this.isHealthy = healthy;\n            if (this.isHealthy || dispatchImmediately) {\n                this.client.dispatchEvent({\n                    type: 'connection.changed',\n                    online: this.isHealthy\n                });\n                return;\n            }\n            // we're offline, wait few seconds and fire and event if still offline\n            setTimeout(()=>{\n                if (this.isHealthy) return;\n                this.client.dispatchEvent({\n                    type: 'connection.changed',\n                    online: this.isHealthy\n                });\n            }, 5000);\n        };\n        /**\n         * _errorFromWSEvent - Creates an error object for the WS event\n         */ this._errorFromWSEvent = (event, isWSFailure = true)=>{\n            let code;\n            let statusCode;\n            let message;\n            if (isCloseEvent(event)) {\n                code = event.code;\n                message = event.reason;\n                statusCode = 0;\n            } else {\n                const { error } = event;\n                code = error.code;\n                message = error.message;\n                statusCode = error.StatusCode;\n            }\n            const msg = `WS failed with code: ${code} and reason: ${message}`;\n            this._log(msg, {\n                event\n            }, 'warn');\n            const error = new Error(msg);\n            error.code = code;\n            /**\n             * StatusCode does not exist on any event types but has been left\n             * as is to preserve JS functionality during the TS implementation\n             */ error.StatusCode = statusCode;\n            error.isWSFailure = isWSFailure;\n            return error;\n        };\n        /**\n         * _setupPromise - sets up the this.connectOpen promise\n         */ this._setupConnectionPromise = ()=>{\n            this.isResolved = false;\n            /** a promise that is resolved once ws.open is called */ this.connectionOpenSafe = makeSafePromise(new Promise((resolve, reject)=>{\n                this.resolvePromise = resolve;\n                this.rejectPromise = reject;\n            }));\n        };\n        /**\n         * Schedules a next health check ping for websocket.\n         */ this.scheduleNextPing = ()=>{\n            const timers = getTimers();\n            if (this.healthCheckTimeoutRef) {\n                timers.clearTimeout(this.healthCheckTimeoutRef);\n            }\n            // 30 seconds is the recommended interval (messenger uses this)\n            this.healthCheckTimeoutRef = timers.setTimeout(()=>{\n                // send the healthcheck..., server replies with a health check event\n                const data = [\n                    {\n                        type: 'health.check',\n                        client_id: this.client.clientID\n                    }\n                ];\n                // try to send on the connection\n                try {\n                    this.ws?.send(JSON.stringify(data));\n                } catch (e) {\n                // error will already be detected elsewhere\n                }\n            }, this.pingInterval);\n        };\n        /**\n         * scheduleConnectionCheck - schedules a check for time difference between last received event and now.\n         * If the difference is more than 35 seconds, it means our health check logic has failed and websocket needs\n         * to be reconnected.\n         */ this.scheduleConnectionCheck = ()=>{\n            clearTimeout(this.connectionCheckTimeoutRef);\n            this.connectionCheckTimeoutRef = setTimeout(()=>{\n                const now = new Date();\n                if (this.lastEvent && now.getTime() - this.lastEvent.getTime() > this.connectionCheckTimeout) {\n                    this._log('scheduleConnectionCheck - going to reconnect');\n                    this._setHealth(false);\n                    this._reconnect();\n                }\n            }, this.connectionCheckTimeout);\n        };\n        this.client = client;\n        /** consecutive failures influence the duration of the timeout */ this.consecutiveFailures = 0;\n        /** keep track of the total number of failures */ this.totalFailures = 0;\n        /** We only make 1 attempt to reconnect at the same time.. */ this.isConnecting = false;\n        /** To avoid reconnect if client is disconnected */ this.isDisconnected = false;\n        /** Boolean that indicates if the connection promise is resolved */ this.isResolved = false;\n        /** Boolean that indicates if we have a working connection to the server */ this.isHealthy = false;\n        /** Incremented when a new WS connection is made */ this.wsID = 1;\n        /** Store the last event time for health checks */ this.lastEvent = null;\n        /** Send a health check message every 25 seconds */ this.pingInterval = 25 * 1000;\n        this.connectionCheckTimeout = this.pingInterval + 10 * 1000;\n        addConnectionEventListeners(this.onlineStatusChanged);\n    }\n    /**\n     * connect - Connect to the WS URL\n     * the default 15s timeout allows between 2~3 tries\n     * @return {ConnectAPIResponse<ConnectedEvent>} Promise that completes once the first health check message is received\n     */ async connect(timeout = 15000) {\n        if (this.isConnecting) {\n            throw Error(`You've called connect twice, can only attempt 1 connection at the time`);\n        }\n        this.isDisconnected = false;\n        try {\n            const healthCheck = await this._connect();\n            this.consecutiveFailures = 0;\n            this._log(`connect() - Established ws connection with healthcheck: ${healthCheck}`);\n        } catch (error) {\n            this.isHealthy = false;\n            this.consecutiveFailures += 1;\n            if (// @ts-ignore\n            error.code === KnownCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n                this._log('connect() - WS failure due to expired token, so going to try to reload token and reconnect');\n                this._reconnect({\n                    refreshToken: true\n                });\n            } else {\n                // @ts-ignore\n                if (!error.isWSFailure) {\n                    // API rejected the connection and we should not retry\n                    throw new Error(JSON.stringify({\n                        // @ts-ignore\n                        code: error.code,\n                        // @ts-ignore\n                        StatusCode: error.StatusCode,\n                        // @ts-ignore\n                        message: error.message,\n                        // @ts-ignore\n                        isWSFailure: error.isWSFailure\n                    }));\n                }\n            }\n        }\n        return await this._waitForHealthy(timeout);\n    }\n    /**\n     * _waitForHealthy polls the promise connection to see if its resolved until it times out\n     * the default 15s timeout allows between 2~3 tries\n     * @param timeout duration(ms)\n     */ async _waitForHealthy(timeout = 15000) {\n        return Promise.race([\n            (async ()=>{\n                const interval = 50; // ms\n                for(let i = 0; i <= timeout; i += interval){\n                    try {\n                        return await this.connectionOpen;\n                    } catch (error) {\n                        if (i === timeout) {\n                            throw new Error(JSON.stringify({\n                                code: error.code,\n                                StatusCode: error.StatusCode,\n                                message: error.message,\n                                isWSFailure: error.isWSFailure\n                            }));\n                        }\n                        await sleep(interval);\n                    }\n                }\n            })(),\n            (async ()=>{\n                await sleep(timeout);\n                this.isConnecting = false;\n                throw new Error(JSON.stringify({\n                    code: '',\n                    StatusCode: '',\n                    message: 'initial WS connection could not be established',\n                    isWSFailure: true\n                }));\n            })()\n        ]);\n    }\n    /**\n     * disconnect - Disconnect the connection and doesn't recover...\n     *\n     */ disconnect(timeout) {\n        this._log(`disconnect() - Closing the websocket connection for wsID ${this.wsID}`);\n        this.wsID += 1;\n        this.isConnecting = false;\n        this.isDisconnected = true;\n        // start by removing all the listeners\n        if (this.healthCheckTimeoutRef) {\n            getTimers().clearInterval(this.healthCheckTimeoutRef);\n        }\n        if (this.connectionCheckTimeoutRef) {\n            clearInterval(this.connectionCheckTimeoutRef);\n        }\n        removeConnectionEventListeners(this.onlineStatusChanged);\n        this.isHealthy = false;\n        let isClosedPromise;\n        // and finally close...\n        // Assigning to local here because we will remove it from this before the\n        // promise resolves.\n        const { ws } = this;\n        if (ws && ws.close && ws.readyState === ws.OPEN) {\n            isClosedPromise = new Promise((resolve)=>{\n                const onclose = (event)=>{\n                    this._log(`disconnect() - resolving isClosedPromise ${event ? 'with' : 'without'} close frame`, {\n                        event\n                    });\n                    resolve();\n                };\n                ws.onclose = onclose;\n                // In case we don't receive close frame websocket server in time,\n                // lets not wait for more than 1 second.\n                setTimeout(onclose, timeout != null ? timeout : 1000);\n            });\n            this._log(`disconnect() - Manually closed connection by calling client.disconnect()`);\n            ws.close(KnownCodes.WS_CLOSED_SUCCESS, 'Manually closed connection by calling client.disconnect()');\n        } else {\n            this._log(`disconnect() - ws connection doesn't exist or it is already closed.`);\n            isClosedPromise = Promise.resolve();\n        }\n        delete this.ws;\n        return isClosedPromise;\n    }\n    /**\n     * _connect - Connect to the WS endpoint\n     *\n     * @return {ConnectAPIResponse<ConnectedEvent>} Promise that completes once the first health check message is received\n     */ async _connect() {\n        if (this.isConnecting) return; // simply ignore _connect if it's currently trying to connect\n        this.isConnecting = true;\n        this.requestID = randomId();\n        let isTokenReady = false;\n        try {\n            this._log(`_connect() - waiting for token`);\n            await this.client.tokenManager.tokenReady();\n            isTokenReady = true;\n        } catch (e) {\n        // token provider has failed before, so try again\n        }\n        try {\n            if (!isTokenReady) {\n                this._log(`_connect() - tokenProvider failed before, so going to retry`);\n                await this.client.tokenManager.loadToken();\n            }\n            if (!this.client.isConnectionIsPromisePending) {\n                this.client._setupConnectionIdPromise();\n            }\n            this._setupConnectionPromise();\n            const wsURL = this._buildUrl();\n            this._log(`_connect() - Connecting to ${wsURL}`, {\n                wsURL,\n                requestID: this.requestID\n            });\n            const WS = this.client.options.WebSocketImpl ?? WebSocket;\n            this.ws = new WS(wsURL);\n            this.ws.onopen = this.onopen.bind(this, this.wsID);\n            this.ws.onclose = this.onclose.bind(this, this.wsID);\n            this.ws.onerror = this.onerror.bind(this, this.wsID);\n            this.ws.onmessage = this.onmessage.bind(this, this.wsID);\n            const response = await this.connectionOpen;\n            this.isConnecting = false;\n            if (response) {\n                this.connectionID = response.connection_id;\n                this.client.resolveConnectionId?.(this.connectionID);\n                return response;\n            }\n        } catch (err) {\n            await this.client._setupConnectionIdPromise();\n            this.isConnecting = false;\n            // @ts-ignore\n            this._log(`_connect() - Error - `, err);\n            this.client.rejectConnectionId?.(err);\n            throw err;\n        }\n    }\n    /**\n     * _reconnect - Retry the connection to WS endpoint\n     *\n     * @param {{ interval?: number; refreshToken?: boolean }} options Following options are available\n     *\n     * - `interval`\t{int}\t\t\tnumber of ms that function should wait before reconnecting\n     * - `refreshToken` {boolean}\treload/refresh user token be refreshed before attempting reconnection.\n     */ async _reconnect(options = {}) {\n        this._log('_reconnect() - Initiating the reconnect');\n        // only allow 1 connection at the time\n        if (this.isConnecting || this.isHealthy) {\n            this._log('_reconnect() - Abort (1) since already connecting or healthy');\n            return;\n        }\n        // reconnect in case of on error or on close\n        // also reconnect if the health check cycle fails\n        let interval = options.interval;\n        if (!interval) {\n            interval = retryInterval(this.consecutiveFailures);\n        }\n        // reconnect, or try again after a little while...\n        await sleep(interval);\n        // Check once again if by some other call to _reconnect is active or connection is\n        // already restored, then no need to proceed.\n        if (this.isConnecting || this.isHealthy) {\n            this._log('_reconnect() - Abort (2) since already connecting or healthy');\n            return;\n        }\n        if (this.isDisconnected) {\n            this._log('_reconnect() - Abort (3) since disconnect() is called');\n            return;\n        }\n        this._log('_reconnect() - Destroying current WS connection');\n        // cleanup the old connection\n        this._destroyCurrentWSConnection();\n        if (options.refreshToken) {\n            await this.client.tokenManager.loadToken();\n        }\n        try {\n            await this._connect();\n            this._log('_reconnect() - Waiting for recoverCallBack');\n            // await this.client.recoverState();\n            this._log('_reconnect() - Finished recoverCallBack');\n            this.consecutiveFailures = 0;\n        } catch (error) {\n            this.isHealthy = false;\n            this.consecutiveFailures += 1;\n            if (error.code === KnownCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n                this._log('_reconnect() - WS failure due to expired token, so going to try to reload token and reconnect');\n                return this._reconnect({\n                    refreshToken: true\n                });\n            }\n            // reconnect on WS failures, don't reconnect if there is a code bug\n            if (error.isWSFailure) {\n                this._log('_reconnect() - WS failure, so going to try to reconnect');\n                this._reconnect();\n            }\n        }\n        this._log('_reconnect() - == END ==');\n    }\n    /**\n     * _destroyCurrentWSConnection - Removes the current WS connection\n     *\n     */ _destroyCurrentWSConnection() {\n        // increment the ID, meaning we will ignore all messages from the old\n        // ws connection from now on.\n        this.wsID += 1;\n        try {\n            this?.ws?.close();\n        } catch (e) {\n        // we don't care\n        }\n    }\n    get connectionOpen() {\n        return this.connectionOpenSafe?.();\n    }\n}\nfunction getUserFromToken(token) {\n    const fragments = token.split('.');\n    if (fragments.length !== 3) {\n        return '';\n    }\n    const b64Payload = fragments[1];\n    const payload = decodeBase64(b64Payload);\n    const data = JSON.parse(payload);\n    return data.user_id;\n}\n// base-64 decoder throws exception if encoded string is not padded by '=' to make string length\n// in multiples of 4. So gonna use our own method for this purpose to keep backwards compatibility\n// https://github.com/beatgammit/base64-js/blob/master/index.js#L26\nconst decodeBase64 = (s)=>{\n    const e = {}, w = String.fromCharCode, L = s.length;\n    let i, b = 0, c, x, l = 0, a, r = '';\n    const A = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    for(i = 0; i < 64; i++){\n        e[A.charAt(i)] = i;\n    }\n    for(x = 0; x < L; x++){\n        c = e[s.charAt(x)];\n        b = (b << 6) + c;\n        l += 6;\n        while(l >= 8){\n            ((a = b >>> (l -= 8) & 0xff) || x < L - 2) && (r += w(a));\n        }\n    }\n    return r;\n};\n/**\n * TokenManager\n *\n * Handles all the operations around user token.\n */ class TokenManager {\n    /**\n     * Constructor\n     */ constructor(secret){\n        /**\n         * Set the static string token or token provider.\n         * Token provider should return a token string or a promise which resolves to string token.\n         *\n         * @param {TokenOrProvider} tokenOrProvider - the token or token provider.\n         * @param {UserResponse} user - the user object.\n         * @param {boolean} isAnonymous - whether the user is anonymous or not.\n         */ this.setTokenOrProvider = async (tokenOrProvider, user, isAnonymous)=>{\n            this.validateToken(tokenOrProvider, user, isAnonymous);\n            this.user = user;\n            if (isFunction(tokenOrProvider)) {\n                this.tokenProvider = tokenOrProvider;\n                this.type = 'provider';\n            }\n            if (typeof tokenOrProvider === 'string') {\n                this.token = tokenOrProvider;\n                this.type = 'static';\n            }\n            await this.loadToken();\n        };\n        /**\n         * Resets the token manager.\n         * Useful for client disconnection or switching user.\n         */ this.reset = ()=>{\n            this.token = undefined;\n            this.tokenProvider = undefined;\n            this.type = 'static';\n            this.user = undefined;\n            this.loadTokenPromise = null;\n        };\n        // Validates the user token.\n        this.validateToken = (tokenOrProvider, user, isAnonymous)=>{\n            // allow empty token for anon user\n            if (user && isAnonymous && !tokenOrProvider) return;\n            // Don't allow empty token for non-server side client.\n            if (!this.secret && !tokenOrProvider) {\n                throw new Error('UserWithId token can not be empty');\n            }\n            if (tokenOrProvider && typeof tokenOrProvider !== 'string' && !isFunction(tokenOrProvider)) {\n                throw new Error('user token should either be a string or a function');\n            }\n            if (typeof tokenOrProvider === 'string') {\n                // Allow empty token for anonymous users\n                if (isAnonymous && tokenOrProvider === '') return;\n                const tokenUserId = getUserFromToken(tokenOrProvider);\n                if (tokenOrProvider != null && (tokenUserId == null || tokenUserId === '' || !isAnonymous && tokenUserId !== user.id)) {\n                    throw new Error('userToken does not have a user_id or is not matching with user.id');\n                }\n            }\n        };\n        // Resolves when token is ready. This function is simply to check if loadToken is in progress, in which\n        // case a function should wait.\n        this.tokenReady = ()=>this.loadTokenPromise;\n        // Fetches a token from tokenProvider function and sets in tokenManager.\n        // In case of static token, it will simply resolve to static token.\n        this.loadToken = ()=>{\n            this.loadTokenPromise = new Promise(async (resolve, reject)=>{\n                if (this.type === 'static') {\n                    return resolve(this.token);\n                }\n                if (this.tokenProvider && typeof this.tokenProvider !== 'string') {\n                    try {\n                        this.token = await this.tokenProvider();\n                    } catch (e) {\n                        return reject(new Error(`Call to tokenProvider failed with message: ${e}`));\n                    }\n                    resolve(this.token);\n                }\n            });\n            return this.loadTokenPromise;\n        };\n        // Returns a current token\n        this.getToken = ()=>{\n            if (this.token) {\n                return this.token;\n            }\n            if (this.user && !this.token) {\n                return this.token;\n            }\n            throw new Error(`User token is not set. Either client.connectUser wasn't called or client.disconnect was called`);\n        };\n        this.isStatic = ()=>this.type === 'static';\n        this.loadTokenPromise = null;\n        this.secret = secret;\n        this.type = 'static';\n    }\n}\nconst getLocationHint = async (hintUrl = `https://hint.stream-io-video.com/`, timeout = 2000, maxAttempts = 3)=>{\n    const logger = getLogger([\n        'location-hint'\n    ]);\n    let attempt = 0;\n    let locationHint = 'ERR';\n    do {\n        const abortController = new AbortController();\n        const timeoutId = setTimeout(()=>abortController.abort(), timeout);\n        try {\n            const response = await fetch(hintUrl, {\n                method: 'HEAD',\n                signal: abortController.signal\n            });\n            const awsPop = response.headers.get('x-amz-cf-pop') || 'ERR';\n            logger('debug', `Location header: ${awsPop}`);\n            locationHint = awsPop.substring(0, 3); // AMS1-P2 -> AMS\n        } catch (e) {\n            logger('warn', `Failed to get location hint from ${hintUrl}`, e);\n            locationHint = 'ERR';\n        } finally{\n            clearTimeout(timeoutId);\n        }\n    }while (locationHint === 'ERR' && ++attempt < maxAttempts);\n    return locationHint;\n};\nclass StreamClient {\n    /**\n     * Initialize a client.\n     *\n     * @param {string} key - the api key\n     * @param {StreamClientOptions} [options] - additional options, here you can pass custom options to axios instance\n     * @param {string} [options.secret] - the api secret\n     * @param {boolean} [options.browser] - enforce the client to be in browser mode\n     * @param {boolean} [options.warmUp] - default to false, if true, client will open a connection as soon as possible to speed up following requests\n     * @param {Logger} [options.Logger] - custom logger\n     * @param {number} [options.timeout] - default to 3000\n     * @param {httpsAgent} [options.httpsAgent] - custom httpsAgent, in node it's default to https.agent()\n     */ constructor(key, options){\n        this.listeners = {};\n        this.getAuthType = ()=>{\n            return this.anonymous ? 'anonymous' : 'jwt';\n        };\n        this.setBaseURL = (baseURL)=>{\n            this.baseURL = baseURL;\n            this.wsBaseURL = this.baseURL.replace('http', 'ws').replace(':3030', ':8800');\n        };\n        this.getLocationHint = async (hintUrl, timeout)=>{\n            const hint = await this.locationHint;\n            if (!hint || hint === 'ERR') {\n                this.locationHint = getLocationHint(hintUrl ?? this.options.locationHintUrl, timeout ?? this.options.locationHintTimeout);\n                return this.locationHint;\n            }\n            return hint;\n        };\n        this._getConnectionID = ()=>this.wsConnection?.connectionID;\n        this._hasConnectionID = ()=>Boolean(this._getConnectionID());\n        /**\n         * connectUser - Set the current user and open a WebSocket connection\n         *\n         * @param user Data about this user. IE {name: \"john\"}\n         * @param {TokenOrProvider} userTokenOrProvider Token or provider\n         *\n         * @return {ConnectAPIResponse} Returns a promise that resolves when the connection is setup\n         */ this.connectUser = async (user, userTokenOrProvider)=>{\n            if (!user.id) {\n                throw new Error('The \"id\" field on the user is missing');\n            }\n            /**\n             * Calling connectUser multiple times is potentially the result of a  bad integration, however,\n             * If the user id remains the same we don't throw error\n             */ if (this.userID === user.id && this.setUserPromise) {\n                this.logger('warn', 'Consecutive calls to connectUser is detected, ideally you should only call this function once in your app.');\n                return this.setUserPromise;\n            }\n            if (this.userID) {\n                throw new Error('Use client.disconnect() before trying to connect as a different user. connectUser was called twice.');\n            }\n            if ((this._isUsingServerAuth() || this.node) && !this.options.allowServerSideConnect) {\n                this.logger('warn', 'Please do not use connectUser server side. Use our @stream-io/node-sdk instead: https://getstream.io/video/docs/api/');\n            }\n            // we generate the client id client side\n            this.userID = user.id;\n            this.anonymous = false;\n            const setTokenPromise = this._setToken(user, userTokenOrProvider, this.anonymous);\n            this._setUser(user);\n            const wsPromise = this.openConnection();\n            this.setUserPromise = Promise.all([\n                setTokenPromise,\n                wsPromise\n            ]).then((result)=>result[1]);\n            try {\n                addConnectionEventListeners(this.updateNetworkConnectionStatus);\n                return await this.setUserPromise;\n            } catch (err) {\n                if (this.persistUserOnConnectionFailure) {\n                    // cleanup client to allow the user to retry connectUser again\n                    this.closeConnection();\n                } else {\n                    this.disconnectUser();\n                }\n                throw err;\n            }\n        };\n        this._setToken = (user, userTokenOrProvider, isAnonymous)=>this.tokenManager.setTokenOrProvider(userTokenOrProvider, user, isAnonymous);\n        this._setUser = (user)=>{\n            /**\n             * This one is used by the frontend. This is a copy of the current user object stored on backend.\n             * It contains reserved properties and own user properties which are not present in `this._user`.\n             */ this.user = user;\n            this.userID = user.id;\n            // this one is actually used for requests. This is a copy of current user provided to `connectUser` function.\n            this._user = {\n                ...user\n            };\n        };\n        /**\n         * Disconnects the websocket connection, without removing the user set on client.\n         * client.closeConnection will not trigger default auto-retry mechanism for reconnection. You need\n         * to call client.openConnection to reconnect to websocket.\n         *\n         * This is mainly useful on mobile side. You can only receive push notifications\n         * if you don't have active websocket connection.\n         * So when your app goes to background, you can call `client.closeConnection`.\n         * And when app comes back to foreground, call `client.openConnection`.\n         *\n         * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming succesful disconnection.\n         *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n         */ this.closeConnection = async (timeout)=>{\n            await this.wsConnection?.disconnect(timeout);\n        };\n        /**\n         * Creates a new WebSocket connection with the current user. Returns empty promise, if there is an active connection\n         */ this.openConnection = async ()=>{\n            if (!this.userID) {\n                throw Error('UserWithId is not set on client, use client.connectUser or client.connectAnonymousUser instead');\n            }\n            const wsPromise = this.wsPromiseSafe?.();\n            if (this.wsConnection?.isConnecting && wsPromise) {\n                this.logger('info', 'client:openConnection() - connection already in progress');\n                return await wsPromise;\n            }\n            if (this.wsConnection?.isHealthy && this._hasConnectionID()) {\n                this.logger('info', 'client:openConnection() - openConnection called twice, healthy connection already exists');\n                return;\n            }\n            await this._setupConnectionIdPromise();\n            this.clientID = `${this.userID}--${randomId()}`;\n            const newWsPromise = this.connect();\n            this.wsPromiseSafe = makeSafePromise(newWsPromise);\n            return await newWsPromise;\n        };\n        /**\n         * Disconnects the websocket and removes the user from client.\n         *\n         * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming successful disconnection.\n         *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n         */ this.disconnectUser = async (timeout)=>{\n            this.logger('info', 'client:disconnect() - Disconnecting the client');\n            // remove the user specific fields\n            delete this.user;\n            delete this._user;\n            delete this.userID;\n            this.anonymous = false;\n            await this.closeConnection(timeout);\n            removeConnectionEventListeners(this.updateNetworkConnectionStatus);\n            this.tokenManager.reset();\n            this.connectionIdPromiseSafe = undefined;\n            this.rejectConnectionId = undefined;\n            this.resolveConnectionId = undefined;\n        };\n        this.connectGuestUser = async (user)=>{\n            this.guestUserCreatePromise = this.doAxiosRequest('post', '/guest', {\n                user\n            }, {\n                publicEndpoint: true\n            });\n            const response = await this.guestUserCreatePromise;\n            this.guestUserCreatePromise.finally(()=>this.guestUserCreatePromise = undefined);\n            return this.connectUser(response.user, response.access_token);\n        };\n        /**\n         * connectAnonymousUser - Set an anonymous user and open a WebSocket connection\n         */ this.connectAnonymousUser = async (user, tokenOrProvider)=>{\n            addConnectionEventListeners(this.updateNetworkConnectionStatus);\n            await this._setupConnectionIdPromise();\n            this.anonymous = true;\n            await this._setToken(user, tokenOrProvider, this.anonymous);\n            this._setUser(user);\n            // some endpoints require a connection_id to be resolved.\n            // as anonymous users aren't allowed to open WS connections, we just\n            // resolve the connection_id here.\n            this.resolveConnectionId?.();\n        };\n        /**\n         * on - Listen to events on all channels and users your watching\n         *\n         * client.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n         *\n         * @param eventName The event type to listen for (optional)\n         * @param callback The callback to call\n         *\n         * @return  Returns a function which, when called, unsubscribes the event handler.\n         */ this.on = (eventName, callback)=>{\n            if (!this.listeners[eventName]) {\n                this.listeners[eventName] = [];\n            }\n            this.logger('debug', `Adding listener for ${eventName} event`);\n            this.listeners[eventName]?.push(callback);\n            return ()=>{\n                this.off(eventName, callback);\n            };\n        };\n        /**\n         * off - Remove the event handler\n         */ this.off = (eventName, callback)=>{\n            if (!this.listeners[eventName]) {\n                this.listeners[eventName] = [];\n            }\n            this.logger('debug', `Removing listener for ${eventName} event`);\n            this.listeners[eventName] = this.listeners[eventName]?.filter((value)=>value !== callback);\n        };\n        /**\n         * sets up the this.connectionIdPromise\n         */ this._setupConnectionIdPromise = ()=>{\n            /** a promise that is resolved once connection id is set */ this.connectionIdPromiseSafe = makeSafePromise(new Promise((resolve, reject)=>{\n                this.resolveConnectionId = resolve;\n                this.rejectConnectionId = reject;\n            }));\n        };\n        this._logApiRequest = (type, url, data, config)=>{\n            this.logger('trace', `client: ${type} - Request - ${url}`, {\n                payload: data,\n                config\n            });\n        };\n        this._logApiResponse = (type, url, response)=>{\n            this.logger('trace', `client:${type} - Response - url: ${url} > status ${response.status}`, {\n                response\n            });\n        };\n        this._logApiError = (type, url, error)=>{\n            this.logger('error', `client:${type} - Error - url: ${url}`, {\n                url,\n                error\n            });\n        };\n        this.doAxiosRequest = async (type, url, data, options = {})=>{\n            if (!options.publicEndpoint) {\n                await Promise.all([\n                    this.tokenManager.tokenReady(),\n                    this.guestUserCreatePromise\n                ]);\n                // we need to wait for presence of connection id before making requests\n                try {\n                    await this.connectionIdPromise;\n                } catch (e) {\n                    // in case connection id was rejected\n                    // reconnection maybe in progress\n                    // we can wait for healthy connection to resolve, which rejects when 15s timeout is reached\n                    await this.wsConnection?._waitForHealthy();\n                    await this.connectionIdPromise;\n                }\n            }\n            const requestConfig = this._enrichAxiosOptions(options);\n            try {\n                let response;\n                this._logApiRequest(type, url, data, requestConfig);\n                switch(type){\n                    case 'get':\n                        response = await this.axiosInstance.get(url, requestConfig);\n                        break;\n                    case 'delete':\n                        response = await this.axiosInstance.delete(url, requestConfig);\n                        break;\n                    case 'post':\n                        response = await this.axiosInstance.post(url, data, requestConfig);\n                        break;\n                    case 'put':\n                        response = await this.axiosInstance.put(url, data, requestConfig);\n                        break;\n                    case 'patch':\n                        response = await this.axiosInstance.patch(url, data, requestConfig);\n                        break;\n                    case 'options':\n                        response = await this.axiosInstance.options(url, requestConfig);\n                        break;\n                    default:\n                        throw new Error('Invalid request type');\n                }\n                this._logApiResponse(type, url, response);\n                this.consecutiveFailures = 0;\n                return this.handleResponse(response);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            } catch (e /**TODO: generalize error types  */ ) {\n                e.client_request_id = requestConfig.headers?.['x-client-request-id'];\n                this.consecutiveFailures += 1;\n                if (e.response) {\n                    this._logApiError(type, url, e.response);\n                    /** connection_fallback depends on this token expiration logic */ if (e.response.data.code === KnownCodes.TOKEN_EXPIRED && !this.tokenManager.isStatic()) {\n                        if (this.consecutiveFailures > 1) {\n                            await sleep(retryInterval(this.consecutiveFailures));\n                        }\n                        await this.tokenManager.loadToken();\n                        return await this.doAxiosRequest(type, url, data, options);\n                    }\n                    return this.handleResponse(e.response);\n                } else {\n                    this._logApiError(type, url, e);\n                    // eslint-disable-next-line no-throw-literal\n                    throw e;\n                }\n            }\n        };\n        this.get = (url, params)=>{\n            return this.doAxiosRequest('get', url, null, {\n                params\n            });\n        };\n        this.put = (url, data, params)=>{\n            return this.doAxiosRequest('put', url, data, {\n                params\n            });\n        };\n        this.post = (url, data, params)=>{\n            return this.doAxiosRequest('post', url, data, {\n                params\n            });\n        };\n        this.patch = (url, data, params)=>{\n            return this.doAxiosRequest('patch', url, data, {\n                params\n            });\n        };\n        this.delete = (url, params)=>{\n            return this.doAxiosRequest('delete', url, null, {\n                params\n            });\n        };\n        this.errorFromResponse = (response)=>{\n            const { data, status } = response;\n            const err = new ErrorFromResponse();\n            err.message = `Stream error code ${data.code}: ${data.message}`;\n            err.code = data.code;\n            err.unrecoverable = data.unrecoverable;\n            err.response = response;\n            err.status = status;\n            return err;\n        };\n        this.handleResponse = (response)=>{\n            const data = response.data;\n            if (isErrorResponse(response)) {\n                throw this.errorFromResponse(response);\n            }\n            return data;\n        };\n        this.dispatchEvent = (event)=>{\n            this.logger('debug', `Dispatching event: ${event.type}`, event);\n            if (!this.listeners) return;\n            // call generic listeners\n            for (const listener of this.listeners.all || []){\n                listener(event);\n            }\n            // call type specific listeners\n            for (const listener of this.listeners[event.type] || []){\n                listener(event);\n            }\n        };\n        /**\n         * @private\n         */ this.connect = async ()=>{\n            if (!this.userID || !this._user) {\n                throw Error('Call connectUser or connectAnonymousUser before starting the connection');\n            }\n            if (!this.wsBaseURL) throw Error('Websocket base url not set');\n            if (!this.clientID) throw Error('clientID is not set');\n            // The StableWSConnection handles all the reconnection logic.\n            this.wsConnection = new StableWSConnection(this);\n            this.logger('info', 'StreamClient.connect: this.wsConnection.connect()');\n            return await this.wsConnection.connect(this.defaultWSTimeout);\n        };\n        this.getUserAgent = ()=>{\n            const version = \"1.15.1\";\n            return this.userAgent || `stream-video-javascript-client-${this.node ? 'node' : 'browser'}-${version}`;\n        };\n        this.setUserAgent = (userAgent)=>{\n            this.userAgent = userAgent;\n        };\n        /**\n         * _isUsingServerAuth - Returns true if we're using server side auth\n         */ this._isUsingServerAuth = ()=>!!this.secret;\n        this._enrichAxiosOptions = (options = {\n            params: {},\n            headers: {},\n            config: {}\n        })=>{\n            const token = options.publicEndpoint && !this.user ? undefined : this._getToken();\n            const authorization = token ? {\n                Authorization: token\n            } : undefined;\n            if (!options.headers?.['x-client-request-id']) {\n                options.headers = {\n                    ...options.headers,\n                    'x-client-request-id': randomId()\n                };\n            }\n            return {\n                params: {\n                    user_id: this.userID,\n                    connection_id: this._getConnectionID(),\n                    api_key: this.key,\n                    ...options.params\n                },\n                headers: {\n                    ...authorization,\n                    'stream-auth-type': options.publicEndpoint && !this.user ? 'anonymous' : this.getAuthType(),\n                    'X-Stream-Client': this.getUserAgent(),\n                    ...options.headers\n                },\n                ...options.config,\n                ...this.options.axiosRequestConfig\n            };\n        };\n        this._getToken = ()=>{\n            if (!this.tokenManager) return null;\n            return this.tokenManager.getToken();\n        };\n        this.updateNetworkConnectionStatus = (event)=>{\n            if (event.type === 'offline') {\n                this.logger('debug', 'device went offline');\n                this.dispatchEvent({\n                    type: 'network.changed',\n                    online: false\n                });\n            } else if (event.type === 'online') {\n                this.logger('debug', 'device went online');\n                this.dispatchEvent({\n                    type: 'network.changed',\n                    online: true\n                });\n            }\n        };\n        // set the key\n        this.key = key;\n        // set the secret\n        this.secret = options?.secret;\n        // set the options... and figure out defaults...\n        const inputOptions = options ? options : {\n            browser: \"undefined\" !== 'undefined'\n        };\n        this.browser = inputOptions.browser || \"undefined\" !== 'undefined';\n        this.node = !this.browser;\n        if (this.browser) {\n            this.locationHint = getLocationHint(options?.locationHintUrl, options?.locationHintTimeout, options?.locationHintMaxAttempts);\n        }\n        this.options = {\n            timeout: 5000,\n            withCredentials: false,\n            ...inputOptions\n        };\n        if (this.node && !this.options.httpsAgent) {\n            this.options.httpsAgent = new (https__WEBPACK_IMPORTED_MODULE_4___default().Agent)({\n                keepAlive: true,\n                keepAliveMsecs: 3000\n            });\n        }\n        this.setBaseURL(this.options.baseURL || 'https://video.stream-io-api.com/video');\n        this.axiosInstance = axios__WEBPACK_IMPORTED_MODULE_30__[\"default\"].create({\n            ...this.options,\n            baseURL: this.baseURL\n        });\n        // WS connection is initialized when setUser is called\n        this.wsConnection = null;\n        this.wsPromiseSafe = null;\n        this.setUserPromise = null;\n        // mapping between channel groups and configs\n        this.anonymous = false;\n        this.persistUserOnConnectionFailure = this.options?.persistUserOnConnectionFailure;\n        // If it is a server-side client, then lets initialize the tokenManager, since token will be\n        // generated from secret.\n        this.tokenManager = new TokenManager(this.secret);\n        this.consecutiveFailures = 0;\n        this.defaultWSTimeout = 15000;\n        this.logger = isFunction(inputOptions.logger) ? inputOptions.logger : ()=>null;\n    }\n    get connectionIdPromise() {\n        return this.connectionIdPromiseSafe?.();\n    }\n    get isConnectionIsPromisePending() {\n        return this.connectionIdPromiseSafe?.checkPending() ?? false;\n    }\n    get wsPromise() {\n        return this.wsPromiseSafe?.();\n    }\n}\n/**\n * A `StreamVideoClient` instance lets you communicate with our API, and authenticate users.\n */ class StreamVideoClient {\n    constructor(apiKeyOrArgs, opts){\n        this.logLevel = 'warn';\n        this.eventHandlersToUnregister = [];\n        this.connectionConcurrencyTag = Symbol('connectionConcurrencyTag');\n        /**\n         * Connects the given user to the client.\n         * Only one user can connect at a time, if you want to change users, call `disconnectUser` before connecting a new user.\n         * If the connection is successful, the connected user [state variable](#readonlystatestore) will be updated accordingly.\n         *\n         * @param user the user to connect.\n         * @param token a token or a function that returns a token.\n         */ this.connectUser = async (user, token)=>{\n            if (user.type === 'anonymous') {\n                user.id = '!anon';\n                return this.connectAnonymousUser(user, token);\n            }\n            let connectUser = ()=>{\n                return this.streamClient.connectUser(user, token);\n            };\n            if (user.type === 'guest') {\n                connectUser = async ()=>{\n                    return this.streamClient.connectGuestUser(user);\n                };\n            }\n            const connectUserResponse = await withoutConcurrency(this.connectionConcurrencyTag, ()=>connectUser());\n            // connectUserResponse will be void if connectUser called twice for the same user\n            if (connectUserResponse?.me) {\n                this.writeableStateStore.setConnectedUser(connectUserResponse.me);\n            }\n            this.eventHandlersToUnregister.push(this.on('connection.changed', (event)=>{\n                if (event.online) {\n                    const callsToReWatch = this.writeableStateStore.calls.filter((call)=>call.watching).map((call)=>call.cid);\n                    this.logger('info', `Rewatching calls after connection changed ${callsToReWatch.join(', ')}`);\n                    if (callsToReWatch.length > 0) {\n                        this.queryCalls({\n                            watch: true,\n                            filter_conditions: {\n                                cid: {\n                                    $in: callsToReWatch\n                                }\n                            },\n                            sort: [\n                                {\n                                    field: 'cid',\n                                    direction: 1\n                                }\n                            ]\n                        }).catch((err)=>{\n                            this.logger('error', 'Failed to re-watch calls', err);\n                        });\n                    }\n                }\n            }));\n            this.eventHandlersToUnregister.push(this.on('call.created', (event)=>{\n                const { call, members } = event;\n                if (user.id === call.created_by.id) {\n                    this.logger('warn', 'Received `call.created` sent by the current user');\n                    return;\n                }\n                this.logger('info', `New call created and registered: ${call.cid}`);\n                const newCall = new Call({\n                    streamClient: this.streamClient,\n                    type: call.type,\n                    id: call.id,\n                    members,\n                    clientStore: this.writeableStateStore\n                });\n                newCall.state.updateFromCallResponse(call);\n                this.writeableStateStore.registerCall(newCall);\n            }));\n            this.eventHandlersToUnregister.push(this.on('call.ring', async (event)=>{\n                const { call, members } = event;\n                if (user.id === call.created_by.id) {\n                    this.logger('debug', 'Received `call.ring` sent by the current user so ignoring the event');\n                    return;\n                }\n                // if `call.created` was received before `call.ring`.\n                // the client already has the call instance and we just need to update the state\n                const theCall = this.writeableStateStore.findCall(call.type, call.id);\n                if (theCall) {\n                    await theCall.updateFromRingingEvent(event);\n                } else {\n                    // if client doesn't have the call instance, create the instance and fetch the latest state\n                    // Note: related - we also have onRingingCall method to handle this case from push notifications\n                    const newCallInstance = new Call({\n                        streamClient: this.streamClient,\n                        type: call.type,\n                        id: call.id,\n                        members,\n                        clientStore: this.writeableStateStore,\n                        ringing: true\n                    });\n                    await newCallInstance.get();\n                }\n            }));\n            return connectUserResponse;\n        };\n        /**\n         * Disconnects the currently connected user from the client.\n         *\n         * If the connection is successfully disconnected, the connected user [state variable](#readonlystatestore) will be updated accordingly\n         *\n         * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming successful disconnection.\n         *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n         */ this.disconnectUser = async (timeout)=>{\n            if (!this.streamClient.user) {\n                return;\n            }\n            const userId = this.streamClient.user?.id;\n            const apiKey = this.streamClient.key;\n            const disconnectUser = ()=>this.streamClient.disconnectUser(timeout);\n            await withoutConcurrency(this.connectionConcurrencyTag, ()=>disconnectUser());\n            if (userId) {\n                StreamVideoClient._instanceMap.delete(apiKey + userId);\n            }\n            this.eventHandlersToUnregister.forEach((unregister)=>unregister());\n            this.eventHandlersToUnregister = [];\n            this.writeableStateStore.setConnectedUser(undefined);\n        };\n        /**\n         * You can subscribe to WebSocket events provided by the API.\n         * To remove a subscription, call the `off` method or, execute the returned unsubscribe function.\n         * Please note that subscribing to WebSocket events is an advanced use-case, for most use-cases it should be enough to watch for changes in the reactive [state store](#readonlystatestore).\n         *\n         * @param eventName the event name or 'all'.\n         * @param callback the callback which will be called when the event is emitted.\n         * @returns an unsubscribe function.\n         */ this.on = (eventName, callback)=>{\n            return this.streamClient.on(eventName, callback);\n        };\n        /**\n         * Remove subscription for WebSocket events that were created by the `on` method.\n         *\n         * @param eventName the event name.\n         * @param callback the callback which was passed to the `on` method.\n         */ this.off = (eventName, callback)=>{\n            return this.streamClient.off(eventName, callback);\n        };\n        /**\n         * Creates a new call.\n         *\n         * @param type the type of the call.\n         * @param id the id of the call.\n         */ this.call = (type, id)=>{\n            return new Call({\n                streamClient: this.streamClient,\n                id: id,\n                type: type,\n                clientStore: this.writeableStateStore\n            });\n        };\n        /**\n         * Creates a new guest user with the given data.\n         *\n         * @param data the data for the guest user.\n         */ this.createGuestUser = async (data)=>{\n            return this.streamClient.doAxiosRequest('post', '/guest', data, {\n                publicEndpoint: true\n            });\n        };\n        /**\n         * Will query the API for calls matching the given filters.\n         *\n         * @param data the query data.\n         */ this.queryCalls = async (data = {})=>{\n            const response = await this.streamClient.post('/calls', data);\n            const calls = [];\n            for (const c of response.calls){\n                const call = new Call({\n                    streamClient: this.streamClient,\n                    id: c.call.id,\n                    type: c.call.type,\n                    members: c.members,\n                    ownCapabilities: c.own_capabilities,\n                    watching: data.watch,\n                    clientStore: this.writeableStateStore\n                });\n                call.state.updateFromCallResponse(c.call);\n                await call.applyDeviceConfig(c.call.settings, false);\n                if (data.watch) {\n                    this.writeableStateStore.registerCall(call);\n                }\n                calls.push(call);\n            }\n            return {\n                ...response,\n                calls: calls\n            };\n        };\n        /**\n         * Retrieve the list of available call statistics reports matching a particular condition.\n         *\n         * @param data Filter and sort conditions for retrieving available call report summaries.\n         * @returns List with summary of available call reports matching the condition.\n         */ this.queryCallStats = async (data = {})=>{\n            return this.streamClient.post(`/call/stats`, data);\n        };\n        /**\n         * Retrieve the list of available reports aggregated from the call stats.\n         *\n         * @param data Specify filter conditions like from and to (within last 30 days) and the report types\n         * @returns Requested reports with (mostly) raw daily data for each report type requested\n         */ this.queryAggregateCallStats = async (data = {})=>{\n            return this.streamClient.post(`/stats`, data);\n        };\n        /**\n         * Returns a list of available data centers available for hosting calls.\n         */ this.edges = async ()=>{\n            return this.streamClient.get(`/edges`);\n        };\n        /**\n         * addDevice - Adds a push device for a user.\n         *\n         * @param {string} id the device id\n         * @param {string} push_provider the push provider name (eg. apn, firebase)\n         * @param {string} push_provider_name user provided push provider name\n         * @param {string} [userID] the user id (defaults to current user)\n         * @param {boolean} [voip_token] enables use of VoIP token for push notifications on iOS platform\n         */ this.addDevice = async (id, push_provider, push_provider_name, userID, voip_token)=>{\n            return await this.streamClient.post('/devices', {\n                id,\n                push_provider,\n                voip_token,\n                ...userID != null ? {\n                    user_id: userID\n                } : {},\n                ...push_provider_name != null ? {\n                    push_provider_name\n                } : {}\n            });\n        };\n        /**\n         * addDevice - Adds a push device for a user.\n         *\n         * @param {string} id the device id\n         * @param {string} push_provider the push provider name (eg. apn, firebase)\n         * @param {string} push_provider_name user provided push provider name\n         * @param {string} [userID] the user id (defaults to current user)\n         */ this.addVoipDevice = async (id, push_provider, push_provider_name, userID)=>{\n            return await this.addDevice(id, push_provider, push_provider_name, userID, true);\n        };\n        /**\n         * getDevices - Returns the devices associated with a current user\n         * @param {string} [userID] User ID. Only works on serverside\n         */ this.getDevices = async (userID)=>{\n            return await this.streamClient.get('/devices', userID ? {\n                user_id: userID\n            } : {});\n        };\n        /**\n         * removeDevice - Removes the device with the given id.\n         *\n         * @param {string} id The device id\n         * @param {string} [userID] The user id. Only specify this for serverside requests\n         */ this.removeDevice = async (id, userID)=>{\n            return await this.streamClient.delete('/devices', {\n                id,\n                ...userID ? {\n                    user_id: userID\n                } : {}\n            });\n        };\n        /**\n         * A callback that can be used to create ringing calls from push notifications. If the call already exists, it will do nothing.\n         * @param call_cid\n         * @returns\n         */ this.onRingingCall = async (call_cid)=>{\n            // if we find the call and is already ringing, we don't need to create a new call\n            // as client would have received the call.ring state because the app had WS alive when receiving push notifications\n            let call = this.state.calls.find((c)=>c.cid === call_cid && c.ringing);\n            if (!call) {\n                // if not it means that WS is not alive when receiving the push notifications and we need to fetch the call\n                const [callType, callId] = call_cid.split(':');\n                call = new Call({\n                    streamClient: this.streamClient,\n                    type: callType,\n                    id: callId,\n                    clientStore: this.writeableStateStore,\n                    ringing: true\n                });\n                await call.get();\n            }\n            return call;\n        };\n        /**\n         * Connects the given anonymous user to the client.\n         *\n         * @param user the user to connect.\n         * @param tokenOrProvider a token or a function that returns a token.\n         */ this.connectAnonymousUser = async (user, tokenOrProvider)=>{\n            const connectAnonymousUser = ()=>this.streamClient.connectAnonymousUser(user, tokenOrProvider);\n            return await withoutConcurrency(this.connectionConcurrencyTag, ()=>connectAnonymousUser());\n        };\n        let logger = logToConsole;\n        let logLevel = 'warn';\n        if (typeof apiKeyOrArgs === 'string') {\n            logLevel = opts?.logLevel || logLevel;\n            logger = opts?.logger || logger;\n            if (opts?.enableTimerWorker) enableTimerWorker();\n        } else {\n            logLevel = apiKeyOrArgs.options?.logLevel || logLevel;\n            logger = apiKeyOrArgs.options?.logger || logger;\n            if (apiKeyOrArgs.options?.enableTimerWorker) enableTimerWorker();\n        }\n        setLogger(logger, logLevel);\n        this.logger = getLogger([\n            'client'\n        ]);\n        const coordinatorLogger = getLogger([\n            'coordinator'\n        ]);\n        if (typeof apiKeyOrArgs === 'string') {\n            this.streamClient = new StreamClient(apiKeyOrArgs, {\n                persistUserOnConnectionFailure: true,\n                ...opts,\n                logLevel,\n                logger: coordinatorLogger\n            });\n        } else {\n            this.streamClient = new StreamClient(apiKeyOrArgs.apiKey, {\n                persistUserOnConnectionFailure: true,\n                ...apiKeyOrArgs.options,\n                logLevel,\n                logger: coordinatorLogger\n            });\n            const sdkInfo = getSdkInfo();\n            if (sdkInfo) {\n                const sdkName = SdkType[sdkInfo.type].toLowerCase();\n                const sdkVersion = `${sdkInfo.major}.${sdkInfo.minor}.${sdkInfo.patch}`;\n                const userAgent = this.streamClient.getUserAgent();\n                this.streamClient.setUserAgent(`${userAgent}-video-${sdkName}-sdk-${sdkVersion}`);\n            }\n        }\n        this.writeableStateStore = new StreamVideoWriteableStateStore();\n        this.readOnlyStateStore = new StreamVideoReadOnlyStateStore(this.writeableStateStore);\n        if (typeof apiKeyOrArgs !== 'string') {\n            const user = apiKeyOrArgs.user;\n            const token = apiKeyOrArgs.token || apiKeyOrArgs.tokenProvider;\n            if (user) {\n                let id = user.id;\n                if (user.type === 'anonymous') {\n                    id = '!anon';\n                }\n                if (id) {\n                    if (StreamVideoClient._instanceMap.has(apiKeyOrArgs.apiKey + id)) {\n                        this.logger('warn', `A StreamVideoClient already exists for ${user.type === 'anonymous' ? 'an anonymous user' : id}; Prefer using getOrCreateInstance method`);\n                    }\n                    user.id = id;\n                    StreamVideoClient._instanceMap.set(apiKeyOrArgs.apiKey + id, this);\n                }\n                this.connectUser(user, token).catch((err)=>{\n                    this.logger('error', 'Failed to connect', err);\n                });\n            }\n        }\n    }\n    static getOrCreateInstance(args) {\n        const user = args.user;\n        if (!user.id) {\n            if (args.user.type === 'anonymous') {\n                user.id = '!anon';\n            } else {\n                throw new Error('User ID is required for a non-anonymous user');\n            }\n        }\n        if (!args.token && !args.tokenProvider) {\n            if (args.user.type !== 'anonymous' && args.user.type !== 'guest') {\n                throw new Error('TokenProvider or token is required for a user that is not a guest or anonymous');\n            }\n        }\n        let instance = StreamVideoClient._instanceMap.get(args.apiKey + user.id);\n        if (!instance) {\n            instance = new StreamVideoClient({\n                ...args,\n                user\n            });\n        }\n        return instance;\n    }\n    /**\n     * Return the reactive state store, use this if you want to be notified about changes to the client state\n     */ get state() {\n        return this.readOnlyStateStore;\n    }\n}\nStreamVideoClient._instanceMap = new Map();\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stream-io/video-client/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stream-io/transliterate/dist/index.modern.js":
/*!********************************************************************!*\
  !*** ./node_modules/@stream-io/transliterate/dist/index.modern.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ h)\n/* harmony export */ });\n/* harmony import */ var lodash_deburr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash.deburr */ \"(ssr)/./node_modules/lodash.deburr/index.js\");\nfunction t(){return t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var o=arguments[t];for(var a in o)Object.prototype.hasOwnProperty.call(o,a)&&(e[a]=o[a])}return e},t.apply(this,arguments)}var o=/[|\\\\{}()[\\]^$+*?.]/g,a=function(e){if(\"string\"!=typeof e)throw new TypeError(\"Expected a string\");return e.replace(o,\"\\\\$&\")};const s=[[\"ß\",\"ss\"],[\"ẞ\",\"Ss\"],[\"ä\",\"ae\"],[\"Ä\",\"Ae\"],[\"ö\",\"oe\"],[\"Ö\",\"Oe\"],[\"ü\",\"ue\"],[\"Ü\",\"Ue\"],[\"À\",\"A\"],[\"Á\",\"A\"],[\"Â\",\"A\"],[\"Ã\",\"A\"],[\"Ä\",\"Ae\"],[\"Å\",\"A\"],[\"Æ\",\"AE\"],[\"Ç\",\"C\"],[\"È\",\"E\"],[\"É\",\"E\"],[\"Ê\",\"E\"],[\"Ë\",\"E\"],[\"Ì\",\"I\"],[\"Í\",\"I\"],[\"Î\",\"I\"],[\"Ï\",\"I\"],[\"Ð\",\"D\"],[\"Ñ\",\"N\"],[\"Ò\",\"O\"],[\"Ó\",\"O\"],[\"Ô\",\"O\"],[\"Õ\",\"O\"],[\"Ö\",\"Oe\"],[\"Ő\",\"O\"],[\"Ø\",\"O\"],[\"Ù\",\"U\"],[\"Ú\",\"U\"],[\"Û\",\"U\"],[\"Ü\",\"Ue\"],[\"Ű\",\"U\"],[\"Ý\",\"Y\"],[\"Þ\",\"TH\"],[\"ß\",\"ss\"],[\"à\",\"a\"],[\"á\",\"a\"],[\"â\",\"a\"],[\"ã\",\"a\"],[\"ä\",\"ae\"],[\"å\",\"a\"],[\"æ\",\"ae\"],[\"ç\",\"c\"],[\"è\",\"e\"],[\"é\",\"e\"],[\"ê\",\"e\"],[\"ë\",\"e\"],[\"ì\",\"i\"],[\"í\",\"i\"],[\"î\",\"i\"],[\"ï\",\"i\"],[\"ð\",\"d\"],[\"ñ\",\"n\"],[\"ò\",\"o\"],[\"ó\",\"o\"],[\"ô\",\"o\"],[\"õ\",\"o\"],[\"ö\",\"oe\"],[\"ő\",\"o\"],[\"ø\",\"o\"],[\"ù\",\"u\"],[\"ú\",\"u\"],[\"û\",\"u\"],[\"ü\",\"ue\"],[\"ű\",\"u\"],[\"ý\",\"y\"],[\"þ\",\"th\"],[\"ÿ\",\"y\"],[\"ẞ\",\"SS\"],[\"à\",\"a\"],[\"À\",\"A\"],[\"á\",\"a\"],[\"Á\",\"A\"],[\"â\",\"a\"],[\"Â\",\"A\"],[\"ã\",\"a\"],[\"Ã\",\"A\"],[\"è\",\"e\"],[\"È\",\"E\"],[\"é\",\"e\"],[\"É\",\"E\"],[\"ê\",\"e\"],[\"Ê\",\"E\"],[\"ì\",\"i\"],[\"Ì\",\"I\"],[\"í\",\"i\"],[\"Í\",\"I\"],[\"ò\",\"o\"],[\"Ò\",\"O\"],[\"ó\",\"o\"],[\"Ó\",\"O\"],[\"ô\",\"o\"],[\"Ô\",\"O\"],[\"õ\",\"o\"],[\"Õ\",\"O\"],[\"ù\",\"u\"],[\"Ù\",\"U\"],[\"ú\",\"u\"],[\"Ú\",\"U\"],[\"ý\",\"y\"],[\"Ý\",\"Y\"],[\"ă\",\"a\"],[\"Ă\",\"A\"],[\"Đ\",\"D\"],[\"đ\",\"d\"],[\"ĩ\",\"i\"],[\"Ĩ\",\"I\"],[\"ũ\",\"u\"],[\"Ũ\",\"U\"],[\"ơ\",\"o\"],[\"Ơ\",\"O\"],[\"ư\",\"u\"],[\"Ư\",\"U\"],[\"ạ\",\"a\"],[\"Ạ\",\"A\"],[\"ả\",\"a\"],[\"Ả\",\"A\"],[\"ấ\",\"a\"],[\"Ấ\",\"A\"],[\"ầ\",\"a\"],[\"Ầ\",\"A\"],[\"ẩ\",\"a\"],[\"Ẩ\",\"A\"],[\"ẫ\",\"a\"],[\"Ẫ\",\"A\"],[\"ậ\",\"a\"],[\"Ậ\",\"A\"],[\"ắ\",\"a\"],[\"Ắ\",\"A\"],[\"ằ\",\"a\"],[\"Ằ\",\"A\"],[\"ẳ\",\"a\"],[\"Ẳ\",\"A\"],[\"ẵ\",\"a\"],[\"Ẵ\",\"A\"],[\"ặ\",\"a\"],[\"Ặ\",\"A\"],[\"ẹ\",\"e\"],[\"Ẹ\",\"E\"],[\"ẻ\",\"e\"],[\"Ẻ\",\"E\"],[\"ẽ\",\"e\"],[\"Ẽ\",\"E\"],[\"ế\",\"e\"],[\"Ế\",\"E\"],[\"ề\",\"e\"],[\"Ề\",\"E\"],[\"ể\",\"e\"],[\"Ể\",\"E\"],[\"ễ\",\"e\"],[\"Ễ\",\"E\"],[\"ệ\",\"e\"],[\"Ệ\",\"E\"],[\"ỉ\",\"i\"],[\"Ỉ\",\"I\"],[\"ị\",\"i\"],[\"Ị\",\"I\"],[\"ọ\",\"o\"],[\"Ọ\",\"O\"],[\"ỏ\",\"o\"],[\"Ỏ\",\"O\"],[\"ố\",\"o\"],[\"Ố\",\"O\"],[\"ồ\",\"o\"],[\"Ồ\",\"O\"],[\"ổ\",\"o\"],[\"Ổ\",\"O\"],[\"ỗ\",\"o\"],[\"Ỗ\",\"O\"],[\"ộ\",\"o\"],[\"Ộ\",\"O\"],[\"ớ\",\"o\"],[\"Ớ\",\"O\"],[\"ờ\",\"o\"],[\"Ờ\",\"O\"],[\"ở\",\"o\"],[\"Ở\",\"O\"],[\"ỡ\",\"o\"],[\"Ỡ\",\"O\"],[\"ợ\",\"o\"],[\"Ợ\",\"O\"],[\"ụ\",\"u\"],[\"Ụ\",\"U\"],[\"ủ\",\"u\"],[\"Ủ\",\"U\"],[\"ứ\",\"u\"],[\"Ứ\",\"U\"],[\"ừ\",\"u\"],[\"Ừ\",\"U\"],[\"ử\",\"u\"],[\"Ử\",\"U\"],[\"ữ\",\"u\"],[\"Ữ\",\"U\"],[\"ự\",\"u\"],[\"Ự\",\"U\"],[\"ỳ\",\"y\"],[\"Ỳ\",\"Y\"],[\"ỵ\",\"y\"],[\"Ỵ\",\"Y\"],[\"ỷ\",\"y\"],[\"Ỷ\",\"Y\"],[\"ỹ\",\"y\"],[\"Ỹ\",\"Y\"],[\"ء\",\"e\"],[\"آ\",\"a\"],[\"أ\",\"a\"],[\"ؤ\",\"w\"],[\"إ\",\"i\"],[\"ئ\",\"y\"],[\"ا\",\"a\"],[\"ب\",\"b\"],[\"ة\",\"t\"],[\"ت\",\"t\"],[\"ث\",\"th\"],[\"ج\",\"j\"],[\"ح\",\"h\"],[\"خ\",\"kh\"],[\"د\",\"d\"],[\"ذ\",\"dh\"],[\"ر\",\"r\"],[\"ز\",\"z\"],[\"س\",\"s\"],[\"ش\",\"sh\"],[\"ص\",\"s\"],[\"ض\",\"d\"],[\"ط\",\"t\"],[\"ظ\",\"z\"],[\"ع\",\"e\"],[\"غ\",\"gh\"],[\"ـ\",\"_\"],[\"ف\",\"f\"],[\"ق\",\"q\"],[\"ك\",\"k\"],[\"ل\",\"l\"],[\"م\",\"m\"],[\"ن\",\"n\"],[\"ه\",\"h\"],[\"و\",\"w\"],[\"ى\",\"a\"],[\"ي\",\"y\"],[\"َ‎\",\"a\"],[\"ُ\",\"u\"],[\"ِ‎\",\"i\"],[\"٠\",\"0\"],[\"١\",\"1\"],[\"٢\",\"2\"],[\"٣\",\"3\"],[\"٤\",\"4\"],[\"٥\",\"5\"],[\"٦\",\"6\"],[\"٧\",\"7\"],[\"٨\",\"8\"],[\"٩\",\"9\"],[\"چ\",\"ch\"],[\"ک\",\"k\"],[\"گ\",\"g\"],[\"پ\",\"p\"],[\"ژ\",\"zh\"],[\"ی\",\"y\"],[\"۰\",\"0\"],[\"۱\",\"1\"],[\"۲\",\"2\"],[\"۳\",\"3\"],[\"۴\",\"4\"],[\"۵\",\"5\"],[\"۶\",\"6\"],[\"۷\",\"7\"],[\"۸\",\"8\"],[\"۹\",\"9\"],[\"ټ\",\"p\"],[\"ځ\",\"z\"],[\"څ\",\"c\"],[\"ډ\",\"d\"],[\"ﺫ\",\"d\"],[\"ﺭ\",\"r\"],[\"ړ\",\"r\"],[\"ﺯ\",\"z\"],[\"ږ\",\"g\"],[\"ښ\",\"x\"],[\"ګ\",\"g\"],[\"ڼ\",\"n\"],[\"ۀ\",\"e\"],[\"ې\",\"e\"],[\"ۍ\",\"ai\"],[\"ٹ\",\"t\"],[\"ڈ\",\"d\"],[\"ڑ\",\"r\"],[\"ں\",\"n\"],[\"ہ\",\"h\"],[\"ھ\",\"h\"],[\"ے\",\"e\"],[\"А\",\"A\"],[\"а\",\"a\"],[\"Б\",\"B\"],[\"б\",\"b\"],[\"В\",\"V\"],[\"в\",\"v\"],[\"Г\",\"G\"],[\"г\",\"g\"],[\"Д\",\"D\"],[\"д\",\"d\"],[\"ъе\",\"ye\"],[\"Ъе\",\"Ye\"],[\"ъЕ\",\"yE\"],[\"ЪЕ\",\"YE\"],[\"Е\",\"E\"],[\"е\",\"e\"],[\"Ё\",\"Yo\"],[\"ё\",\"yo\"],[\"Ж\",\"Zh\"],[\"ж\",\"zh\"],[\"З\",\"Z\"],[\"з\",\"z\"],[\"И\",\"I\"],[\"и\",\"i\"],[\"ый\",\"iy\"],[\"Ый\",\"Iy\"],[\"ЫЙ\",\"IY\"],[\"ыЙ\",\"iY\"],[\"Й\",\"Y\"],[\"й\",\"y\"],[\"К\",\"K\"],[\"к\",\"k\"],[\"Л\",\"L\"],[\"л\",\"l\"],[\"М\",\"M\"],[\"м\",\"m\"],[\"Н\",\"N\"],[\"н\",\"n\"],[\"О\",\"O\"],[\"о\",\"o\"],[\"П\",\"P\"],[\"п\",\"p\"],[\"Р\",\"R\"],[\"р\",\"r\"],[\"С\",\"S\"],[\"с\",\"s\"],[\"Т\",\"T\"],[\"т\",\"t\"],[\"У\",\"U\"],[\"у\",\"u\"],[\"Ф\",\"F\"],[\"ф\",\"f\"],[\"Х\",\"Kh\"],[\"х\",\"kh\"],[\"Ц\",\"Ts\"],[\"ц\",\"ts\"],[\"Ч\",\"Ch\"],[\"ч\",\"ch\"],[\"Ш\",\"Sh\"],[\"ш\",\"sh\"],[\"Щ\",\"Sch\"],[\"щ\",\"sch\"],[\"Ъ\",\"\"],[\"ъ\",\"\"],[\"Ы\",\"Y\"],[\"ы\",\"y\"],[\"Ь\",\"\"],[\"ь\",\"\"],[\"Э\",\"E\"],[\"э\",\"e\"],[\"Ю\",\"Yu\"],[\"ю\",\"yu\"],[\"Я\",\"Ya\"],[\"я\",\"ya\"],[\"ă\",\"a\"],[\"Ă\",\"A\"],[\"ș\",\"s\"],[\"Ș\",\"S\"],[\"ț\",\"t\"],[\"Ț\",\"T\"],[\"ţ\",\"t\"],[\"Ţ\",\"T\"],[\"ş\",\"s\"],[\"Ş\",\"S\"],[\"ç\",\"c\"],[\"Ç\",\"C\"],[\"ğ\",\"g\"],[\"Ğ\",\"G\"],[\"ı\",\"i\"],[\"İ\",\"I\"],[\"ա\",\"a\"],[\"Ա\",\"A\"],[\"բ\",\"b\"],[\"Բ\",\"B\"],[\"գ\",\"g\"],[\"Գ\",\"G\"],[\"դ\",\"d\"],[\"Դ\",\"D\"],[\"ե\",\"ye\"],[\"Ե\",\"Ye\"],[\"զ\",\"z\"],[\"Զ\",\"Z\"],[\"է\",\"e\"],[\"Է\",\"E\"],[\"ը\",\"y\"],[\"Ը\",\"Y\"],[\"թ\",\"t\"],[\"Թ\",\"T\"],[\"ժ\",\"zh\"],[\"Ժ\",\"Zh\"],[\"ի\",\"i\"],[\"Ի\",\"I\"],[\"լ\",\"l\"],[\"Լ\",\"L\"],[\"խ\",\"kh\"],[\"Խ\",\"Kh\"],[\"ծ\",\"ts\"],[\"Ծ\",\"Ts\"],[\"կ\",\"k\"],[\"Կ\",\"K\"],[\"հ\",\"h\"],[\"Հ\",\"H\"],[\"ձ\",\"dz\"],[\"Ձ\",\"Dz\"],[\"ղ\",\"gh\"],[\"Ղ\",\"Gh\"],[\"ճ\",\"tch\"],[\"Ճ\",\"Tch\"],[\"մ\",\"m\"],[\"Մ\",\"M\"],[\"յ\",\"y\"],[\"Յ\",\"Y\"],[\"ն\",\"n\"],[\"Ն\",\"N\"],[\"շ\",\"sh\"],[\"Շ\",\"Sh\"],[\"ո\",\"vo\"],[\"Ո\",\"Vo\"],[\"չ\",\"ch\"],[\"Չ\",\"Ch\"],[\"պ\",\"p\"],[\"Պ\",\"P\"],[\"ջ\",\"j\"],[\"Ջ\",\"J\"],[\"ռ\",\"r\"],[\"Ռ\",\"R\"],[\"ս\",\"s\"],[\"Ս\",\"S\"],[\"վ\",\"v\"],[\"Վ\",\"V\"],[\"տ\",\"t\"],[\"Տ\",\"T\"],[\"ր\",\"r\"],[\"Ր\",\"R\"],[\"ց\",\"c\"],[\"Ց\",\"C\"],[\"ու\",\"u\"],[\"ՈՒ\",\"U\"],[\"Ու\",\"U\"],[\"փ\",\"p\"],[\"Փ\",\"P\"],[\"ք\",\"q\"],[\"Ք\",\"Q\"],[\"օ\",\"o\"],[\"Օ\",\"O\"],[\"ֆ\",\"f\"],[\"Ֆ\",\"F\"],[\"և\",\"yev\"],[\"ა\",\"a\"],[\"ბ\",\"b\"],[\"გ\",\"g\"],[\"დ\",\"d\"],[\"ე\",\"e\"],[\"ვ\",\"v\"],[\"ზ\",\"z\"],[\"თ\",\"t\"],[\"ი\",\"i\"],[\"კ\",\"k\"],[\"ლ\",\"l\"],[\"მ\",\"m\"],[\"ნ\",\"n\"],[\"ო\",\"o\"],[\"პ\",\"p\"],[\"ჟ\",\"zh\"],[\"რ\",\"r\"],[\"ს\",\"s\"],[\"ტ\",\"t\"],[\"უ\",\"u\"],[\"ფ\",\"ph\"],[\"ქ\",\"q\"],[\"ღ\",\"gh\"],[\"ყ\",\"k\"],[\"შ\",\"sh\"],[\"ჩ\",\"ch\"],[\"ც\",\"ts\"],[\"ძ\",\"dz\"],[\"წ\",\"ts\"],[\"ჭ\",\"tch\"],[\"ხ\",\"kh\"],[\"ჯ\",\"j\"],[\"ჰ\",\"h\"],[\"č\",\"c\"],[\"ď\",\"d\"],[\"ě\",\"e\"],[\"ň\",\"n\"],[\"ř\",\"r\"],[\"š\",\"s\"],[\"ť\",\"t\"],[\"ů\",\"u\"],[\"ž\",\"z\"],[\"Č\",\"C\"],[\"Ď\",\"D\"],[\"Ě\",\"E\"],[\"Ň\",\"N\"],[\"Ř\",\"R\"],[\"Š\",\"S\"],[\"Ť\",\"T\"],[\"Ů\",\"U\"],[\"Ž\",\"Z\"],[\"ހ\",\"h\"],[\"ށ\",\"sh\"],[\"ނ\",\"n\"],[\"ރ\",\"r\"],[\"ބ\",\"b\"],[\"ޅ\",\"lh\"],[\"ކ\",\"k\"],[\"އ\",\"a\"],[\"ވ\",\"v\"],[\"މ\",\"m\"],[\"ފ\",\"f\"],[\"ދ\",\"dh\"],[\"ތ\",\"th\"],[\"ލ\",\"l\"],[\"ގ\",\"g\"],[\"ޏ\",\"gn\"],[\"ސ\",\"s\"],[\"ޑ\",\"d\"],[\"ޒ\",\"z\"],[\"ޓ\",\"t\"],[\"ޔ\",\"y\"],[\"ޕ\",\"p\"],[\"ޖ\",\"j\"],[\"ޗ\",\"ch\"],[\"ޘ\",\"tt\"],[\"ޙ\",\"hh\"],[\"ޚ\",\"kh\"],[\"ޛ\",\"th\"],[\"ޜ\",\"z\"],[\"ޝ\",\"sh\"],[\"ޞ\",\"s\"],[\"ޟ\",\"d\"],[\"ޠ\",\"t\"],[\"ޡ\",\"z\"],[\"ޢ\",\"a\"],[\"ޣ\",\"gh\"],[\"ޤ\",\"q\"],[\"ޥ\",\"w\"],[\"ަ\",\"a\"],[\"ާ\",\"aa\"],[\"ި\",\"i\"],[\"ީ\",\"ee\"],[\"ު\",\"u\"],[\"ޫ\",\"oo\"],[\"ެ\",\"e\"],[\"ޭ\",\"ey\"],[\"ޮ\",\"o\"],[\"ޯ\",\"oa\"],[\"ް\",\"\"],[\"α\",\"a\"],[\"β\",\"v\"],[\"γ\",\"g\"],[\"δ\",\"d\"],[\"ε\",\"e\"],[\"ζ\",\"z\"],[\"η\",\"i\"],[\"θ\",\"th\"],[\"ι\",\"i\"],[\"κ\",\"k\"],[\"λ\",\"l\"],[\"μ\",\"m\"],[\"ν\",\"n\"],[\"ξ\",\"ks\"],[\"ο\",\"o\"],[\"π\",\"p\"],[\"ρ\",\"r\"],[\"σ\",\"s\"],[\"τ\",\"t\"],[\"υ\",\"y\"],[\"φ\",\"f\"],[\"χ\",\"x\"],[\"ψ\",\"ps\"],[\"ω\",\"o\"],[\"ά\",\"a\"],[\"έ\",\"e\"],[\"ί\",\"i\"],[\"ό\",\"o\"],[\"ύ\",\"y\"],[\"ή\",\"i\"],[\"ώ\",\"o\"],[\"ς\",\"s\"],[\"ϊ\",\"i\"],[\"ΰ\",\"y\"],[\"ϋ\",\"y\"],[\"ΐ\",\"i\"],[\"Α\",\"A\"],[\"Β\",\"B\"],[\"Γ\",\"G\"],[\"Δ\",\"D\"],[\"Ε\",\"E\"],[\"Ζ\",\"Z\"],[\"Η\",\"I\"],[\"Θ\",\"TH\"],[\"Ι\",\"I\"],[\"Κ\",\"K\"],[\"Λ\",\"L\"],[\"Μ\",\"M\"],[\"Ν\",\"N\"],[\"Ξ\",\"KS\"],[\"Ο\",\"O\"],[\"Π\",\"P\"],[\"Ρ\",\"R\"],[\"Σ\",\"S\"],[\"Τ\",\"T\"],[\"Υ\",\"Y\"],[\"Φ\",\"F\"],[\"Χ\",\"X\"],[\"Ψ\",\"PS\"],[\"Ω\",\"O\"],[\"Ά\",\"A\"],[\"Έ\",\"E\"],[\"Ί\",\"I\"],[\"Ό\",\"O\"],[\"Ύ\",\"Y\"],[\"Ή\",\"I\"],[\"Ώ\",\"O\"],[\"Ϊ\",\"I\"],[\"Ϋ\",\"Y\"],[\"ā\",\"a\"],[\"ē\",\"e\"],[\"ģ\",\"g\"],[\"ī\",\"i\"],[\"ķ\",\"k\"],[\"ļ\",\"l\"],[\"ņ\",\"n\"],[\"ū\",\"u\"],[\"Ā\",\"A\"],[\"Ē\",\"E\"],[\"Ģ\",\"G\"],[\"Ī\",\"I\"],[\"Ķ\",\"K\"],[\"Ļ\",\"L\"],[\"Ņ\",\"N\"],[\"Ū\",\"U\"],[\"č\",\"c\"],[\"š\",\"s\"],[\"ž\",\"z\"],[\"Č\",\"C\"],[\"Š\",\"S\"],[\"Ž\",\"Z\"],[\"ą\",\"a\"],[\"č\",\"c\"],[\"ę\",\"e\"],[\"ė\",\"e\"],[\"į\",\"i\"],[\"š\",\"s\"],[\"ų\",\"u\"],[\"ū\",\"u\"],[\"ž\",\"z\"],[\"Ą\",\"A\"],[\"Č\",\"C\"],[\"Ę\",\"E\"],[\"Ė\",\"E\"],[\"Į\",\"I\"],[\"Š\",\"S\"],[\"Ų\",\"U\"],[\"Ū\",\"U\"],[\"Ќ\",\"Kj\"],[\"ќ\",\"kj\"],[\"Љ\",\"Lj\"],[\"љ\",\"lj\"],[\"Њ\",\"Nj\"],[\"њ\",\"nj\"],[\"Тс\",\"Ts\"],[\"тс\",\"ts\"],[\"ą\",\"a\"],[\"ć\",\"c\"],[\"ę\",\"e\"],[\"ł\",\"l\"],[\"ń\",\"n\"],[\"ś\",\"s\"],[\"ź\",\"z\"],[\"ż\",\"z\"],[\"Ą\",\"A\"],[\"Ć\",\"C\"],[\"Ę\",\"E\"],[\"Ł\",\"L\"],[\"Ń\",\"N\"],[\"Ś\",\"S\"],[\"Ź\",\"Z\"],[\"Ż\",\"Z\"],[\"Є\",\"Ye\"],[\"І\",\"I\"],[\"Ї\",\"Yi\"],[\"Ґ\",\"G\"],[\"є\",\"ye\"],[\"і\",\"i\"],[\"ї\",\"yi\"],[\"ґ\",\"g\"],[\"Ĳ\",\"IJ\"],[\"ĳ\",\"ij\"],[\"¢\",\"c\"],[\"¥\",\"Y\"],[\"߿\",\"b\"],[\"৳\",\"t\"],[\"૱\",\"Bo\"],[\"฿\",\"B\"],[\"₠\",\"CE\"],[\"₡\",\"C\"],[\"₢\",\"Cr\"],[\"₣\",\"F\"],[\"₥\",\"m\"],[\"₦\",\"N\"],[\"₧\",\"Pt\"],[\"₨\",\"Rs\"],[\"₩\",\"W\"],[\"₫\",\"s\"],[\"€\",\"E\"],[\"₭\",\"K\"],[\"₮\",\"T\"],[\"₯\",\"Dp\"],[\"₰\",\"S\"],[\"₱\",\"P\"],[\"₲\",\"G\"],[\"₳\",\"A\"],[\"₴\",\"S\"],[\"₵\",\"C\"],[\"₶\",\"tt\"],[\"₷\",\"S\"],[\"₸\",\"T\"],[\"₹\",\"R\"],[\"₺\",\"L\"],[\"₽\",\"P\"],[\"₿\",\"B\"],[\"﹩\",\"$\"],[\"￠\",\"c\"],[\"￥\",\"Y\"],[\"￦\",\"W\"],[\"𝐀\",\"A\"],[\"𝐁\",\"B\"],[\"𝐂\",\"C\"],[\"𝐃\",\"D\"],[\"𝐄\",\"E\"],[\"𝐅\",\"F\"],[\"𝐆\",\"G\"],[\"𝐇\",\"H\"],[\"𝐈\",\"I\"],[\"𝐉\",\"J\"],[\"𝐊\",\"K\"],[\"𝐋\",\"L\"],[\"𝐌\",\"M\"],[\"𝐍\",\"N\"],[\"𝐎\",\"O\"],[\"𝐏\",\"P\"],[\"𝐐\",\"Q\"],[\"𝐑\",\"R\"],[\"𝐒\",\"S\"],[\"𝐓\",\"T\"],[\"𝐔\",\"U\"],[\"𝐕\",\"V\"],[\"𝐖\",\"W\"],[\"𝐗\",\"X\"],[\"𝐘\",\"Y\"],[\"𝐙\",\"Z\"],[\"𝐚\",\"a\"],[\"𝐛\",\"b\"],[\"𝐜\",\"c\"],[\"𝐝\",\"d\"],[\"𝐞\",\"e\"],[\"𝐟\",\"f\"],[\"𝐠\",\"g\"],[\"𝐡\",\"h\"],[\"𝐢\",\"i\"],[\"𝐣\",\"j\"],[\"𝐤\",\"k\"],[\"𝐥\",\"l\"],[\"𝐦\",\"m\"],[\"𝐧\",\"n\"],[\"𝐨\",\"o\"],[\"𝐩\",\"p\"],[\"𝐪\",\"q\"],[\"𝐫\",\"r\"],[\"𝐬\",\"s\"],[\"𝐭\",\"t\"],[\"𝐮\",\"u\"],[\"𝐯\",\"v\"],[\"𝐰\",\"w\"],[\"𝐱\",\"x\"],[\"𝐲\",\"y\"],[\"𝐳\",\"z\"],[\"𝐴\",\"A\"],[\"𝐵\",\"B\"],[\"𝐶\",\"C\"],[\"𝐷\",\"D\"],[\"𝐸\",\"E\"],[\"𝐹\",\"F\"],[\"𝐺\",\"G\"],[\"𝐻\",\"H\"],[\"𝐼\",\"I\"],[\"𝐽\",\"J\"],[\"𝐾\",\"K\"],[\"𝐿\",\"L\"],[\"𝑀\",\"M\"],[\"𝑁\",\"N\"],[\"𝑂\",\"O\"],[\"𝑃\",\"P\"],[\"𝑄\",\"Q\"],[\"𝑅\",\"R\"],[\"𝑆\",\"S\"],[\"𝑇\",\"T\"],[\"𝑈\",\"U\"],[\"𝑉\",\"V\"],[\"𝑊\",\"W\"],[\"𝑋\",\"X\"],[\"𝑌\",\"Y\"],[\"𝑍\",\"Z\"],[\"𝑎\",\"a\"],[\"𝑏\",\"b\"],[\"𝑐\",\"c\"],[\"𝑑\",\"d\"],[\"𝑒\",\"e\"],[\"𝑓\",\"f\"],[\"𝑔\",\"g\"],[\"𝑖\",\"i\"],[\"𝑗\",\"j\"],[\"𝑘\",\"k\"],[\"𝑙\",\"l\"],[\"𝑚\",\"m\"],[\"𝑛\",\"n\"],[\"𝑜\",\"o\"],[\"𝑝\",\"p\"],[\"𝑞\",\"q\"],[\"𝑟\",\"r\"],[\"𝑠\",\"s\"],[\"𝑡\",\"t\"],[\"𝑢\",\"u\"],[\"𝑣\",\"v\"],[\"𝑤\",\"w\"],[\"𝑥\",\"x\"],[\"𝑦\",\"y\"],[\"𝑧\",\"z\"],[\"𝑨\",\"A\"],[\"𝑩\",\"B\"],[\"𝑪\",\"C\"],[\"𝑫\",\"D\"],[\"𝑬\",\"E\"],[\"𝑭\",\"F\"],[\"𝑮\",\"G\"],[\"𝑯\",\"H\"],[\"𝑰\",\"I\"],[\"𝑱\",\"J\"],[\"𝑲\",\"K\"],[\"𝑳\",\"L\"],[\"𝑴\",\"M\"],[\"𝑵\",\"N\"],[\"𝑶\",\"O\"],[\"𝑷\",\"P\"],[\"𝑸\",\"Q\"],[\"𝑹\",\"R\"],[\"𝑺\",\"S\"],[\"𝑻\",\"T\"],[\"𝑼\",\"U\"],[\"𝑽\",\"V\"],[\"𝑾\",\"W\"],[\"𝑿\",\"X\"],[\"𝒀\",\"Y\"],[\"𝒁\",\"Z\"],[\"𝒂\",\"a\"],[\"𝒃\",\"b\"],[\"𝒄\",\"c\"],[\"𝒅\",\"d\"],[\"𝒆\",\"e\"],[\"𝒇\",\"f\"],[\"𝒈\",\"g\"],[\"𝒉\",\"h\"],[\"𝒊\",\"i\"],[\"𝒋\",\"j\"],[\"𝒌\",\"k\"],[\"𝒍\",\"l\"],[\"𝒎\",\"m\"],[\"𝒏\",\"n\"],[\"𝒐\",\"o\"],[\"𝒑\",\"p\"],[\"𝒒\",\"q\"],[\"𝒓\",\"r\"],[\"𝒔\",\"s\"],[\"𝒕\",\"t\"],[\"𝒖\",\"u\"],[\"𝒗\",\"v\"],[\"𝒘\",\"w\"],[\"𝒙\",\"x\"],[\"𝒚\",\"y\"],[\"𝒛\",\"z\"],[\"𝒜\",\"A\"],[\"𝒞\",\"C\"],[\"𝒟\",\"D\"],[\"𝒢\",\"g\"],[\"𝒥\",\"J\"],[\"𝒦\",\"K\"],[\"𝒩\",\"N\"],[\"𝒪\",\"O\"],[\"𝒫\",\"P\"],[\"𝒬\",\"Q\"],[\"𝒮\",\"S\"],[\"𝒯\",\"T\"],[\"𝒰\",\"U\"],[\"𝒱\",\"V\"],[\"𝒲\",\"W\"],[\"𝒳\",\"X\"],[\"𝒴\",\"Y\"],[\"𝒵\",\"Z\"],[\"𝒶\",\"a\"],[\"𝒷\",\"b\"],[\"𝒸\",\"c\"],[\"𝒹\",\"d\"],[\"𝒻\",\"f\"],[\"𝒽\",\"h\"],[\"𝒾\",\"i\"],[\"𝒿\",\"j\"],[\"𝓀\",\"h\"],[\"𝓁\",\"l\"],[\"𝓂\",\"m\"],[\"𝓃\",\"n\"],[\"𝓅\",\"p\"],[\"𝓆\",\"q\"],[\"𝓇\",\"r\"],[\"𝓈\",\"s\"],[\"𝓉\",\"t\"],[\"𝓊\",\"u\"],[\"𝓋\",\"v\"],[\"𝓌\",\"w\"],[\"𝓍\",\"x\"],[\"𝓎\",\"y\"],[\"𝓏\",\"z\"],[\"𝓐\",\"A\"],[\"𝓑\",\"B\"],[\"𝓒\",\"C\"],[\"𝓓\",\"D\"],[\"𝓔\",\"E\"],[\"𝓕\",\"F\"],[\"𝓖\",\"G\"],[\"𝓗\",\"H\"],[\"𝓘\",\"I\"],[\"𝓙\",\"J\"],[\"𝓚\",\"K\"],[\"𝓛\",\"L\"],[\"𝓜\",\"M\"],[\"𝓝\",\"N\"],[\"𝓞\",\"O\"],[\"𝓟\",\"P\"],[\"𝓠\",\"Q\"],[\"𝓡\",\"R\"],[\"𝓢\",\"S\"],[\"𝓣\",\"T\"],[\"𝓤\",\"U\"],[\"𝓥\",\"V\"],[\"𝓦\",\"W\"],[\"𝓧\",\"X\"],[\"𝓨\",\"Y\"],[\"𝓩\",\"Z\"],[\"𝓪\",\"a\"],[\"𝓫\",\"b\"],[\"𝓬\",\"c\"],[\"𝓭\",\"d\"],[\"𝓮\",\"e\"],[\"𝓯\",\"f\"],[\"𝓰\",\"g\"],[\"𝓱\",\"h\"],[\"𝓲\",\"i\"],[\"𝓳\",\"j\"],[\"𝓴\",\"k\"],[\"𝓵\",\"l\"],[\"𝓶\",\"m\"],[\"𝓷\",\"n\"],[\"𝓸\",\"o\"],[\"𝓹\",\"p\"],[\"𝓺\",\"q\"],[\"𝓻\",\"r\"],[\"𝓼\",\"s\"],[\"𝓽\",\"t\"],[\"𝓾\",\"u\"],[\"𝓿\",\"v\"],[\"𝔀\",\"w\"],[\"𝔁\",\"x\"],[\"𝔂\",\"y\"],[\"𝔃\",\"z\"],[\"𝔄\",\"A\"],[\"𝔅\",\"B\"],[\"𝔇\",\"D\"],[\"𝔈\",\"E\"],[\"𝔉\",\"F\"],[\"𝔊\",\"G\"],[\"𝔍\",\"J\"],[\"𝔎\",\"K\"],[\"𝔏\",\"L\"],[\"𝔐\",\"M\"],[\"𝔑\",\"N\"],[\"𝔒\",\"O\"],[\"𝔓\",\"P\"],[\"𝔔\",\"Q\"],[\"𝔖\",\"S\"],[\"𝔗\",\"T\"],[\"𝔘\",\"U\"],[\"𝔙\",\"V\"],[\"𝔚\",\"W\"],[\"𝔛\",\"X\"],[\"𝔜\",\"Y\"],[\"𝔞\",\"a\"],[\"𝔟\",\"b\"],[\"𝔠\",\"c\"],[\"𝔡\",\"d\"],[\"𝔢\",\"e\"],[\"𝔣\",\"f\"],[\"𝔤\",\"g\"],[\"𝔥\",\"h\"],[\"𝔦\",\"i\"],[\"𝔧\",\"j\"],[\"𝔨\",\"k\"],[\"𝔩\",\"l\"],[\"𝔪\",\"m\"],[\"𝔫\",\"n\"],[\"𝔬\",\"o\"],[\"𝔭\",\"p\"],[\"𝔮\",\"q\"],[\"𝔯\",\"r\"],[\"𝔰\",\"s\"],[\"𝔱\",\"t\"],[\"𝔲\",\"u\"],[\"𝔳\",\"v\"],[\"𝔴\",\"w\"],[\"𝔵\",\"x\"],[\"𝔶\",\"y\"],[\"𝔷\",\"z\"],[\"𝔸\",\"A\"],[\"𝔹\",\"B\"],[\"𝔻\",\"D\"],[\"𝔼\",\"E\"],[\"𝔽\",\"F\"],[\"𝔾\",\"G\"],[\"𝕀\",\"I\"],[\"𝕁\",\"J\"],[\"𝕂\",\"K\"],[\"𝕃\",\"L\"],[\"𝕄\",\"M\"],[\"𝕆\",\"N\"],[\"𝕊\",\"S\"],[\"𝕋\",\"T\"],[\"𝕌\",\"U\"],[\"𝕍\",\"V\"],[\"𝕎\",\"W\"],[\"𝕏\",\"X\"],[\"𝕐\",\"Y\"],[\"𝕒\",\"a\"],[\"𝕓\",\"b\"],[\"𝕔\",\"c\"],[\"𝕕\",\"d\"],[\"𝕖\",\"e\"],[\"𝕗\",\"f\"],[\"𝕘\",\"g\"],[\"𝕙\",\"h\"],[\"𝕚\",\"i\"],[\"𝕛\",\"j\"],[\"𝕜\",\"k\"],[\"𝕝\",\"l\"],[\"𝕞\",\"m\"],[\"𝕟\",\"n\"],[\"𝕠\",\"o\"],[\"𝕡\",\"p\"],[\"𝕢\",\"q\"],[\"𝕣\",\"r\"],[\"𝕤\",\"s\"],[\"𝕥\",\"t\"],[\"𝕦\",\"u\"],[\"𝕧\",\"v\"],[\"𝕨\",\"w\"],[\"𝕩\",\"x\"],[\"𝕪\",\"y\"],[\"𝕫\",\"z\"],[\"𝕬\",\"A\"],[\"𝕭\",\"B\"],[\"𝕮\",\"C\"],[\"𝕯\",\"D\"],[\"𝕰\",\"E\"],[\"𝕱\",\"F\"],[\"𝕲\",\"G\"],[\"𝕳\",\"H\"],[\"𝕴\",\"I\"],[\"𝕵\",\"J\"],[\"𝕶\",\"K\"],[\"𝕷\",\"L\"],[\"𝕸\",\"M\"],[\"𝕹\",\"N\"],[\"𝕺\",\"O\"],[\"𝕻\",\"P\"],[\"𝕼\",\"Q\"],[\"𝕽\",\"R\"],[\"𝕾\",\"S\"],[\"𝕿\",\"T\"],[\"𝖀\",\"U\"],[\"𝖁\",\"V\"],[\"𝖂\",\"W\"],[\"𝖃\",\"X\"],[\"𝖄\",\"Y\"],[\"𝖅\",\"Z\"],[\"𝖆\",\"a\"],[\"𝖇\",\"b\"],[\"𝖈\",\"c\"],[\"𝖉\",\"d\"],[\"𝖊\",\"e\"],[\"𝖋\",\"f\"],[\"𝖌\",\"g\"],[\"𝖍\",\"h\"],[\"𝖎\",\"i\"],[\"𝖏\",\"j\"],[\"𝖐\",\"k\"],[\"𝖑\",\"l\"],[\"𝖒\",\"m\"],[\"𝖓\",\"n\"],[\"𝖔\",\"o\"],[\"𝖕\",\"p\"],[\"𝖖\",\"q\"],[\"𝖗\",\"r\"],[\"𝖘\",\"s\"],[\"𝖙\",\"t\"],[\"𝖚\",\"u\"],[\"𝖛\",\"v\"],[\"𝖜\",\"w\"],[\"𝖝\",\"x\"],[\"𝖞\",\"y\"],[\"𝖟\",\"z\"],[\"𝖠\",\"A\"],[\"𝖡\",\"B\"],[\"𝖢\",\"C\"],[\"𝖣\",\"D\"],[\"𝖤\",\"E\"],[\"𝖥\",\"F\"],[\"𝖦\",\"G\"],[\"𝖧\",\"H\"],[\"𝖨\",\"I\"],[\"𝖩\",\"J\"],[\"𝖪\",\"K\"],[\"𝖫\",\"L\"],[\"𝖬\",\"M\"],[\"𝖭\",\"N\"],[\"𝖮\",\"O\"],[\"𝖯\",\"P\"],[\"𝖰\",\"Q\"],[\"𝖱\",\"R\"],[\"𝖲\",\"S\"],[\"𝖳\",\"T\"],[\"𝖴\",\"U\"],[\"𝖵\",\"V\"],[\"𝖶\",\"W\"],[\"𝖷\",\"X\"],[\"𝖸\",\"Y\"],[\"𝖹\",\"Z\"],[\"𝖺\",\"a\"],[\"𝖻\",\"b\"],[\"𝖼\",\"c\"],[\"𝖽\",\"d\"],[\"𝖾\",\"e\"],[\"𝖿\",\"f\"],[\"𝗀\",\"g\"],[\"𝗁\",\"h\"],[\"𝗂\",\"i\"],[\"𝗃\",\"j\"],[\"𝗄\",\"k\"],[\"𝗅\",\"l\"],[\"𝗆\",\"m\"],[\"𝗇\",\"n\"],[\"𝗈\",\"o\"],[\"𝗉\",\"p\"],[\"𝗊\",\"q\"],[\"𝗋\",\"r\"],[\"𝗌\",\"s\"],[\"𝗍\",\"t\"],[\"𝗎\",\"u\"],[\"𝗏\",\"v\"],[\"𝗐\",\"w\"],[\"𝗑\",\"x\"],[\"𝗒\",\"y\"],[\"𝗓\",\"z\"],[\"𝗔\",\"A\"],[\"𝗕\",\"B\"],[\"𝗖\",\"C\"],[\"𝗗\",\"D\"],[\"𝗘\",\"E\"],[\"𝗙\",\"F\"],[\"𝗚\",\"G\"],[\"𝗛\",\"H\"],[\"𝗜\",\"I\"],[\"𝗝\",\"J\"],[\"𝗞\",\"K\"],[\"𝗟\",\"L\"],[\"𝗠\",\"M\"],[\"𝗡\",\"N\"],[\"𝗢\",\"O\"],[\"𝗣\",\"P\"],[\"𝗤\",\"Q\"],[\"𝗥\",\"R\"],[\"𝗦\",\"S\"],[\"𝗧\",\"T\"],[\"𝗨\",\"U\"],[\"𝗩\",\"V\"],[\"𝗪\",\"W\"],[\"𝗫\",\"X\"],[\"𝗬\",\"Y\"],[\"𝗭\",\"Z\"],[\"𝗮\",\"a\"],[\"𝗯\",\"b\"],[\"𝗰\",\"c\"],[\"𝗱\",\"d\"],[\"𝗲\",\"e\"],[\"𝗳\",\"f\"],[\"𝗴\",\"g\"],[\"𝗵\",\"h\"],[\"𝗶\",\"i\"],[\"𝗷\",\"j\"],[\"𝗸\",\"k\"],[\"𝗹\",\"l\"],[\"𝗺\",\"m\"],[\"𝗻\",\"n\"],[\"𝗼\",\"o\"],[\"𝗽\",\"p\"],[\"𝗾\",\"q\"],[\"𝗿\",\"r\"],[\"𝘀\",\"s\"],[\"𝘁\",\"t\"],[\"𝘂\",\"u\"],[\"𝘃\",\"v\"],[\"𝘄\",\"w\"],[\"𝘅\",\"x\"],[\"𝘆\",\"y\"],[\"𝘇\",\"z\"],[\"𝘈\",\"A\"],[\"𝘉\",\"B\"],[\"𝘊\",\"C\"],[\"𝘋\",\"D\"],[\"𝘌\",\"E\"],[\"𝘍\",\"F\"],[\"𝘎\",\"G\"],[\"𝘏\",\"H\"],[\"𝘐\",\"I\"],[\"𝘑\",\"J\"],[\"𝘒\",\"K\"],[\"𝘓\",\"L\"],[\"𝘔\",\"M\"],[\"𝘕\",\"N\"],[\"𝘖\",\"O\"],[\"𝘗\",\"P\"],[\"𝘘\",\"Q\"],[\"𝘙\",\"R\"],[\"𝘚\",\"S\"],[\"𝘛\",\"T\"],[\"𝘜\",\"U\"],[\"𝘝\",\"V\"],[\"𝘞\",\"W\"],[\"𝘟\",\"X\"],[\"𝘠\",\"Y\"],[\"𝘡\",\"Z\"],[\"𝘢\",\"a\"],[\"𝘣\",\"b\"],[\"𝘤\",\"c\"],[\"𝘥\",\"d\"],[\"𝘦\",\"e\"],[\"𝘧\",\"f\"],[\"𝘨\",\"g\"],[\"𝘩\",\"h\"],[\"𝘪\",\"i\"],[\"𝘫\",\"j\"],[\"𝘬\",\"k\"],[\"𝘭\",\"l\"],[\"𝘮\",\"m\"],[\"𝘯\",\"n\"],[\"𝘰\",\"o\"],[\"𝘱\",\"p\"],[\"𝘲\",\"q\"],[\"𝘳\",\"r\"],[\"𝘴\",\"s\"],[\"𝘵\",\"t\"],[\"𝘶\",\"u\"],[\"𝘷\",\"v\"],[\"𝘸\",\"w\"],[\"𝘹\",\"x\"],[\"𝘺\",\"y\"],[\"𝘻\",\"z\"],[\"𝘼\",\"A\"],[\"𝘽\",\"B\"],[\"𝘾\",\"C\"],[\"𝘿\",\"D\"],[\"𝙀\",\"E\"],[\"𝙁\",\"F\"],[\"𝙂\",\"G\"],[\"𝙃\",\"H\"],[\"𝙄\",\"I\"],[\"𝙅\",\"J\"],[\"𝙆\",\"K\"],[\"𝙇\",\"L\"],[\"𝙈\",\"M\"],[\"𝙉\",\"N\"],[\"𝙊\",\"O\"],[\"𝙋\",\"P\"],[\"𝙌\",\"Q\"],[\"𝙍\",\"R\"],[\"𝙎\",\"S\"],[\"𝙏\",\"T\"],[\"𝙐\",\"U\"],[\"𝙑\",\"V\"],[\"𝙒\",\"W\"],[\"𝙓\",\"X\"],[\"𝙔\",\"Y\"],[\"𝙕\",\"Z\"],[\"𝙖\",\"a\"],[\"𝙗\",\"b\"],[\"𝙘\",\"c\"],[\"𝙙\",\"d\"],[\"𝙚\",\"e\"],[\"𝙛\",\"f\"],[\"𝙜\",\"g\"],[\"𝙝\",\"h\"],[\"𝙞\",\"i\"],[\"𝙟\",\"j\"],[\"𝙠\",\"k\"],[\"𝙡\",\"l\"],[\"𝙢\",\"m\"],[\"𝙣\",\"n\"],[\"𝙤\",\"o\"],[\"𝙥\",\"p\"],[\"𝙦\",\"q\"],[\"𝙧\",\"r\"],[\"𝙨\",\"s\"],[\"𝙩\",\"t\"],[\"𝙪\",\"u\"],[\"𝙫\",\"v\"],[\"𝙬\",\"w\"],[\"𝙭\",\"x\"],[\"𝙮\",\"y\"],[\"𝙯\",\"z\"],[\"𝙰\",\"A\"],[\"𝙱\",\"B\"],[\"𝙲\",\"C\"],[\"𝙳\",\"D\"],[\"𝙴\",\"E\"],[\"𝙵\",\"F\"],[\"𝙶\",\"G\"],[\"𝙷\",\"H\"],[\"𝙸\",\"I\"],[\"𝙹\",\"J\"],[\"𝙺\",\"K\"],[\"𝙻\",\"L\"],[\"𝙼\",\"M\"],[\"𝙽\",\"N\"],[\"𝙾\",\"O\"],[\"𝙿\",\"P\"],[\"𝚀\",\"Q\"],[\"𝚁\",\"R\"],[\"𝚂\",\"S\"],[\"𝚃\",\"T\"],[\"𝚄\",\"U\"],[\"𝚅\",\"V\"],[\"𝚆\",\"W\"],[\"𝚇\",\"X\"],[\"𝚈\",\"Y\"],[\"𝚉\",\"Z\"],[\"𝚊\",\"a\"],[\"𝚋\",\"b\"],[\"𝚌\",\"c\"],[\"𝚍\",\"d\"],[\"𝚎\",\"e\"],[\"𝚏\",\"f\"],[\"𝚐\",\"g\"],[\"𝚑\",\"h\"],[\"𝚒\",\"i\"],[\"𝚓\",\"j\"],[\"𝚔\",\"k\"],[\"𝚕\",\"l\"],[\"𝚖\",\"m\"],[\"𝚗\",\"n\"],[\"𝚘\",\"o\"],[\"𝚙\",\"p\"],[\"𝚚\",\"q\"],[\"𝚛\",\"r\"],[\"𝚜\",\"s\"],[\"𝚝\",\"t\"],[\"𝚞\",\"u\"],[\"𝚟\",\"v\"],[\"𝚠\",\"w\"],[\"𝚡\",\"x\"],[\"𝚢\",\"y\"],[\"𝚣\",\"z\"],[\"𝚤\",\"l\"],[\"𝚥\",\"j\"],[\"𝛢\",\"A\"],[\"𝛣\",\"B\"],[\"𝛤\",\"G\"],[\"𝛥\",\"D\"],[\"𝛦\",\"E\"],[\"𝛧\",\"Z\"],[\"𝛨\",\"I\"],[\"𝛩\",\"TH\"],[\"𝛪\",\"I\"],[\"𝛫\",\"K\"],[\"𝛬\",\"L\"],[\"𝛭\",\"M\"],[\"𝛮\",\"N\"],[\"𝛯\",\"KS\"],[\"𝛰\",\"O\"],[\"𝛱\",\"P\"],[\"𝛲\",\"R\"],[\"𝛳\",\"TH\"],[\"𝛴\",\"S\"],[\"𝛵\",\"T\"],[\"𝛶\",\"Y\"],[\"𝛷\",\"F\"],[\"𝛸\",\"x\"],[\"𝛹\",\"PS\"],[\"𝛺\",\"O\"],[\"𝛻\",\"D\"],[\"𝛼\",\"a\"],[\"𝛽\",\"b\"],[\"𝛾\",\"g\"],[\"𝛿\",\"d\"],[\"𝜀\",\"e\"],[\"𝜁\",\"z\"],[\"𝜂\",\"i\"],[\"𝜃\",\"th\"],[\"𝜄\",\"i\"],[\"𝜅\",\"k\"],[\"𝜆\",\"l\"],[\"𝜇\",\"m\"],[\"𝜈\",\"n\"],[\"𝜉\",\"ks\"],[\"𝜊\",\"o\"],[\"𝜋\",\"p\"],[\"𝜌\",\"r\"],[\"𝜍\",\"s\"],[\"𝜎\",\"s\"],[\"𝜏\",\"t\"],[\"𝜐\",\"y\"],[\"𝜑\",\"f\"],[\"𝜒\",\"x\"],[\"𝜓\",\"ps\"],[\"𝜔\",\"o\"],[\"𝜕\",\"d\"],[\"𝜖\",\"E\"],[\"𝜗\",\"TH\"],[\"𝜘\",\"K\"],[\"𝜙\",\"f\"],[\"𝜚\",\"r\"],[\"𝜛\",\"p\"],[\"𝜜\",\"A\"],[\"𝜝\",\"V\"],[\"𝜞\",\"G\"],[\"𝜟\",\"D\"],[\"𝜠\",\"E\"],[\"𝜡\",\"Z\"],[\"𝜢\",\"I\"],[\"𝜣\",\"TH\"],[\"𝜤\",\"I\"],[\"𝜥\",\"K\"],[\"𝜦\",\"L\"],[\"𝜧\",\"M\"],[\"𝜨\",\"N\"],[\"𝜩\",\"KS\"],[\"𝜪\",\"O\"],[\"𝜫\",\"P\"],[\"𝜬\",\"S\"],[\"𝜭\",\"TH\"],[\"𝜮\",\"S\"],[\"𝜯\",\"T\"],[\"𝜰\",\"Y\"],[\"𝜱\",\"F\"],[\"𝜲\",\"X\"],[\"𝜳\",\"PS\"],[\"𝜴\",\"O\"],[\"𝜵\",\"D\"],[\"𝜶\",\"a\"],[\"𝜷\",\"v\"],[\"𝜸\",\"g\"],[\"𝜹\",\"d\"],[\"𝜺\",\"e\"],[\"𝜻\",\"z\"],[\"𝜼\",\"i\"],[\"𝜽\",\"th\"],[\"𝜾\",\"i\"],[\"𝜿\",\"k\"],[\"𝝀\",\"l\"],[\"𝝁\",\"m\"],[\"𝝂\",\"n\"],[\"𝝃\",\"ks\"],[\"𝝄\",\"o\"],[\"𝝅\",\"p\"],[\"𝝆\",\"r\"],[\"𝝇\",\"s\"],[\"𝝈\",\"s\"],[\"𝝉\",\"t\"],[\"𝝊\",\"y\"],[\"𝝋\",\"f\"],[\"𝝌\",\"x\"],[\"𝝍\",\"ps\"],[\"𝝎\",\"o\"],[\"𝝏\",\"a\"],[\"𝝐\",\"e\"],[\"𝝑\",\"i\"],[\"𝝒\",\"k\"],[\"𝝓\",\"f\"],[\"𝝔\",\"r\"],[\"𝝕\",\"p\"],[\"𝝖\",\"A\"],[\"𝝗\",\"B\"],[\"𝝘\",\"G\"],[\"𝝙\",\"D\"],[\"𝝚\",\"E\"],[\"𝝛\",\"Z\"],[\"𝝜\",\"I\"],[\"𝝝\",\"TH\"],[\"𝝞\",\"I\"],[\"𝝟\",\"K\"],[\"𝝠\",\"L\"],[\"𝝡\",\"M\"],[\"𝝢\",\"N\"],[\"𝝣\",\"KS\"],[\"𝝤\",\"O\"],[\"𝝥\",\"P\"],[\"𝝦\",\"R\"],[\"𝝧\",\"TH\"],[\"𝝨\",\"S\"],[\"𝝩\",\"T\"],[\"𝝪\",\"Y\"],[\"𝝫\",\"F\"],[\"𝝬\",\"X\"],[\"𝝭\",\"PS\"],[\"𝝮\",\"O\"],[\"𝝯\",\"D\"],[\"𝝰\",\"a\"],[\"𝝱\",\"v\"],[\"𝝲\",\"g\"],[\"𝝳\",\"d\"],[\"𝝴\",\"e\"],[\"𝝵\",\"z\"],[\"𝝶\",\"i\"],[\"𝝷\",\"th\"],[\"𝝸\",\"i\"],[\"𝝹\",\"k\"],[\"𝝺\",\"l\"],[\"𝝻\",\"m\"],[\"𝝼\",\"n\"],[\"𝝽\",\"ks\"],[\"𝝾\",\"o\"],[\"𝝿\",\"p\"],[\"𝞀\",\"r\"],[\"𝞁\",\"s\"],[\"𝞂\",\"s\"],[\"𝞃\",\"t\"],[\"𝞄\",\"y\"],[\"𝞅\",\"f\"],[\"𝞆\",\"x\"],[\"𝞇\",\"ps\"],[\"𝞈\",\"o\"],[\"𝞉\",\"a\"],[\"𝞊\",\"e\"],[\"𝞋\",\"i\"],[\"𝞌\",\"k\"],[\"𝞍\",\"f\"],[\"𝞎\",\"r\"],[\"𝞏\",\"p\"],[\"𝞐\",\"A\"],[\"𝞑\",\"V\"],[\"𝞒\",\"G\"],[\"𝞓\",\"D\"],[\"𝞔\",\"E\"],[\"𝞕\",\"Z\"],[\"𝞖\",\"I\"],[\"𝞗\",\"TH\"],[\"𝞘\",\"I\"],[\"𝞙\",\"K\"],[\"𝞚\",\"L\"],[\"𝞛\",\"M\"],[\"𝞜\",\"N\"],[\"𝞝\",\"KS\"],[\"𝞞\",\"O\"],[\"𝞟\",\"P\"],[\"𝞠\",\"S\"],[\"𝞡\",\"TH\"],[\"𝞢\",\"S\"],[\"𝞣\",\"T\"],[\"𝞤\",\"Y\"],[\"𝞥\",\"F\"],[\"𝞦\",\"X\"],[\"𝞧\",\"PS\"],[\"𝞨\",\"O\"],[\"𝞩\",\"D\"],[\"𝞪\",\"av\"],[\"𝞫\",\"g\"],[\"𝞬\",\"d\"],[\"𝞭\",\"e\"],[\"𝞮\",\"z\"],[\"𝞯\",\"i\"],[\"𝞰\",\"i\"],[\"𝞱\",\"th\"],[\"𝞲\",\"i\"],[\"𝞳\",\"k\"],[\"𝞴\",\"l\"],[\"𝞵\",\"m\"],[\"𝞶\",\"n\"],[\"𝞷\",\"ks\"],[\"𝞸\",\"o\"],[\"𝞹\",\"p\"],[\"𝞺\",\"r\"],[\"𝞻\",\"s\"],[\"𝞼\",\"s\"],[\"𝞽\",\"t\"],[\"𝞾\",\"y\"],[\"𝞿\",\"f\"],[\"𝟀\",\"x\"],[\"𝟁\",\"ps\"],[\"𝟂\",\"o\"],[\"𝟃\",\"a\"],[\"𝟄\",\"e\"],[\"𝟅\",\"i\"],[\"𝟆\",\"k\"],[\"𝟇\",\"f\"],[\"𝟈\",\"r\"],[\"𝟉\",\"p\"],[\"𝟊\",\"F\"],[\"𝟋\",\"f\"],[\"⒜\",\"(a)\"],[\"⒝\",\"(b)\"],[\"⒞\",\"(c)\"],[\"⒟\",\"(d)\"],[\"⒠\",\"(e)\"],[\"⒡\",\"(f)\"],[\"⒢\",\"(g)\"],[\"⒣\",\"(h)\"],[\"⒤\",\"(i)\"],[\"⒥\",\"(j)\"],[\"⒦\",\"(k)\"],[\"⒧\",\"(l)\"],[\"⒨\",\"(m)\"],[\"⒩\",\"(n)\"],[\"⒪\",\"(o)\"],[\"⒫\",\"(p)\"],[\"⒬\",\"(q)\"],[\"⒭\",\"(r)\"],[\"⒮\",\"(s)\"],[\"⒯\",\"(t)\"],[\"⒰\",\"(u)\"],[\"⒱\",\"(v)\"],[\"⒲\",\"(w)\"],[\"⒳\",\"(x)\"],[\"⒴\",\"(y)\"],[\"⒵\",\"(z)\"],[\"Ⓐ\",\"(A)\"],[\"Ⓑ\",\"(B)\"],[\"Ⓒ\",\"(C)\"],[\"Ⓓ\",\"(D)\"],[\"Ⓔ\",\"(E)\"],[\"Ⓕ\",\"(F)\"],[\"Ⓖ\",\"(G)\"],[\"Ⓗ\",\"(H)\"],[\"Ⓘ\",\"(I)\"],[\"Ⓙ\",\"(J)\"],[\"Ⓚ\",\"(K)\"],[\"Ⓛ\",\"(L)\"],[\"Ⓝ\",\"(N)\"],[\"Ⓞ\",\"(O)\"],[\"Ⓟ\",\"(P)\"],[\"Ⓠ\",\"(Q)\"],[\"Ⓡ\",\"(R)\"],[\"Ⓢ\",\"(S)\"],[\"Ⓣ\",\"(T)\"],[\"Ⓤ\",\"(U)\"],[\"Ⓥ\",\"(V)\"],[\"Ⓦ\",\"(W)\"],[\"Ⓧ\",\"(X)\"],[\"Ⓨ\",\"(Y)\"],[\"Ⓩ\",\"(Z)\"],[\"ⓐ\",\"(a)\"],[\"ⓑ\",\"(b)\"],[\"ⓒ\",\"(b)\"],[\"ⓓ\",\"(c)\"],[\"ⓔ\",\"(e)\"],[\"ⓕ\",\"(f)\"],[\"ⓖ\",\"(g)\"],[\"ⓗ\",\"(h)\"],[\"ⓘ\",\"(i)\"],[\"ⓙ\",\"(j)\"],[\"ⓚ\",\"(k)\"],[\"ⓛ\",\"(l)\"],[\"ⓜ\",\"(m)\"],[\"ⓝ\",\"(n)\"],[\"ⓞ\",\"(o)\"],[\"ⓟ\",\"(p)\"],[\"ⓠ\",\"(q)\"],[\"ⓡ\",\"(r)\"],[\"ⓢ\",\"(s)\"],[\"ⓣ\",\"(t)\"],[\"ⓤ\",\"(u)\"],[\"ⓥ\",\"(v)\"],[\"ⓦ\",\"(w)\"],[\"ⓧ\",\"(x)\"],[\"ⓨ\",\"(y)\"],[\"ⓩ\",\"(z)\"],[\"Ċ\",\"C\"],[\"ċ\",\"c\"],[\"Ġ\",\"G\"],[\"ġ\",\"g\"],[\"Ħ\",\"H\"],[\"ħ\",\"h\"],[\"Ż\",\"Z\"],[\"ż\",\"z\"],[\"𝟎\",\"0\"],[\"𝟏\",\"1\"],[\"𝟐\",\"2\"],[\"𝟑\",\"3\"],[\"𝟒\",\"4\"],[\"𝟓\",\"5\"],[\"𝟔\",\"6\"],[\"𝟕\",\"7\"],[\"𝟖\",\"8\"],[\"𝟗\",\"9\"],[\"𝟘\",\"0\"],[\"𝟙\",\"1\"],[\"𝟚\",\"2\"],[\"𝟛\",\"3\"],[\"𝟜\",\"4\"],[\"𝟝\",\"5\"],[\"𝟞\",\"6\"],[\"𝟟\",\"7\"],[\"𝟠\",\"8\"],[\"𝟡\",\"9\"],[\"𝟢\",\"0\"],[\"𝟣\",\"1\"],[\"𝟤\",\"2\"],[\"𝟥\",\"3\"],[\"𝟦\",\"4\"],[\"𝟧\",\"5\"],[\"𝟨\",\"6\"],[\"𝟩\",\"7\"],[\"𝟪\",\"8\"],[\"𝟫\",\"9\"],[\"𝟬\",\"0\"],[\"𝟭\",\"1\"],[\"𝟮\",\"2\"],[\"𝟯\",\"3\"],[\"𝟰\",\"4\"],[\"𝟱\",\"5\"],[\"𝟲\",\"6\"],[\"𝟳\",\"7\"],[\"𝟴\",\"8\"],[\"𝟵\",\"9\"],[\"𝟶\",\"0\"],[\"𝟷\",\"1\"],[\"𝟸\",\"2\"],[\"𝟹\",\"3\"],[\"𝟺\",\"4\"],[\"𝟻\",\"5\"],[\"𝟼\",\"6\"],[\"𝟽\",\"7\"],[\"𝟾\",\"8\"],[\"𝟿\",\"9\"],[\"①\",\"1\"],[\"②\",\"2\"],[\"③\",\"3\"],[\"④\",\"4\"],[\"⑤\",\"5\"],[\"⑥\",\"6\"],[\"⑦\",\"7\"],[\"⑧\",\"8\"],[\"⑨\",\"9\"],[\"⑩\",\"10\"],[\"⑪\",\"11\"],[\"⑫\",\"12\"],[\"⑬\",\"13\"],[\"⑭\",\"14\"],[\"⑮\",\"15\"],[\"⑯\",\"16\"],[\"⑰\",\"17\"],[\"⑱\",\"18\"],[\"⑲\",\"19\"],[\"⑳\",\"20\"],[\"⑴\",\"1\"],[\"⑵\",\"2\"],[\"⑶\",\"3\"],[\"⑷\",\"4\"],[\"⑸\",\"5\"],[\"⑹\",\"6\"],[\"⑺\",\"7\"],[\"⑻\",\"8\"],[\"⑼\",\"9\"],[\"⑽\",\"10\"],[\"⑾\",\"11\"],[\"⑿\",\"12\"],[\"⒀\",\"13\"],[\"⒁\",\"14\"],[\"⒂\",\"15\"],[\"⒃\",\"16\"],[\"⒄\",\"17\"],[\"⒅\",\"18\"],[\"⒆\",\"19\"],[\"⒇\",\"20\"],[\"⒈\",\"1.\"],[\"⒉\",\"2.\"],[\"⒊\",\"3.\"],[\"⒋\",\"4.\"],[\"⒌\",\"5.\"],[\"⒍\",\"6.\"],[\"⒎\",\"7.\"],[\"⒏\",\"8.\"],[\"⒐\",\"9.\"],[\"⒑\",\"10.\"],[\"⒒\",\"11.\"],[\"⒓\",\"12.\"],[\"⒔\",\"13.\"],[\"⒕\",\"14.\"],[\"⒖\",\"15.\"],[\"⒗\",\"16.\"],[\"⒘\",\"17.\"],[\"⒙\",\"18.\"],[\"⒚\",\"19.\"],[\"⒛\",\"20.\"],[\"⓪\",\"0\"],[\"⓫\",\"11\"],[\"⓬\",\"12\"],[\"⓭\",\"13\"],[\"⓮\",\"14\"],[\"⓯\",\"15\"],[\"⓰\",\"16\"],[\"⓱\",\"17\"],[\"⓲\",\"18\"],[\"⓳\",\"19\"],[\"⓴\",\"20\"],[\"⓵\",\"1\"],[\"⓶\",\"2\"],[\"⓷\",\"3\"],[\"⓸\",\"4\"],[\"⓹\",\"5\"],[\"⓺\",\"6\"],[\"⓻\",\"7\"],[\"⓼\",\"8\"],[\"⓽\",\"9\"],[\"⓾\",\"10\"],[\"⓿\",\"0\"],[\"🙰\",\"&\"],[\"🙱\",\"&\"],[\"🙲\",\"&\"],[\"🙳\",\"&\"],[\"🙴\",\"&\"],[\"🙵\",\"&\"],[\"🙶\",'\"'],[\"🙷\",'\"'],[\"🙸\",'\"'],[\"‽\",\"?!\"],[\"🙹\",\"?!\"],[\"🙺\",\"?!\"],[\"🙻\",\"?!\"],[\"🙼\",\"/\"],[\"🙽\",\"\\\\\"],[\"🜇\",\"AR\"],[\"🜈\",\"V\"],[\"🜉\",\"V\"],[\"🜆\",\"VR\"],[\"🜅\",\"VF\"],[\"🜩\",\"2\"],[\"🜪\",\"5\"],[\"🝡\",\"f\"],[\"🝢\",\"W\"],[\"🝣\",\"U\"],[\"🝧\",\"V\"],[\"🝨\",\"T\"],[\"🝪\",\"V\"],[\"🝫\",\"MB\"],[\"🝬\",\"VB\"],[\"🝲\",\"3B\"],[\"🝳\",\"3B\"],[\"💯\",\"100\"],[\"🔙\",\"BACK\"],[\"🔚\",\"END\"],[\"🔛\",\"ON!\"],[\"🔜\",\"SOON\"],[\"🔝\",\"TOP\"],[\"🔞\",\"18\"],[\"🔤\",\"abc\"],[\"🔠\",\"ABCD\"],[\"🔡\",\"abcd\"],[\"🔢\",\"1234\"],[\"🔣\",\"T&@%\"],[\"#️⃣\",\"#\"],[\"*️⃣\",\"*\"],[\"0️⃣\",\"0\"],[\"1️⃣\",\"1\"],[\"2️⃣\",\"2\"],[\"3️⃣\",\"3\"],[\"4️⃣\",\"4\"],[\"5️⃣\",\"5\"],[\"6️⃣\",\"6\"],[\"7️⃣\",\"7\"],[\"8️⃣\",\"8\"],[\"9️⃣\",\"9\"],[\"🔟\",\"10\"],[\"🅰️\",\"A\"],[\"🅱️\",\"B\"],[\"🆎\",\"AB\"],[\"🆑\",\"CL\"],[\"🅾️\",\"O\"],[\"🅿\",\"P\"],[\"🆘\",\"SOS\"],[\"🅲\",\"C\"],[\"🅳\",\"D\"],[\"🅴\",\"E\"],[\"🅵\",\"F\"],[\"🅶\",\"G\"],[\"🅷\",\"H\"],[\"🅸\",\"I\"],[\"🅹\",\"J\"],[\"🅺\",\"K\"],[\"🅻\",\"L\"],[\"🅼\",\"M\"],[\"🅽\",\"N\"],[\"🆀\",\"Q\"],[\"🆁\",\"R\"],[\"🆂\",\"S\"],[\"🆃\",\"T\"],[\"🆄\",\"U\"],[\"🆅\",\"V\"],[\"🆆\",\"W\"],[\"🆇\",\"X\"],[\"🆈\",\"Y\"],[\"🆉\",\"Z\"]];function h(o,h){if(\"string\"!=typeof o)throw new TypeError(`Expected a string, got \\`${typeof o}\\``);h=t({customReplacements:[]},h);const r=new Map([...s,...h.customReplacements]);return o=((e,t)=>{for(const[o,s]of t)e=e.replace(new RegExp(a(o),\"g\"),s);return e})(o=o.normalize(),r),lodash_deburr__WEBPACK_IMPORTED_MODULE_0__(o)}\n//# sourceMappingURL=index.modern.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0cmVhbS1pby90cmFuc2xpdGVyYXRlL2Rpc3QvaW5kZXgubW9kZXJuLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTZCLGFBQWEsb0NBQW9DLFlBQVksbUJBQW1CLEtBQUssbUJBQW1CLHNFQUFzRSxTQUFTLHlCQUF5QixhQUFhLDZCQUE2QiwrREFBK0QsNEJBQTRCLHEyb0JBQXEyb0IsZ0JBQWdCLHNFQUFzRSxTQUFTLEtBQUssS0FBSyxzQkFBc0IsSUFBSSxnREFBZ0Qsa0JBQWtCLHVEQUF1RCxTQUFTLHFCQUFxQiwwQ0FBQyxJQUF5QjtBQUMzZ3FCIiwic291cmNlcyI6WyIvaG9tZS9yZ3RlY2gwMDgvYWNhZGVtaWMtY29ubmVjdC1wcm9qZWN0L25vZGVfbW9kdWxlcy9Ac3RyZWFtLWlvL3RyYW5zbGl0ZXJhdGUvZGlzdC9pbmRleC5tb2Rlcm4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGUgZnJvbVwibG9kYXNoLmRlYnVyclwiO2Z1bmN0aW9uIHQoKXtyZXR1cm4gdD1PYmplY3QuYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXt2YXIgbz1hcmd1bWVudHNbdF07Zm9yKHZhciBhIGluIG8pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sYSkmJihlW2FdPW9bYV0pfXJldHVybiBlfSx0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgbz0vW3xcXFxce30oKVtcXF1eJCsqPy5dL2csYT1mdW5jdGlvbihlKXtpZihcInN0cmluZ1wiIT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgYSBzdHJpbmdcIik7cmV0dXJuIGUucmVwbGFjZShvLFwiXFxcXCQmXCIpfTtjb25zdCBzPVtbXCLDn1wiLFwic3NcIl0sW1wi4bqeXCIsXCJTc1wiXSxbXCLDpFwiLFwiYWVcIl0sW1wiw4RcIixcIkFlXCJdLFtcIsO2XCIsXCJvZVwiXSxbXCLDllwiLFwiT2VcIl0sW1wiw7xcIixcInVlXCJdLFtcIsOcXCIsXCJVZVwiXSxbXCLDgFwiLFwiQVwiXSxbXCLDgVwiLFwiQVwiXSxbXCLDglwiLFwiQVwiXSxbXCLDg1wiLFwiQVwiXSxbXCLDhFwiLFwiQWVcIl0sW1wiw4VcIixcIkFcIl0sW1wiw4ZcIixcIkFFXCJdLFtcIsOHXCIsXCJDXCJdLFtcIsOIXCIsXCJFXCJdLFtcIsOJXCIsXCJFXCJdLFtcIsOKXCIsXCJFXCJdLFtcIsOLXCIsXCJFXCJdLFtcIsOMXCIsXCJJXCJdLFtcIsONXCIsXCJJXCJdLFtcIsOOXCIsXCJJXCJdLFtcIsOPXCIsXCJJXCJdLFtcIsOQXCIsXCJEXCJdLFtcIsORXCIsXCJOXCJdLFtcIsOSXCIsXCJPXCJdLFtcIsOTXCIsXCJPXCJdLFtcIsOUXCIsXCJPXCJdLFtcIsOVXCIsXCJPXCJdLFtcIsOWXCIsXCJPZVwiXSxbXCLFkFwiLFwiT1wiXSxbXCLDmFwiLFwiT1wiXSxbXCLDmVwiLFwiVVwiXSxbXCLDmlwiLFwiVVwiXSxbXCLDm1wiLFwiVVwiXSxbXCLDnFwiLFwiVWVcIl0sW1wixbBcIixcIlVcIl0sW1wiw51cIixcIllcIl0sW1wiw55cIixcIlRIXCJdLFtcIsOfXCIsXCJzc1wiXSxbXCLDoFwiLFwiYVwiXSxbXCLDoVwiLFwiYVwiXSxbXCLDolwiLFwiYVwiXSxbXCLDo1wiLFwiYVwiXSxbXCLDpFwiLFwiYWVcIl0sW1wiw6VcIixcImFcIl0sW1wiw6ZcIixcImFlXCJdLFtcIsOnXCIsXCJjXCJdLFtcIsOoXCIsXCJlXCJdLFtcIsOpXCIsXCJlXCJdLFtcIsOqXCIsXCJlXCJdLFtcIsOrXCIsXCJlXCJdLFtcIsOsXCIsXCJpXCJdLFtcIsOtXCIsXCJpXCJdLFtcIsOuXCIsXCJpXCJdLFtcIsOvXCIsXCJpXCJdLFtcIsOwXCIsXCJkXCJdLFtcIsOxXCIsXCJuXCJdLFtcIsOyXCIsXCJvXCJdLFtcIsOzXCIsXCJvXCJdLFtcIsO0XCIsXCJvXCJdLFtcIsO1XCIsXCJvXCJdLFtcIsO2XCIsXCJvZVwiXSxbXCLFkVwiLFwib1wiXSxbXCLDuFwiLFwib1wiXSxbXCLDuVwiLFwidVwiXSxbXCLDulwiLFwidVwiXSxbXCLDu1wiLFwidVwiXSxbXCLDvFwiLFwidWVcIl0sW1wixbFcIixcInVcIl0sW1wiw71cIixcInlcIl0sW1wiw75cIixcInRoXCJdLFtcIsO/XCIsXCJ5XCJdLFtcIuG6nlwiLFwiU1NcIl0sW1wiw6BcIixcImFcIl0sW1wiw4BcIixcIkFcIl0sW1wiw6FcIixcImFcIl0sW1wiw4FcIixcIkFcIl0sW1wiw6JcIixcImFcIl0sW1wiw4JcIixcIkFcIl0sW1wiw6NcIixcImFcIl0sW1wiw4NcIixcIkFcIl0sW1wiw6hcIixcImVcIl0sW1wiw4hcIixcIkVcIl0sW1wiw6lcIixcImVcIl0sW1wiw4lcIixcIkVcIl0sW1wiw6pcIixcImVcIl0sW1wiw4pcIixcIkVcIl0sW1wiw6xcIixcImlcIl0sW1wiw4xcIixcIklcIl0sW1wiw61cIixcImlcIl0sW1wiw41cIixcIklcIl0sW1wiw7JcIixcIm9cIl0sW1wiw5JcIixcIk9cIl0sW1wiw7NcIixcIm9cIl0sW1wiw5NcIixcIk9cIl0sW1wiw7RcIixcIm9cIl0sW1wiw5RcIixcIk9cIl0sW1wiw7VcIixcIm9cIl0sW1wiw5VcIixcIk9cIl0sW1wiw7lcIixcInVcIl0sW1wiw5lcIixcIlVcIl0sW1wiw7pcIixcInVcIl0sW1wiw5pcIixcIlVcIl0sW1wiw71cIixcInlcIl0sW1wiw51cIixcIllcIl0sW1wixINcIixcImFcIl0sW1wixIJcIixcIkFcIl0sW1wixJBcIixcIkRcIl0sW1wixJFcIixcImRcIl0sW1wixKlcIixcImlcIl0sW1wixKhcIixcIklcIl0sW1wixalcIixcInVcIl0sW1wixahcIixcIlVcIl0sW1wixqFcIixcIm9cIl0sW1wixqBcIixcIk9cIl0sW1wixrBcIixcInVcIl0sW1wixq9cIixcIlVcIl0sW1wi4bqhXCIsXCJhXCJdLFtcIuG6oFwiLFwiQVwiXSxbXCLhuqNcIixcImFcIl0sW1wi4bqiXCIsXCJBXCJdLFtcIuG6pVwiLFwiYVwiXSxbXCLhuqRcIixcIkFcIl0sW1wi4bqnXCIsXCJhXCJdLFtcIuG6plwiLFwiQVwiXSxbXCLhuqlcIixcImFcIl0sW1wi4bqoXCIsXCJBXCJdLFtcIuG6q1wiLFwiYVwiXSxbXCLhuqpcIixcIkFcIl0sW1wi4bqtXCIsXCJhXCJdLFtcIuG6rFwiLFwiQVwiXSxbXCLhuq9cIixcImFcIl0sW1wi4bquXCIsXCJBXCJdLFtcIuG6sVwiLFwiYVwiXSxbXCLhurBcIixcIkFcIl0sW1wi4bqzXCIsXCJhXCJdLFtcIuG6slwiLFwiQVwiXSxbXCLhurVcIixcImFcIl0sW1wi4bq0XCIsXCJBXCJdLFtcIuG6t1wiLFwiYVwiXSxbXCLhurZcIixcIkFcIl0sW1wi4bq5XCIsXCJlXCJdLFtcIuG6uFwiLFwiRVwiXSxbXCLhurtcIixcImVcIl0sW1wi4bq6XCIsXCJFXCJdLFtcIuG6vVwiLFwiZVwiXSxbXCLhurxcIixcIkVcIl0sW1wi4bq/XCIsXCJlXCJdLFtcIuG6vlwiLFwiRVwiXSxbXCLhu4FcIixcImVcIl0sW1wi4buAXCIsXCJFXCJdLFtcIuG7g1wiLFwiZVwiXSxbXCLhu4JcIixcIkVcIl0sW1wi4buFXCIsXCJlXCJdLFtcIuG7hFwiLFwiRVwiXSxbXCLhu4dcIixcImVcIl0sW1wi4buGXCIsXCJFXCJdLFtcIuG7iVwiLFwiaVwiXSxbXCLhu4hcIixcIklcIl0sW1wi4buLXCIsXCJpXCJdLFtcIuG7ilwiLFwiSVwiXSxbXCLhu41cIixcIm9cIl0sW1wi4buMXCIsXCJPXCJdLFtcIuG7j1wiLFwib1wiXSxbXCLhu45cIixcIk9cIl0sW1wi4buRXCIsXCJvXCJdLFtcIuG7kFwiLFwiT1wiXSxbXCLhu5NcIixcIm9cIl0sW1wi4buSXCIsXCJPXCJdLFtcIuG7lVwiLFwib1wiXSxbXCLhu5RcIixcIk9cIl0sW1wi4buXXCIsXCJvXCJdLFtcIuG7llwiLFwiT1wiXSxbXCLhu5lcIixcIm9cIl0sW1wi4buYXCIsXCJPXCJdLFtcIuG7m1wiLFwib1wiXSxbXCLhu5pcIixcIk9cIl0sW1wi4budXCIsXCJvXCJdLFtcIuG7nFwiLFwiT1wiXSxbXCLhu59cIixcIm9cIl0sW1wi4bueXCIsXCJPXCJdLFtcIuG7oVwiLFwib1wiXSxbXCLhu6BcIixcIk9cIl0sW1wi4bujXCIsXCJvXCJdLFtcIuG7olwiLFwiT1wiXSxbXCLhu6VcIixcInVcIl0sW1wi4bukXCIsXCJVXCJdLFtcIuG7p1wiLFwidVwiXSxbXCLhu6ZcIixcIlVcIl0sW1wi4bupXCIsXCJ1XCJdLFtcIuG7qFwiLFwiVVwiXSxbXCLhu6tcIixcInVcIl0sW1wi4buqXCIsXCJVXCJdLFtcIuG7rVwiLFwidVwiXSxbXCLhu6xcIixcIlVcIl0sW1wi4buvXCIsXCJ1XCJdLFtcIuG7rlwiLFwiVVwiXSxbXCLhu7FcIixcInVcIl0sW1wi4buwXCIsXCJVXCJdLFtcIuG7s1wiLFwieVwiXSxbXCLhu7JcIixcIllcIl0sW1wi4bu1XCIsXCJ5XCJdLFtcIuG7tFwiLFwiWVwiXSxbXCLhu7dcIixcInlcIl0sW1wi4bu2XCIsXCJZXCJdLFtcIuG7uVwiLFwieVwiXSxbXCLhu7hcIixcIllcIl0sW1wi2KFcIixcImVcIl0sW1wi2KJcIixcImFcIl0sW1wi2KNcIixcImFcIl0sW1wi2KRcIixcIndcIl0sW1wi2KVcIixcImlcIl0sW1wi2KZcIixcInlcIl0sW1wi2KdcIixcImFcIl0sW1wi2KhcIixcImJcIl0sW1wi2KlcIixcInRcIl0sW1wi2KpcIixcInRcIl0sW1wi2KtcIixcInRoXCJdLFtcItisXCIsXCJqXCJdLFtcItitXCIsXCJoXCJdLFtcItiuXCIsXCJraFwiXSxbXCLYr1wiLFwiZFwiXSxbXCLYsFwiLFwiZGhcIl0sW1wi2LFcIixcInJcIl0sW1wi2LJcIixcInpcIl0sW1wi2LNcIixcInNcIl0sW1wi2LRcIixcInNoXCJdLFtcIti1XCIsXCJzXCJdLFtcIti2XCIsXCJkXCJdLFtcIti3XCIsXCJ0XCJdLFtcIti4XCIsXCJ6XCJdLFtcIti5XCIsXCJlXCJdLFtcIti6XCIsXCJnaFwiXSxbXCLZgFwiLFwiX1wiXSxbXCLZgVwiLFwiZlwiXSxbXCLZglwiLFwicVwiXSxbXCLZg1wiLFwia1wiXSxbXCLZhFwiLFwibFwiXSxbXCLZhVwiLFwibVwiXSxbXCLZhlwiLFwiblwiXSxbXCLZh1wiLFwiaFwiXSxbXCLZiFwiLFwid1wiXSxbXCLZiVwiLFwiYVwiXSxbXCLZilwiLFwieVwiXSxbXCLZjuKAjlwiLFwiYVwiXSxbXCLZj1wiLFwidVwiXSxbXCLZkOKAjlwiLFwiaVwiXSxbXCLZoFwiLFwiMFwiXSxbXCLZoVwiLFwiMVwiXSxbXCLZolwiLFwiMlwiXSxbXCLZo1wiLFwiM1wiXSxbXCLZpFwiLFwiNFwiXSxbXCLZpVwiLFwiNVwiXSxbXCLZplwiLFwiNlwiXSxbXCLZp1wiLFwiN1wiXSxbXCLZqFwiLFwiOFwiXSxbXCLZqVwiLFwiOVwiXSxbXCLahlwiLFwiY2hcIl0sW1wi2qlcIixcImtcIl0sW1wi2q9cIixcImdcIl0sW1wi2b5cIixcInBcIl0sW1wi2phcIixcInpoXCJdLFtcItuMXCIsXCJ5XCJdLFtcItuwXCIsXCIwXCJdLFtcItuxXCIsXCIxXCJdLFtcItuyXCIsXCIyXCJdLFtcItuzXCIsXCIzXCJdLFtcItu0XCIsXCI0XCJdLFtcItu1XCIsXCI1XCJdLFtcItu2XCIsXCI2XCJdLFtcItu3XCIsXCI3XCJdLFtcItu4XCIsXCI4XCJdLFtcItu5XCIsXCI5XCJdLFtcItm8XCIsXCJwXCJdLFtcItqBXCIsXCJ6XCJdLFtcItqFXCIsXCJjXCJdLFtcItqJXCIsXCJkXCJdLFtcIu+6q1wiLFwiZFwiXSxbXCLvuq1cIixcInJcIl0sW1wi2pNcIixcInJcIl0sW1wi77qvXCIsXCJ6XCJdLFtcItqWXCIsXCJnXCJdLFtcItqaXCIsXCJ4XCJdLFtcItqrXCIsXCJnXCJdLFtcItq8XCIsXCJuXCJdLFtcItuAXCIsXCJlXCJdLFtcItuQXCIsXCJlXCJdLFtcItuNXCIsXCJhaVwiXSxbXCLZuVwiLFwidFwiXSxbXCLaiFwiLFwiZFwiXSxbXCLakVwiLFwiclwiXSxbXCLaulwiLFwiblwiXSxbXCLbgVwiLFwiaFwiXSxbXCLavlwiLFwiaFwiXSxbXCLbklwiLFwiZVwiXSxbXCLQkFwiLFwiQVwiXSxbXCLQsFwiLFwiYVwiXSxbXCLQkVwiLFwiQlwiXSxbXCLQsVwiLFwiYlwiXSxbXCLQklwiLFwiVlwiXSxbXCLQslwiLFwidlwiXSxbXCLQk1wiLFwiR1wiXSxbXCLQs1wiLFwiZ1wiXSxbXCLQlFwiLFwiRFwiXSxbXCLQtFwiLFwiZFwiXSxbXCLRitC1XCIsXCJ5ZVwiXSxbXCLQqtC1XCIsXCJZZVwiXSxbXCLRitCVXCIsXCJ5RVwiXSxbXCLQqtCVXCIsXCJZRVwiXSxbXCLQlVwiLFwiRVwiXSxbXCLQtVwiLFwiZVwiXSxbXCLQgVwiLFwiWW9cIl0sW1wi0ZFcIixcInlvXCJdLFtcItCWXCIsXCJaaFwiXSxbXCLQtlwiLFwiemhcIl0sW1wi0JdcIixcIlpcIl0sW1wi0LdcIixcInpcIl0sW1wi0JhcIixcIklcIl0sW1wi0LhcIixcImlcIl0sW1wi0YvQuVwiLFwiaXlcIl0sW1wi0KvQuVwiLFwiSXlcIl0sW1wi0KvQmVwiLFwiSVlcIl0sW1wi0YvQmVwiLFwiaVlcIl0sW1wi0JlcIixcIllcIl0sW1wi0LlcIixcInlcIl0sW1wi0JpcIixcIktcIl0sW1wi0LpcIixcImtcIl0sW1wi0JtcIixcIkxcIl0sW1wi0LtcIixcImxcIl0sW1wi0JxcIixcIk1cIl0sW1wi0LxcIixcIm1cIl0sW1wi0J1cIixcIk5cIl0sW1wi0L1cIixcIm5cIl0sW1wi0J5cIixcIk9cIl0sW1wi0L5cIixcIm9cIl0sW1wi0J9cIixcIlBcIl0sW1wi0L9cIixcInBcIl0sW1wi0KBcIixcIlJcIl0sW1wi0YBcIixcInJcIl0sW1wi0KFcIixcIlNcIl0sW1wi0YFcIixcInNcIl0sW1wi0KJcIixcIlRcIl0sW1wi0YJcIixcInRcIl0sW1wi0KNcIixcIlVcIl0sW1wi0YNcIixcInVcIl0sW1wi0KRcIixcIkZcIl0sW1wi0YRcIixcImZcIl0sW1wi0KVcIixcIktoXCJdLFtcItGFXCIsXCJraFwiXSxbXCLQplwiLFwiVHNcIl0sW1wi0YZcIixcInRzXCJdLFtcItCnXCIsXCJDaFwiXSxbXCLRh1wiLFwiY2hcIl0sW1wi0KhcIixcIlNoXCJdLFtcItGIXCIsXCJzaFwiXSxbXCLQqVwiLFwiU2NoXCJdLFtcItGJXCIsXCJzY2hcIl0sW1wi0KpcIixcIlwiXSxbXCLRilwiLFwiXCJdLFtcItCrXCIsXCJZXCJdLFtcItGLXCIsXCJ5XCJdLFtcItCsXCIsXCJcIl0sW1wi0YxcIixcIlwiXSxbXCLQrVwiLFwiRVwiXSxbXCLRjVwiLFwiZVwiXSxbXCLQrlwiLFwiWXVcIl0sW1wi0Y5cIixcInl1XCJdLFtcItCvXCIsXCJZYVwiXSxbXCLRj1wiLFwieWFcIl0sW1wixINcIixcImFcIl0sW1wixIJcIixcIkFcIl0sW1wiyJlcIixcInNcIl0sW1wiyJhcIixcIlNcIl0sW1wiyJtcIixcInRcIl0sW1wiyJpcIixcIlRcIl0sW1wixaNcIixcInRcIl0sW1wixaJcIixcIlRcIl0sW1wixZ9cIixcInNcIl0sW1wixZ5cIixcIlNcIl0sW1wiw6dcIixcImNcIl0sW1wiw4dcIixcIkNcIl0sW1wixJ9cIixcImdcIl0sW1wixJ5cIixcIkdcIl0sW1wixLFcIixcImlcIl0sW1wixLBcIixcIklcIl0sW1wi1aFcIixcImFcIl0sW1wi1LFcIixcIkFcIl0sW1wi1aJcIixcImJcIl0sW1wi1LJcIixcIkJcIl0sW1wi1aNcIixcImdcIl0sW1wi1LNcIixcIkdcIl0sW1wi1aRcIixcImRcIl0sW1wi1LRcIixcIkRcIl0sW1wi1aVcIixcInllXCJdLFtcItS1XCIsXCJZZVwiXSxbXCLVplwiLFwielwiXSxbXCLUtlwiLFwiWlwiXSxbXCLVp1wiLFwiZVwiXSxbXCLUt1wiLFwiRVwiXSxbXCLVqFwiLFwieVwiXSxbXCLUuFwiLFwiWVwiXSxbXCLVqVwiLFwidFwiXSxbXCLUuVwiLFwiVFwiXSxbXCLVqlwiLFwiemhcIl0sW1wi1LpcIixcIlpoXCJdLFtcItWrXCIsXCJpXCJdLFtcItS7XCIsXCJJXCJdLFtcItWsXCIsXCJsXCJdLFtcItS8XCIsXCJMXCJdLFtcItWtXCIsXCJraFwiXSxbXCLUvVwiLFwiS2hcIl0sW1wi1a5cIixcInRzXCJdLFtcItS+XCIsXCJUc1wiXSxbXCLVr1wiLFwia1wiXSxbXCLUv1wiLFwiS1wiXSxbXCLVsFwiLFwiaFwiXSxbXCLVgFwiLFwiSFwiXSxbXCLVsVwiLFwiZHpcIl0sW1wi1YFcIixcIkR6XCJdLFtcItWyXCIsXCJnaFwiXSxbXCLVglwiLFwiR2hcIl0sW1wi1bNcIixcInRjaFwiXSxbXCLVg1wiLFwiVGNoXCJdLFtcItW0XCIsXCJtXCJdLFtcItWEXCIsXCJNXCJdLFtcItW1XCIsXCJ5XCJdLFtcItWFXCIsXCJZXCJdLFtcItW2XCIsXCJuXCJdLFtcItWGXCIsXCJOXCJdLFtcItW3XCIsXCJzaFwiXSxbXCLVh1wiLFwiU2hcIl0sW1wi1bhcIixcInZvXCJdLFtcItWIXCIsXCJWb1wiXSxbXCLVuVwiLFwiY2hcIl0sW1wi1YlcIixcIkNoXCJdLFtcItW6XCIsXCJwXCJdLFtcItWKXCIsXCJQXCJdLFtcItW7XCIsXCJqXCJdLFtcItWLXCIsXCJKXCJdLFtcItW8XCIsXCJyXCJdLFtcItWMXCIsXCJSXCJdLFtcItW9XCIsXCJzXCJdLFtcItWNXCIsXCJTXCJdLFtcItW+XCIsXCJ2XCJdLFtcItWOXCIsXCJWXCJdLFtcItW/XCIsXCJ0XCJdLFtcItWPXCIsXCJUXCJdLFtcItaAXCIsXCJyXCJdLFtcItWQXCIsXCJSXCJdLFtcItaBXCIsXCJjXCJdLFtcItWRXCIsXCJDXCJdLFtcItW41oJcIixcInVcIl0sW1wi1YjVklwiLFwiVVwiXSxbXCLViNaCXCIsXCJVXCJdLFtcItaDXCIsXCJwXCJdLFtcItWTXCIsXCJQXCJdLFtcItaEXCIsXCJxXCJdLFtcItWUXCIsXCJRXCJdLFtcItaFXCIsXCJvXCJdLFtcItWVXCIsXCJPXCJdLFtcItaGXCIsXCJmXCJdLFtcItWWXCIsXCJGXCJdLFtcItaHXCIsXCJ5ZXZcIl0sW1wi4YOQXCIsXCJhXCJdLFtcIuGDkVwiLFwiYlwiXSxbXCLhg5JcIixcImdcIl0sW1wi4YOTXCIsXCJkXCJdLFtcIuGDlFwiLFwiZVwiXSxbXCLhg5VcIixcInZcIl0sW1wi4YOWXCIsXCJ6XCJdLFtcIuGDl1wiLFwidFwiXSxbXCLhg5hcIixcImlcIl0sW1wi4YOZXCIsXCJrXCJdLFtcIuGDmlwiLFwibFwiXSxbXCLhg5tcIixcIm1cIl0sW1wi4YOcXCIsXCJuXCJdLFtcIuGDnVwiLFwib1wiXSxbXCLhg55cIixcInBcIl0sW1wi4YOfXCIsXCJ6aFwiXSxbXCLhg6BcIixcInJcIl0sW1wi4YOhXCIsXCJzXCJdLFtcIuGDolwiLFwidFwiXSxbXCLhg6NcIixcInVcIl0sW1wi4YOkXCIsXCJwaFwiXSxbXCLhg6VcIixcInFcIl0sW1wi4YOmXCIsXCJnaFwiXSxbXCLhg6dcIixcImtcIl0sW1wi4YOoXCIsXCJzaFwiXSxbXCLhg6lcIixcImNoXCJdLFtcIuGDqlwiLFwidHNcIl0sW1wi4YOrXCIsXCJkelwiXSxbXCLhg6xcIixcInRzXCJdLFtcIuGDrVwiLFwidGNoXCJdLFtcIuGDrlwiLFwia2hcIl0sW1wi4YOvXCIsXCJqXCJdLFtcIuGDsFwiLFwiaFwiXSxbXCLEjVwiLFwiY1wiXSxbXCLEj1wiLFwiZFwiXSxbXCLEm1wiLFwiZVwiXSxbXCLFiFwiLFwiblwiXSxbXCLFmVwiLFwiclwiXSxbXCLFoVwiLFwic1wiXSxbXCLFpVwiLFwidFwiXSxbXCLFr1wiLFwidVwiXSxbXCLFvlwiLFwielwiXSxbXCLEjFwiLFwiQ1wiXSxbXCLEjlwiLFwiRFwiXSxbXCLEmlwiLFwiRVwiXSxbXCLFh1wiLFwiTlwiXSxbXCLFmFwiLFwiUlwiXSxbXCLFoFwiLFwiU1wiXSxbXCLFpFwiLFwiVFwiXSxbXCLFrlwiLFwiVVwiXSxbXCLFvVwiLFwiWlwiXSxbXCLegFwiLFwiaFwiXSxbXCLegVwiLFwic2hcIl0sW1wi3oJcIixcIm5cIl0sW1wi3oNcIixcInJcIl0sW1wi3oRcIixcImJcIl0sW1wi3oVcIixcImxoXCJdLFtcIt6GXCIsXCJrXCJdLFtcIt6HXCIsXCJhXCJdLFtcIt6IXCIsXCJ2XCJdLFtcIt6JXCIsXCJtXCJdLFtcIt6KXCIsXCJmXCJdLFtcIt6LXCIsXCJkaFwiXSxbXCLejFwiLFwidGhcIl0sW1wi3o1cIixcImxcIl0sW1wi3o5cIixcImdcIl0sW1wi3o9cIixcImduXCJdLFtcIt6QXCIsXCJzXCJdLFtcIt6RXCIsXCJkXCJdLFtcIt6SXCIsXCJ6XCJdLFtcIt6TXCIsXCJ0XCJdLFtcIt6UXCIsXCJ5XCJdLFtcIt6VXCIsXCJwXCJdLFtcIt6WXCIsXCJqXCJdLFtcIt6XXCIsXCJjaFwiXSxbXCLemFwiLFwidHRcIl0sW1wi3plcIixcImhoXCJdLFtcIt6aXCIsXCJraFwiXSxbXCLem1wiLFwidGhcIl0sW1wi3pxcIixcInpcIl0sW1wi3p1cIixcInNoXCJdLFtcIt6eXCIsXCJzXCJdLFtcIt6fXCIsXCJkXCJdLFtcIt6gXCIsXCJ0XCJdLFtcIt6hXCIsXCJ6XCJdLFtcIt6iXCIsXCJhXCJdLFtcIt6jXCIsXCJnaFwiXSxbXCLepFwiLFwicVwiXSxbXCLepVwiLFwid1wiXSxbXCLeplwiLFwiYVwiXSxbXCLep1wiLFwiYWFcIl0sW1wi3qhcIixcImlcIl0sW1wi3qlcIixcImVlXCJdLFtcIt6qXCIsXCJ1XCJdLFtcIt6rXCIsXCJvb1wiXSxbXCLerFwiLFwiZVwiXSxbXCLerVwiLFwiZXlcIl0sW1wi3q5cIixcIm9cIl0sW1wi3q9cIixcIm9hXCJdLFtcIt6wXCIsXCJcIl0sW1wizrFcIixcImFcIl0sW1wizrJcIixcInZcIl0sW1wizrNcIixcImdcIl0sW1wizrRcIixcImRcIl0sW1wizrVcIixcImVcIl0sW1wizrZcIixcInpcIl0sW1wizrdcIixcImlcIl0sW1wizrhcIixcInRoXCJdLFtcIs65XCIsXCJpXCJdLFtcIs66XCIsXCJrXCJdLFtcIs67XCIsXCJsXCJdLFtcIs68XCIsXCJtXCJdLFtcIs69XCIsXCJuXCJdLFtcIs6+XCIsXCJrc1wiXSxbXCLOv1wiLFwib1wiXSxbXCLPgFwiLFwicFwiXSxbXCLPgVwiLFwiclwiXSxbXCLPg1wiLFwic1wiXSxbXCLPhFwiLFwidFwiXSxbXCLPhVwiLFwieVwiXSxbXCLPhlwiLFwiZlwiXSxbXCLPh1wiLFwieFwiXSxbXCLPiFwiLFwicHNcIl0sW1wiz4lcIixcIm9cIl0sW1wizqxcIixcImFcIl0sW1wizq1cIixcImVcIl0sW1wizq9cIixcImlcIl0sW1wiz4xcIixcIm9cIl0sW1wiz41cIixcInlcIl0sW1wizq5cIixcImlcIl0sW1wiz45cIixcIm9cIl0sW1wiz4JcIixcInNcIl0sW1wiz4pcIixcImlcIl0sW1wizrBcIixcInlcIl0sW1wiz4tcIixcInlcIl0sW1wizpBcIixcImlcIl0sW1wizpFcIixcIkFcIl0sW1wizpJcIixcIkJcIl0sW1wizpNcIixcIkdcIl0sW1wizpRcIixcIkRcIl0sW1wizpVcIixcIkVcIl0sW1wizpZcIixcIlpcIl0sW1wizpdcIixcIklcIl0sW1wizphcIixcIlRIXCJdLFtcIs6ZXCIsXCJJXCJdLFtcIs6aXCIsXCJLXCJdLFtcIs6bXCIsXCJMXCJdLFtcIs6cXCIsXCJNXCJdLFtcIs6dXCIsXCJOXCJdLFtcIs6eXCIsXCJLU1wiXSxbXCLOn1wiLFwiT1wiXSxbXCLOoFwiLFwiUFwiXSxbXCLOoVwiLFwiUlwiXSxbXCLOo1wiLFwiU1wiXSxbXCLOpFwiLFwiVFwiXSxbXCLOpVwiLFwiWVwiXSxbXCLOplwiLFwiRlwiXSxbXCLOp1wiLFwiWFwiXSxbXCLOqFwiLFwiUFNcIl0sW1wizqlcIixcIk9cIl0sW1wizoZcIixcIkFcIl0sW1wizohcIixcIkVcIl0sW1wizopcIixcIklcIl0sW1wizoxcIixcIk9cIl0sW1wizo5cIixcIllcIl0sW1wizolcIixcIklcIl0sW1wizo9cIixcIk9cIl0sW1wizqpcIixcIklcIl0sW1wizqtcIixcIllcIl0sW1wixIFcIixcImFcIl0sW1wixJNcIixcImVcIl0sW1wixKNcIixcImdcIl0sW1wixKtcIixcImlcIl0sW1wixLdcIixcImtcIl0sW1wixLxcIixcImxcIl0sW1wixYZcIixcIm5cIl0sW1wixatcIixcInVcIl0sW1wixIBcIixcIkFcIl0sW1wixJJcIixcIkVcIl0sW1wixKJcIixcIkdcIl0sW1wixKpcIixcIklcIl0sW1wixLZcIixcIktcIl0sW1wixLtcIixcIkxcIl0sW1wixYVcIixcIk5cIl0sW1wixapcIixcIlVcIl0sW1wixI1cIixcImNcIl0sW1wixaFcIixcInNcIl0sW1wixb5cIixcInpcIl0sW1wixIxcIixcIkNcIl0sW1wixaBcIixcIlNcIl0sW1wixb1cIixcIlpcIl0sW1wixIVcIixcImFcIl0sW1wixI1cIixcImNcIl0sW1wixJlcIixcImVcIl0sW1wixJdcIixcImVcIl0sW1wixK9cIixcImlcIl0sW1wixaFcIixcInNcIl0sW1wixbNcIixcInVcIl0sW1wixatcIixcInVcIl0sW1wixb5cIixcInpcIl0sW1wixIRcIixcIkFcIl0sW1wixIxcIixcIkNcIl0sW1wixJhcIixcIkVcIl0sW1wixJZcIixcIkVcIl0sW1wixK5cIixcIklcIl0sW1wixaBcIixcIlNcIl0sW1wixbJcIixcIlVcIl0sW1wixapcIixcIlVcIl0sW1wi0IxcIixcIktqXCJdLFtcItGcXCIsXCJralwiXSxbXCLQiVwiLFwiTGpcIl0sW1wi0ZlcIixcImxqXCJdLFtcItCKXCIsXCJOalwiXSxbXCLRmlwiLFwibmpcIl0sW1wi0KLRgVwiLFwiVHNcIl0sW1wi0YLRgVwiLFwidHNcIl0sW1wixIVcIixcImFcIl0sW1wixIdcIixcImNcIl0sW1wixJlcIixcImVcIl0sW1wixYJcIixcImxcIl0sW1wixYRcIixcIm5cIl0sW1wixZtcIixcInNcIl0sW1wixbpcIixcInpcIl0sW1wixbxcIixcInpcIl0sW1wixIRcIixcIkFcIl0sW1wixIZcIixcIkNcIl0sW1wixJhcIixcIkVcIl0sW1wixYFcIixcIkxcIl0sW1wixYNcIixcIk5cIl0sW1wixZpcIixcIlNcIl0sW1wixblcIixcIlpcIl0sW1wixbtcIixcIlpcIl0sW1wi0IRcIixcIlllXCJdLFtcItCGXCIsXCJJXCJdLFtcItCHXCIsXCJZaVwiXSxbXCLSkFwiLFwiR1wiXSxbXCLRlFwiLFwieWVcIl0sW1wi0ZZcIixcImlcIl0sW1wi0ZdcIixcInlpXCJdLFtcItKRXCIsXCJnXCJdLFtcIsSyXCIsXCJJSlwiXSxbXCLEs1wiLFwiaWpcIl0sW1wiwqJcIixcImNcIl0sW1wiwqVcIixcIllcIl0sW1wi379cIixcImJcIl0sW1wi4KezXCIsXCJ0XCJdLFtcIuCrsVwiLFwiQm9cIl0sW1wi4Li/XCIsXCJCXCJdLFtcIuKCoFwiLFwiQ0VcIl0sW1wi4oKhXCIsXCJDXCJdLFtcIuKColwiLFwiQ3JcIl0sW1wi4oKjXCIsXCJGXCJdLFtcIuKCpVwiLFwibVwiXSxbXCLigqZcIixcIk5cIl0sW1wi4oKnXCIsXCJQdFwiXSxbXCLigqhcIixcIlJzXCJdLFtcIuKCqVwiLFwiV1wiXSxbXCLigqtcIixcInNcIl0sW1wi4oKsXCIsXCJFXCJdLFtcIuKCrVwiLFwiS1wiXSxbXCLigq5cIixcIlRcIl0sW1wi4oKvXCIsXCJEcFwiXSxbXCLigrBcIixcIlNcIl0sW1wi4oKxXCIsXCJQXCJdLFtcIuKCslwiLFwiR1wiXSxbXCLigrNcIixcIkFcIl0sW1wi4oK0XCIsXCJTXCJdLFtcIuKCtVwiLFwiQ1wiXSxbXCLigrZcIixcInR0XCJdLFtcIuKCt1wiLFwiU1wiXSxbXCLigrhcIixcIlRcIl0sW1wi4oK5XCIsXCJSXCJdLFtcIuKCulwiLFwiTFwiXSxbXCLigr1cIixcIlBcIl0sW1wi4oK/XCIsXCJCXCJdLFtcIu+5qVwiLFwiJFwiXSxbXCLvv6BcIixcImNcIl0sW1wi77+lXCIsXCJZXCJdLFtcIu+/plwiLFwiV1wiXSxbXCLwnZCAXCIsXCJBXCJdLFtcIvCdkIFcIixcIkJcIl0sW1wi8J2QglwiLFwiQ1wiXSxbXCLwnZCDXCIsXCJEXCJdLFtcIvCdkIRcIixcIkVcIl0sW1wi8J2QhVwiLFwiRlwiXSxbXCLwnZCGXCIsXCJHXCJdLFtcIvCdkIdcIixcIkhcIl0sW1wi8J2QiFwiLFwiSVwiXSxbXCLwnZCJXCIsXCJKXCJdLFtcIvCdkIpcIixcIktcIl0sW1wi8J2Qi1wiLFwiTFwiXSxbXCLwnZCMXCIsXCJNXCJdLFtcIvCdkI1cIixcIk5cIl0sW1wi8J2QjlwiLFwiT1wiXSxbXCLwnZCPXCIsXCJQXCJdLFtcIvCdkJBcIixcIlFcIl0sW1wi8J2QkVwiLFwiUlwiXSxbXCLwnZCSXCIsXCJTXCJdLFtcIvCdkJNcIixcIlRcIl0sW1wi8J2QlFwiLFwiVVwiXSxbXCLwnZCVXCIsXCJWXCJdLFtcIvCdkJZcIixcIldcIl0sW1wi8J2Ql1wiLFwiWFwiXSxbXCLwnZCYXCIsXCJZXCJdLFtcIvCdkJlcIixcIlpcIl0sW1wi8J2QmlwiLFwiYVwiXSxbXCLwnZCbXCIsXCJiXCJdLFtcIvCdkJxcIixcImNcIl0sW1wi8J2QnVwiLFwiZFwiXSxbXCLwnZCeXCIsXCJlXCJdLFtcIvCdkJ9cIixcImZcIl0sW1wi8J2QoFwiLFwiZ1wiXSxbXCLwnZChXCIsXCJoXCJdLFtcIvCdkKJcIixcImlcIl0sW1wi8J2Qo1wiLFwialwiXSxbXCLwnZCkXCIsXCJrXCJdLFtcIvCdkKVcIixcImxcIl0sW1wi8J2QplwiLFwibVwiXSxbXCLwnZCnXCIsXCJuXCJdLFtcIvCdkKhcIixcIm9cIl0sW1wi8J2QqVwiLFwicFwiXSxbXCLwnZCqXCIsXCJxXCJdLFtcIvCdkKtcIixcInJcIl0sW1wi8J2QrFwiLFwic1wiXSxbXCLwnZCtXCIsXCJ0XCJdLFtcIvCdkK5cIixcInVcIl0sW1wi8J2Qr1wiLFwidlwiXSxbXCLwnZCwXCIsXCJ3XCJdLFtcIvCdkLFcIixcInhcIl0sW1wi8J2QslwiLFwieVwiXSxbXCLwnZCzXCIsXCJ6XCJdLFtcIvCdkLRcIixcIkFcIl0sW1wi8J2QtVwiLFwiQlwiXSxbXCLwnZC2XCIsXCJDXCJdLFtcIvCdkLdcIixcIkRcIl0sW1wi8J2QuFwiLFwiRVwiXSxbXCLwnZC5XCIsXCJGXCJdLFtcIvCdkLpcIixcIkdcIl0sW1wi8J2Qu1wiLFwiSFwiXSxbXCLwnZC8XCIsXCJJXCJdLFtcIvCdkL1cIixcIkpcIl0sW1wi8J2QvlwiLFwiS1wiXSxbXCLwnZC/XCIsXCJMXCJdLFtcIvCdkYBcIixcIk1cIl0sW1wi8J2RgVwiLFwiTlwiXSxbXCLwnZGCXCIsXCJPXCJdLFtcIvCdkYNcIixcIlBcIl0sW1wi8J2RhFwiLFwiUVwiXSxbXCLwnZGFXCIsXCJSXCJdLFtcIvCdkYZcIixcIlNcIl0sW1wi8J2Rh1wiLFwiVFwiXSxbXCLwnZGIXCIsXCJVXCJdLFtcIvCdkYlcIixcIlZcIl0sW1wi8J2RilwiLFwiV1wiXSxbXCLwnZGLXCIsXCJYXCJdLFtcIvCdkYxcIixcIllcIl0sW1wi8J2RjVwiLFwiWlwiXSxbXCLwnZGOXCIsXCJhXCJdLFtcIvCdkY9cIixcImJcIl0sW1wi8J2RkFwiLFwiY1wiXSxbXCLwnZGRXCIsXCJkXCJdLFtcIvCdkZJcIixcImVcIl0sW1wi8J2Rk1wiLFwiZlwiXSxbXCLwnZGUXCIsXCJnXCJdLFtcIvCdkZZcIixcImlcIl0sW1wi8J2Rl1wiLFwialwiXSxbXCLwnZGYXCIsXCJrXCJdLFtcIvCdkZlcIixcImxcIl0sW1wi8J2RmlwiLFwibVwiXSxbXCLwnZGbXCIsXCJuXCJdLFtcIvCdkZxcIixcIm9cIl0sW1wi8J2RnVwiLFwicFwiXSxbXCLwnZGeXCIsXCJxXCJdLFtcIvCdkZ9cIixcInJcIl0sW1wi8J2RoFwiLFwic1wiXSxbXCLwnZGhXCIsXCJ0XCJdLFtcIvCdkaJcIixcInVcIl0sW1wi8J2Ro1wiLFwidlwiXSxbXCLwnZGkXCIsXCJ3XCJdLFtcIvCdkaVcIixcInhcIl0sW1wi8J2RplwiLFwieVwiXSxbXCLwnZGnXCIsXCJ6XCJdLFtcIvCdkahcIixcIkFcIl0sW1wi8J2RqVwiLFwiQlwiXSxbXCLwnZGqXCIsXCJDXCJdLFtcIvCdkatcIixcIkRcIl0sW1wi8J2RrFwiLFwiRVwiXSxbXCLwnZGtXCIsXCJGXCJdLFtcIvCdka5cIixcIkdcIl0sW1wi8J2Rr1wiLFwiSFwiXSxbXCLwnZGwXCIsXCJJXCJdLFtcIvCdkbFcIixcIkpcIl0sW1wi8J2RslwiLFwiS1wiXSxbXCLwnZGzXCIsXCJMXCJdLFtcIvCdkbRcIixcIk1cIl0sW1wi8J2RtVwiLFwiTlwiXSxbXCLwnZG2XCIsXCJPXCJdLFtcIvCdkbdcIixcIlBcIl0sW1wi8J2RuFwiLFwiUVwiXSxbXCLwnZG5XCIsXCJSXCJdLFtcIvCdkbpcIixcIlNcIl0sW1wi8J2Ru1wiLFwiVFwiXSxbXCLwnZG8XCIsXCJVXCJdLFtcIvCdkb1cIixcIlZcIl0sW1wi8J2RvlwiLFwiV1wiXSxbXCLwnZG/XCIsXCJYXCJdLFtcIvCdkoBcIixcIllcIl0sW1wi8J2SgVwiLFwiWlwiXSxbXCLwnZKCXCIsXCJhXCJdLFtcIvCdkoNcIixcImJcIl0sW1wi8J2ShFwiLFwiY1wiXSxbXCLwnZKFXCIsXCJkXCJdLFtcIvCdkoZcIixcImVcIl0sW1wi8J2Sh1wiLFwiZlwiXSxbXCLwnZKIXCIsXCJnXCJdLFtcIvCdkolcIixcImhcIl0sW1wi8J2SilwiLFwiaVwiXSxbXCLwnZKLXCIsXCJqXCJdLFtcIvCdkoxcIixcImtcIl0sW1wi8J2SjVwiLFwibFwiXSxbXCLwnZKOXCIsXCJtXCJdLFtcIvCdko9cIixcIm5cIl0sW1wi8J2SkFwiLFwib1wiXSxbXCLwnZKRXCIsXCJwXCJdLFtcIvCdkpJcIixcInFcIl0sW1wi8J2Sk1wiLFwiclwiXSxbXCLwnZKUXCIsXCJzXCJdLFtcIvCdkpVcIixcInRcIl0sW1wi8J2SllwiLFwidVwiXSxbXCLwnZKXXCIsXCJ2XCJdLFtcIvCdkphcIixcIndcIl0sW1wi8J2SmVwiLFwieFwiXSxbXCLwnZKaXCIsXCJ5XCJdLFtcIvCdkptcIixcInpcIl0sW1wi8J2SnFwiLFwiQVwiXSxbXCLwnZKeXCIsXCJDXCJdLFtcIvCdkp9cIixcIkRcIl0sW1wi8J2SolwiLFwiZ1wiXSxbXCLwnZKlXCIsXCJKXCJdLFtcIvCdkqZcIixcIktcIl0sW1wi8J2SqVwiLFwiTlwiXSxbXCLwnZKqXCIsXCJPXCJdLFtcIvCdkqtcIixcIlBcIl0sW1wi8J2SrFwiLFwiUVwiXSxbXCLwnZKuXCIsXCJTXCJdLFtcIvCdkq9cIixcIlRcIl0sW1wi8J2SsFwiLFwiVVwiXSxbXCLwnZKxXCIsXCJWXCJdLFtcIvCdkrJcIixcIldcIl0sW1wi8J2Ss1wiLFwiWFwiXSxbXCLwnZK0XCIsXCJZXCJdLFtcIvCdkrVcIixcIlpcIl0sW1wi8J2StlwiLFwiYVwiXSxbXCLwnZK3XCIsXCJiXCJdLFtcIvCdkrhcIixcImNcIl0sW1wi8J2SuVwiLFwiZFwiXSxbXCLwnZK7XCIsXCJmXCJdLFtcIvCdkr1cIixcImhcIl0sW1wi8J2SvlwiLFwiaVwiXSxbXCLwnZK/XCIsXCJqXCJdLFtcIvCdk4BcIixcImhcIl0sW1wi8J2TgVwiLFwibFwiXSxbXCLwnZOCXCIsXCJtXCJdLFtcIvCdk4NcIixcIm5cIl0sW1wi8J2ThVwiLFwicFwiXSxbXCLwnZOGXCIsXCJxXCJdLFtcIvCdk4dcIixcInJcIl0sW1wi8J2TiFwiLFwic1wiXSxbXCLwnZOJXCIsXCJ0XCJdLFtcIvCdk4pcIixcInVcIl0sW1wi8J2Ti1wiLFwidlwiXSxbXCLwnZOMXCIsXCJ3XCJdLFtcIvCdk41cIixcInhcIl0sW1wi8J2TjlwiLFwieVwiXSxbXCLwnZOPXCIsXCJ6XCJdLFtcIvCdk5BcIixcIkFcIl0sW1wi8J2TkVwiLFwiQlwiXSxbXCLwnZOSXCIsXCJDXCJdLFtcIvCdk5NcIixcIkRcIl0sW1wi8J2TlFwiLFwiRVwiXSxbXCLwnZOVXCIsXCJGXCJdLFtcIvCdk5ZcIixcIkdcIl0sW1wi8J2Tl1wiLFwiSFwiXSxbXCLwnZOYXCIsXCJJXCJdLFtcIvCdk5lcIixcIkpcIl0sW1wi8J2TmlwiLFwiS1wiXSxbXCLwnZObXCIsXCJMXCJdLFtcIvCdk5xcIixcIk1cIl0sW1wi8J2TnVwiLFwiTlwiXSxbXCLwnZOeXCIsXCJPXCJdLFtcIvCdk59cIixcIlBcIl0sW1wi8J2ToFwiLFwiUVwiXSxbXCLwnZOhXCIsXCJSXCJdLFtcIvCdk6JcIixcIlNcIl0sW1wi8J2To1wiLFwiVFwiXSxbXCLwnZOkXCIsXCJVXCJdLFtcIvCdk6VcIixcIlZcIl0sW1wi8J2TplwiLFwiV1wiXSxbXCLwnZOnXCIsXCJYXCJdLFtcIvCdk6hcIixcIllcIl0sW1wi8J2TqVwiLFwiWlwiXSxbXCLwnZOqXCIsXCJhXCJdLFtcIvCdk6tcIixcImJcIl0sW1wi8J2TrFwiLFwiY1wiXSxbXCLwnZOtXCIsXCJkXCJdLFtcIvCdk65cIixcImVcIl0sW1wi8J2Tr1wiLFwiZlwiXSxbXCLwnZOwXCIsXCJnXCJdLFtcIvCdk7FcIixcImhcIl0sW1wi8J2TslwiLFwiaVwiXSxbXCLwnZOzXCIsXCJqXCJdLFtcIvCdk7RcIixcImtcIl0sW1wi8J2TtVwiLFwibFwiXSxbXCLwnZO2XCIsXCJtXCJdLFtcIvCdk7dcIixcIm5cIl0sW1wi8J2TuFwiLFwib1wiXSxbXCLwnZO5XCIsXCJwXCJdLFtcIvCdk7pcIixcInFcIl0sW1wi8J2Tu1wiLFwiclwiXSxbXCLwnZO8XCIsXCJzXCJdLFtcIvCdk71cIixcInRcIl0sW1wi8J2TvlwiLFwidVwiXSxbXCLwnZO/XCIsXCJ2XCJdLFtcIvCdlIBcIixcIndcIl0sW1wi8J2UgVwiLFwieFwiXSxbXCLwnZSCXCIsXCJ5XCJdLFtcIvCdlINcIixcInpcIl0sW1wi8J2UhFwiLFwiQVwiXSxbXCLwnZSFXCIsXCJCXCJdLFtcIvCdlIdcIixcIkRcIl0sW1wi8J2UiFwiLFwiRVwiXSxbXCLwnZSJXCIsXCJGXCJdLFtcIvCdlIpcIixcIkdcIl0sW1wi8J2UjVwiLFwiSlwiXSxbXCLwnZSOXCIsXCJLXCJdLFtcIvCdlI9cIixcIkxcIl0sW1wi8J2UkFwiLFwiTVwiXSxbXCLwnZSRXCIsXCJOXCJdLFtcIvCdlJJcIixcIk9cIl0sW1wi8J2Uk1wiLFwiUFwiXSxbXCLwnZSUXCIsXCJRXCJdLFtcIvCdlJZcIixcIlNcIl0sW1wi8J2Ul1wiLFwiVFwiXSxbXCLwnZSYXCIsXCJVXCJdLFtcIvCdlJlcIixcIlZcIl0sW1wi8J2UmlwiLFwiV1wiXSxbXCLwnZSbXCIsXCJYXCJdLFtcIvCdlJxcIixcIllcIl0sW1wi8J2UnlwiLFwiYVwiXSxbXCLwnZSfXCIsXCJiXCJdLFtcIvCdlKBcIixcImNcIl0sW1wi8J2UoVwiLFwiZFwiXSxbXCLwnZSiXCIsXCJlXCJdLFtcIvCdlKNcIixcImZcIl0sW1wi8J2UpFwiLFwiZ1wiXSxbXCLwnZSlXCIsXCJoXCJdLFtcIvCdlKZcIixcImlcIl0sW1wi8J2Up1wiLFwialwiXSxbXCLwnZSoXCIsXCJrXCJdLFtcIvCdlKlcIixcImxcIl0sW1wi8J2UqlwiLFwibVwiXSxbXCLwnZSrXCIsXCJuXCJdLFtcIvCdlKxcIixcIm9cIl0sW1wi8J2UrVwiLFwicFwiXSxbXCLwnZSuXCIsXCJxXCJdLFtcIvCdlK9cIixcInJcIl0sW1wi8J2UsFwiLFwic1wiXSxbXCLwnZSxXCIsXCJ0XCJdLFtcIvCdlLJcIixcInVcIl0sW1wi8J2Us1wiLFwidlwiXSxbXCLwnZS0XCIsXCJ3XCJdLFtcIvCdlLVcIixcInhcIl0sW1wi8J2UtlwiLFwieVwiXSxbXCLwnZS3XCIsXCJ6XCJdLFtcIvCdlLhcIixcIkFcIl0sW1wi8J2UuVwiLFwiQlwiXSxbXCLwnZS7XCIsXCJEXCJdLFtcIvCdlLxcIixcIkVcIl0sW1wi8J2UvVwiLFwiRlwiXSxbXCLwnZS+XCIsXCJHXCJdLFtcIvCdlYBcIixcIklcIl0sW1wi8J2VgVwiLFwiSlwiXSxbXCLwnZWCXCIsXCJLXCJdLFtcIvCdlYNcIixcIkxcIl0sW1wi8J2VhFwiLFwiTVwiXSxbXCLwnZWGXCIsXCJOXCJdLFtcIvCdlYpcIixcIlNcIl0sW1wi8J2Vi1wiLFwiVFwiXSxbXCLwnZWMXCIsXCJVXCJdLFtcIvCdlY1cIixcIlZcIl0sW1wi8J2VjlwiLFwiV1wiXSxbXCLwnZWPXCIsXCJYXCJdLFtcIvCdlZBcIixcIllcIl0sW1wi8J2VklwiLFwiYVwiXSxbXCLwnZWTXCIsXCJiXCJdLFtcIvCdlZRcIixcImNcIl0sW1wi8J2VlVwiLFwiZFwiXSxbXCLwnZWWXCIsXCJlXCJdLFtcIvCdlZdcIixcImZcIl0sW1wi8J2VmFwiLFwiZ1wiXSxbXCLwnZWZXCIsXCJoXCJdLFtcIvCdlZpcIixcImlcIl0sW1wi8J2Vm1wiLFwialwiXSxbXCLwnZWcXCIsXCJrXCJdLFtcIvCdlZ1cIixcImxcIl0sW1wi8J2VnlwiLFwibVwiXSxbXCLwnZWfXCIsXCJuXCJdLFtcIvCdlaBcIixcIm9cIl0sW1wi8J2VoVwiLFwicFwiXSxbXCLwnZWiXCIsXCJxXCJdLFtcIvCdlaNcIixcInJcIl0sW1wi8J2VpFwiLFwic1wiXSxbXCLwnZWlXCIsXCJ0XCJdLFtcIvCdlaZcIixcInVcIl0sW1wi8J2Vp1wiLFwidlwiXSxbXCLwnZWoXCIsXCJ3XCJdLFtcIvCdlalcIixcInhcIl0sW1wi8J2VqlwiLFwieVwiXSxbXCLwnZWrXCIsXCJ6XCJdLFtcIvCdlaxcIixcIkFcIl0sW1wi8J2VrVwiLFwiQlwiXSxbXCLwnZWuXCIsXCJDXCJdLFtcIvCdla9cIixcIkRcIl0sW1wi8J2VsFwiLFwiRVwiXSxbXCLwnZWxXCIsXCJGXCJdLFtcIvCdlbJcIixcIkdcIl0sW1wi8J2Vs1wiLFwiSFwiXSxbXCLwnZW0XCIsXCJJXCJdLFtcIvCdlbVcIixcIkpcIl0sW1wi8J2VtlwiLFwiS1wiXSxbXCLwnZW3XCIsXCJMXCJdLFtcIvCdlbhcIixcIk1cIl0sW1wi8J2VuVwiLFwiTlwiXSxbXCLwnZW6XCIsXCJPXCJdLFtcIvCdlbtcIixcIlBcIl0sW1wi8J2VvFwiLFwiUVwiXSxbXCLwnZW9XCIsXCJSXCJdLFtcIvCdlb5cIixcIlNcIl0sW1wi8J2Vv1wiLFwiVFwiXSxbXCLwnZaAXCIsXCJVXCJdLFtcIvCdloFcIixcIlZcIl0sW1wi8J2WglwiLFwiV1wiXSxbXCLwnZaDXCIsXCJYXCJdLFtcIvCdloRcIixcIllcIl0sW1wi8J2WhVwiLFwiWlwiXSxbXCLwnZaGXCIsXCJhXCJdLFtcIvCdlodcIixcImJcIl0sW1wi8J2WiFwiLFwiY1wiXSxbXCLwnZaJXCIsXCJkXCJdLFtcIvCdlopcIixcImVcIl0sW1wi8J2Wi1wiLFwiZlwiXSxbXCLwnZaMXCIsXCJnXCJdLFtcIvCdlo1cIixcImhcIl0sW1wi8J2WjlwiLFwiaVwiXSxbXCLwnZaPXCIsXCJqXCJdLFtcIvCdlpBcIixcImtcIl0sW1wi8J2WkVwiLFwibFwiXSxbXCLwnZaSXCIsXCJtXCJdLFtcIvCdlpNcIixcIm5cIl0sW1wi8J2WlFwiLFwib1wiXSxbXCLwnZaVXCIsXCJwXCJdLFtcIvCdlpZcIixcInFcIl0sW1wi8J2Wl1wiLFwiclwiXSxbXCLwnZaYXCIsXCJzXCJdLFtcIvCdlplcIixcInRcIl0sW1wi8J2WmlwiLFwidVwiXSxbXCLwnZabXCIsXCJ2XCJdLFtcIvCdlpxcIixcIndcIl0sW1wi8J2WnVwiLFwieFwiXSxbXCLwnZaeXCIsXCJ5XCJdLFtcIvCdlp9cIixcInpcIl0sW1wi8J2WoFwiLFwiQVwiXSxbXCLwnZahXCIsXCJCXCJdLFtcIvCdlqJcIixcIkNcIl0sW1wi8J2Wo1wiLFwiRFwiXSxbXCLwnZakXCIsXCJFXCJdLFtcIvCdlqVcIixcIkZcIl0sW1wi8J2WplwiLFwiR1wiXSxbXCLwnZanXCIsXCJIXCJdLFtcIvCdlqhcIixcIklcIl0sW1wi8J2WqVwiLFwiSlwiXSxbXCLwnZaqXCIsXCJLXCJdLFtcIvCdlqtcIixcIkxcIl0sW1wi8J2WrFwiLFwiTVwiXSxbXCLwnZatXCIsXCJOXCJdLFtcIvCdlq5cIixcIk9cIl0sW1wi8J2Wr1wiLFwiUFwiXSxbXCLwnZawXCIsXCJRXCJdLFtcIvCdlrFcIixcIlJcIl0sW1wi8J2WslwiLFwiU1wiXSxbXCLwnZazXCIsXCJUXCJdLFtcIvCdlrRcIixcIlVcIl0sW1wi8J2WtVwiLFwiVlwiXSxbXCLwnZa2XCIsXCJXXCJdLFtcIvCdlrdcIixcIlhcIl0sW1wi8J2WuFwiLFwiWVwiXSxbXCLwnZa5XCIsXCJaXCJdLFtcIvCdlrpcIixcImFcIl0sW1wi8J2Wu1wiLFwiYlwiXSxbXCLwnZa8XCIsXCJjXCJdLFtcIvCdlr1cIixcImRcIl0sW1wi8J2WvlwiLFwiZVwiXSxbXCLwnZa/XCIsXCJmXCJdLFtcIvCdl4BcIixcImdcIl0sW1wi8J2XgVwiLFwiaFwiXSxbXCLwnZeCXCIsXCJpXCJdLFtcIvCdl4NcIixcImpcIl0sW1wi8J2XhFwiLFwia1wiXSxbXCLwnZeFXCIsXCJsXCJdLFtcIvCdl4ZcIixcIm1cIl0sW1wi8J2Xh1wiLFwiblwiXSxbXCLwnZeIXCIsXCJvXCJdLFtcIvCdl4lcIixcInBcIl0sW1wi8J2XilwiLFwicVwiXSxbXCLwnZeLXCIsXCJyXCJdLFtcIvCdl4xcIixcInNcIl0sW1wi8J2XjVwiLFwidFwiXSxbXCLwnZeOXCIsXCJ1XCJdLFtcIvCdl49cIixcInZcIl0sW1wi8J2XkFwiLFwid1wiXSxbXCLwnZeRXCIsXCJ4XCJdLFtcIvCdl5JcIixcInlcIl0sW1wi8J2Xk1wiLFwielwiXSxbXCLwnZeUXCIsXCJBXCJdLFtcIvCdl5VcIixcIkJcIl0sW1wi8J2XllwiLFwiQ1wiXSxbXCLwnZeXXCIsXCJEXCJdLFtcIvCdl5hcIixcIkVcIl0sW1wi8J2XmVwiLFwiRlwiXSxbXCLwnZeaXCIsXCJHXCJdLFtcIvCdl5tcIixcIkhcIl0sW1wi8J2XnFwiLFwiSVwiXSxbXCLwnZedXCIsXCJKXCJdLFtcIvCdl55cIixcIktcIl0sW1wi8J2Xn1wiLFwiTFwiXSxbXCLwnZegXCIsXCJNXCJdLFtcIvCdl6FcIixcIk5cIl0sW1wi8J2XolwiLFwiT1wiXSxbXCLwnZejXCIsXCJQXCJdLFtcIvCdl6RcIixcIlFcIl0sW1wi8J2XpVwiLFwiUlwiXSxbXCLwnZemXCIsXCJTXCJdLFtcIvCdl6dcIixcIlRcIl0sW1wi8J2XqFwiLFwiVVwiXSxbXCLwnZepXCIsXCJWXCJdLFtcIvCdl6pcIixcIldcIl0sW1wi8J2Xq1wiLFwiWFwiXSxbXCLwnZesXCIsXCJZXCJdLFtcIvCdl61cIixcIlpcIl0sW1wi8J2XrlwiLFwiYVwiXSxbXCLwnZevXCIsXCJiXCJdLFtcIvCdl7BcIixcImNcIl0sW1wi8J2XsVwiLFwiZFwiXSxbXCLwnZeyXCIsXCJlXCJdLFtcIvCdl7NcIixcImZcIl0sW1wi8J2XtFwiLFwiZ1wiXSxbXCLwnZe1XCIsXCJoXCJdLFtcIvCdl7ZcIixcImlcIl0sW1wi8J2Xt1wiLFwialwiXSxbXCLwnZe4XCIsXCJrXCJdLFtcIvCdl7lcIixcImxcIl0sW1wi8J2XulwiLFwibVwiXSxbXCLwnZe7XCIsXCJuXCJdLFtcIvCdl7xcIixcIm9cIl0sW1wi8J2XvVwiLFwicFwiXSxbXCLwnZe+XCIsXCJxXCJdLFtcIvCdl79cIixcInJcIl0sW1wi8J2YgFwiLFwic1wiXSxbXCLwnZiBXCIsXCJ0XCJdLFtcIvCdmIJcIixcInVcIl0sW1wi8J2Yg1wiLFwidlwiXSxbXCLwnZiEXCIsXCJ3XCJdLFtcIvCdmIVcIixcInhcIl0sW1wi8J2YhlwiLFwieVwiXSxbXCLwnZiHXCIsXCJ6XCJdLFtcIvCdmIhcIixcIkFcIl0sW1wi8J2YiVwiLFwiQlwiXSxbXCLwnZiKXCIsXCJDXCJdLFtcIvCdmItcIixcIkRcIl0sW1wi8J2YjFwiLFwiRVwiXSxbXCLwnZiNXCIsXCJGXCJdLFtcIvCdmI5cIixcIkdcIl0sW1wi8J2Yj1wiLFwiSFwiXSxbXCLwnZiQXCIsXCJJXCJdLFtcIvCdmJFcIixcIkpcIl0sW1wi8J2YklwiLFwiS1wiXSxbXCLwnZiTXCIsXCJMXCJdLFtcIvCdmJRcIixcIk1cIl0sW1wi8J2YlVwiLFwiTlwiXSxbXCLwnZiWXCIsXCJPXCJdLFtcIvCdmJdcIixcIlBcIl0sW1wi8J2YmFwiLFwiUVwiXSxbXCLwnZiZXCIsXCJSXCJdLFtcIvCdmJpcIixcIlNcIl0sW1wi8J2Ym1wiLFwiVFwiXSxbXCLwnZicXCIsXCJVXCJdLFtcIvCdmJ1cIixcIlZcIl0sW1wi8J2YnlwiLFwiV1wiXSxbXCLwnZifXCIsXCJYXCJdLFtcIvCdmKBcIixcIllcIl0sW1wi8J2YoVwiLFwiWlwiXSxbXCLwnZiiXCIsXCJhXCJdLFtcIvCdmKNcIixcImJcIl0sW1wi8J2YpFwiLFwiY1wiXSxbXCLwnZilXCIsXCJkXCJdLFtcIvCdmKZcIixcImVcIl0sW1wi8J2Yp1wiLFwiZlwiXSxbXCLwnZioXCIsXCJnXCJdLFtcIvCdmKlcIixcImhcIl0sW1wi8J2YqlwiLFwiaVwiXSxbXCLwnZirXCIsXCJqXCJdLFtcIvCdmKxcIixcImtcIl0sW1wi8J2YrVwiLFwibFwiXSxbXCLwnZiuXCIsXCJtXCJdLFtcIvCdmK9cIixcIm5cIl0sW1wi8J2YsFwiLFwib1wiXSxbXCLwnZixXCIsXCJwXCJdLFtcIvCdmLJcIixcInFcIl0sW1wi8J2Ys1wiLFwiclwiXSxbXCLwnZi0XCIsXCJzXCJdLFtcIvCdmLVcIixcInRcIl0sW1wi8J2YtlwiLFwidVwiXSxbXCLwnZi3XCIsXCJ2XCJdLFtcIvCdmLhcIixcIndcIl0sW1wi8J2YuVwiLFwieFwiXSxbXCLwnZi6XCIsXCJ5XCJdLFtcIvCdmLtcIixcInpcIl0sW1wi8J2YvFwiLFwiQVwiXSxbXCLwnZi9XCIsXCJCXCJdLFtcIvCdmL5cIixcIkNcIl0sW1wi8J2Yv1wiLFwiRFwiXSxbXCLwnZmAXCIsXCJFXCJdLFtcIvCdmYFcIixcIkZcIl0sW1wi8J2ZglwiLFwiR1wiXSxbXCLwnZmDXCIsXCJIXCJdLFtcIvCdmYRcIixcIklcIl0sW1wi8J2ZhVwiLFwiSlwiXSxbXCLwnZmGXCIsXCJLXCJdLFtcIvCdmYdcIixcIkxcIl0sW1wi8J2ZiFwiLFwiTVwiXSxbXCLwnZmJXCIsXCJOXCJdLFtcIvCdmYpcIixcIk9cIl0sW1wi8J2Zi1wiLFwiUFwiXSxbXCLwnZmMXCIsXCJRXCJdLFtcIvCdmY1cIixcIlJcIl0sW1wi8J2ZjlwiLFwiU1wiXSxbXCLwnZmPXCIsXCJUXCJdLFtcIvCdmZBcIixcIlVcIl0sW1wi8J2ZkVwiLFwiVlwiXSxbXCLwnZmSXCIsXCJXXCJdLFtcIvCdmZNcIixcIlhcIl0sW1wi8J2ZlFwiLFwiWVwiXSxbXCLwnZmVXCIsXCJaXCJdLFtcIvCdmZZcIixcImFcIl0sW1wi8J2Zl1wiLFwiYlwiXSxbXCLwnZmYXCIsXCJjXCJdLFtcIvCdmZlcIixcImRcIl0sW1wi8J2ZmlwiLFwiZVwiXSxbXCLwnZmbXCIsXCJmXCJdLFtcIvCdmZxcIixcImdcIl0sW1wi8J2ZnVwiLFwiaFwiXSxbXCLwnZmeXCIsXCJpXCJdLFtcIvCdmZ9cIixcImpcIl0sW1wi8J2ZoFwiLFwia1wiXSxbXCLwnZmhXCIsXCJsXCJdLFtcIvCdmaJcIixcIm1cIl0sW1wi8J2Zo1wiLFwiblwiXSxbXCLwnZmkXCIsXCJvXCJdLFtcIvCdmaVcIixcInBcIl0sW1wi8J2ZplwiLFwicVwiXSxbXCLwnZmnXCIsXCJyXCJdLFtcIvCdmahcIixcInNcIl0sW1wi8J2ZqVwiLFwidFwiXSxbXCLwnZmqXCIsXCJ1XCJdLFtcIvCdmatcIixcInZcIl0sW1wi8J2ZrFwiLFwid1wiXSxbXCLwnZmtXCIsXCJ4XCJdLFtcIvCdma5cIixcInlcIl0sW1wi8J2Zr1wiLFwielwiXSxbXCLwnZmwXCIsXCJBXCJdLFtcIvCdmbFcIixcIkJcIl0sW1wi8J2ZslwiLFwiQ1wiXSxbXCLwnZmzXCIsXCJEXCJdLFtcIvCdmbRcIixcIkVcIl0sW1wi8J2ZtVwiLFwiRlwiXSxbXCLwnZm2XCIsXCJHXCJdLFtcIvCdmbdcIixcIkhcIl0sW1wi8J2ZuFwiLFwiSVwiXSxbXCLwnZm5XCIsXCJKXCJdLFtcIvCdmbpcIixcIktcIl0sW1wi8J2Zu1wiLFwiTFwiXSxbXCLwnZm8XCIsXCJNXCJdLFtcIvCdmb1cIixcIk5cIl0sW1wi8J2ZvlwiLFwiT1wiXSxbXCLwnZm/XCIsXCJQXCJdLFtcIvCdmoBcIixcIlFcIl0sW1wi8J2agVwiLFwiUlwiXSxbXCLwnZqCXCIsXCJTXCJdLFtcIvCdmoNcIixcIlRcIl0sW1wi8J2ahFwiLFwiVVwiXSxbXCLwnZqFXCIsXCJWXCJdLFtcIvCdmoZcIixcIldcIl0sW1wi8J2ah1wiLFwiWFwiXSxbXCLwnZqIXCIsXCJZXCJdLFtcIvCdmolcIixcIlpcIl0sW1wi8J2ailwiLFwiYVwiXSxbXCLwnZqLXCIsXCJiXCJdLFtcIvCdmoxcIixcImNcIl0sW1wi8J2ajVwiLFwiZFwiXSxbXCLwnZqOXCIsXCJlXCJdLFtcIvCdmo9cIixcImZcIl0sW1wi8J2akFwiLFwiZ1wiXSxbXCLwnZqRXCIsXCJoXCJdLFtcIvCdmpJcIixcImlcIl0sW1wi8J2ak1wiLFwialwiXSxbXCLwnZqUXCIsXCJrXCJdLFtcIvCdmpVcIixcImxcIl0sW1wi8J2allwiLFwibVwiXSxbXCLwnZqXXCIsXCJuXCJdLFtcIvCdmphcIixcIm9cIl0sW1wi8J2amVwiLFwicFwiXSxbXCLwnZqaXCIsXCJxXCJdLFtcIvCdmptcIixcInJcIl0sW1wi8J2anFwiLFwic1wiXSxbXCLwnZqdXCIsXCJ0XCJdLFtcIvCdmp5cIixcInVcIl0sW1wi8J2an1wiLFwidlwiXSxbXCLwnZqgXCIsXCJ3XCJdLFtcIvCdmqFcIixcInhcIl0sW1wi8J2aolwiLFwieVwiXSxbXCLwnZqjXCIsXCJ6XCJdLFtcIvCdmqRcIixcImxcIl0sW1wi8J2apVwiLFwialwiXSxbXCLwnZuiXCIsXCJBXCJdLFtcIvCdm6NcIixcIkJcIl0sW1wi8J2bpFwiLFwiR1wiXSxbXCLwnZulXCIsXCJEXCJdLFtcIvCdm6ZcIixcIkVcIl0sW1wi8J2bp1wiLFwiWlwiXSxbXCLwnZuoXCIsXCJJXCJdLFtcIvCdm6lcIixcIlRIXCJdLFtcIvCdm6pcIixcIklcIl0sW1wi8J2bq1wiLFwiS1wiXSxbXCLwnZusXCIsXCJMXCJdLFtcIvCdm61cIixcIk1cIl0sW1wi8J2brlwiLFwiTlwiXSxbXCLwnZuvXCIsXCJLU1wiXSxbXCLwnZuwXCIsXCJPXCJdLFtcIvCdm7FcIixcIlBcIl0sW1wi8J2bslwiLFwiUlwiXSxbXCLwnZuzXCIsXCJUSFwiXSxbXCLwnZu0XCIsXCJTXCJdLFtcIvCdm7VcIixcIlRcIl0sW1wi8J2btlwiLFwiWVwiXSxbXCLwnZu3XCIsXCJGXCJdLFtcIvCdm7hcIixcInhcIl0sW1wi8J2buVwiLFwiUFNcIl0sW1wi8J2bulwiLFwiT1wiXSxbXCLwnZu7XCIsXCJEXCJdLFtcIvCdm7xcIixcImFcIl0sW1wi8J2bvVwiLFwiYlwiXSxbXCLwnZu+XCIsXCJnXCJdLFtcIvCdm79cIixcImRcIl0sW1wi8J2cgFwiLFwiZVwiXSxbXCLwnZyBXCIsXCJ6XCJdLFtcIvCdnIJcIixcImlcIl0sW1wi8J2cg1wiLFwidGhcIl0sW1wi8J2chFwiLFwiaVwiXSxbXCLwnZyFXCIsXCJrXCJdLFtcIvCdnIZcIixcImxcIl0sW1wi8J2ch1wiLFwibVwiXSxbXCLwnZyIXCIsXCJuXCJdLFtcIvCdnIlcIixcImtzXCJdLFtcIvCdnIpcIixcIm9cIl0sW1wi8J2ci1wiLFwicFwiXSxbXCLwnZyMXCIsXCJyXCJdLFtcIvCdnI1cIixcInNcIl0sW1wi8J2cjlwiLFwic1wiXSxbXCLwnZyPXCIsXCJ0XCJdLFtcIvCdnJBcIixcInlcIl0sW1wi8J2ckVwiLFwiZlwiXSxbXCLwnZySXCIsXCJ4XCJdLFtcIvCdnJNcIixcInBzXCJdLFtcIvCdnJRcIixcIm9cIl0sW1wi8J2clVwiLFwiZFwiXSxbXCLwnZyWXCIsXCJFXCJdLFtcIvCdnJdcIixcIlRIXCJdLFtcIvCdnJhcIixcIktcIl0sW1wi8J2cmVwiLFwiZlwiXSxbXCLwnZyaXCIsXCJyXCJdLFtcIvCdnJtcIixcInBcIl0sW1wi8J2cnFwiLFwiQVwiXSxbXCLwnZydXCIsXCJWXCJdLFtcIvCdnJ5cIixcIkdcIl0sW1wi8J2cn1wiLFwiRFwiXSxbXCLwnZygXCIsXCJFXCJdLFtcIvCdnKFcIixcIlpcIl0sW1wi8J2colwiLFwiSVwiXSxbXCLwnZyjXCIsXCJUSFwiXSxbXCLwnZykXCIsXCJJXCJdLFtcIvCdnKVcIixcIktcIl0sW1wi8J2cplwiLFwiTFwiXSxbXCLwnZynXCIsXCJNXCJdLFtcIvCdnKhcIixcIk5cIl0sW1wi8J2cqVwiLFwiS1NcIl0sW1wi8J2cqlwiLFwiT1wiXSxbXCLwnZyrXCIsXCJQXCJdLFtcIvCdnKxcIixcIlNcIl0sW1wi8J2crVwiLFwiVEhcIl0sW1wi8J2crlwiLFwiU1wiXSxbXCLwnZyvXCIsXCJUXCJdLFtcIvCdnLBcIixcIllcIl0sW1wi8J2csVwiLFwiRlwiXSxbXCLwnZyyXCIsXCJYXCJdLFtcIvCdnLNcIixcIlBTXCJdLFtcIvCdnLRcIixcIk9cIl0sW1wi8J2ctVwiLFwiRFwiXSxbXCLwnZy2XCIsXCJhXCJdLFtcIvCdnLdcIixcInZcIl0sW1wi8J2cuFwiLFwiZ1wiXSxbXCLwnZy5XCIsXCJkXCJdLFtcIvCdnLpcIixcImVcIl0sW1wi8J2cu1wiLFwielwiXSxbXCLwnZy8XCIsXCJpXCJdLFtcIvCdnL1cIixcInRoXCJdLFtcIvCdnL5cIixcImlcIl0sW1wi8J2cv1wiLFwia1wiXSxbXCLwnZ2AXCIsXCJsXCJdLFtcIvCdnYFcIixcIm1cIl0sW1wi8J2dglwiLFwiblwiXSxbXCLwnZ2DXCIsXCJrc1wiXSxbXCLwnZ2EXCIsXCJvXCJdLFtcIvCdnYVcIixcInBcIl0sW1wi8J2dhlwiLFwiclwiXSxbXCLwnZ2HXCIsXCJzXCJdLFtcIvCdnYhcIixcInNcIl0sW1wi8J2diVwiLFwidFwiXSxbXCLwnZ2KXCIsXCJ5XCJdLFtcIvCdnYtcIixcImZcIl0sW1wi8J2djFwiLFwieFwiXSxbXCLwnZ2NXCIsXCJwc1wiXSxbXCLwnZ2OXCIsXCJvXCJdLFtcIvCdnY9cIixcImFcIl0sW1wi8J2dkFwiLFwiZVwiXSxbXCLwnZ2RXCIsXCJpXCJdLFtcIvCdnZJcIixcImtcIl0sW1wi8J2dk1wiLFwiZlwiXSxbXCLwnZ2UXCIsXCJyXCJdLFtcIvCdnZVcIixcInBcIl0sW1wi8J2dllwiLFwiQVwiXSxbXCLwnZ2XXCIsXCJCXCJdLFtcIvCdnZhcIixcIkdcIl0sW1wi8J2dmVwiLFwiRFwiXSxbXCLwnZ2aXCIsXCJFXCJdLFtcIvCdnZtcIixcIlpcIl0sW1wi8J2dnFwiLFwiSVwiXSxbXCLwnZ2dXCIsXCJUSFwiXSxbXCLwnZ2eXCIsXCJJXCJdLFtcIvCdnZ9cIixcIktcIl0sW1wi8J2doFwiLFwiTFwiXSxbXCLwnZ2hXCIsXCJNXCJdLFtcIvCdnaJcIixcIk5cIl0sW1wi8J2do1wiLFwiS1NcIl0sW1wi8J2dpFwiLFwiT1wiXSxbXCLwnZ2lXCIsXCJQXCJdLFtcIvCdnaZcIixcIlJcIl0sW1wi8J2dp1wiLFwiVEhcIl0sW1wi8J2dqFwiLFwiU1wiXSxbXCLwnZ2pXCIsXCJUXCJdLFtcIvCdnapcIixcIllcIl0sW1wi8J2dq1wiLFwiRlwiXSxbXCLwnZ2sXCIsXCJYXCJdLFtcIvCdna1cIixcIlBTXCJdLFtcIvCdna5cIixcIk9cIl0sW1wi8J2dr1wiLFwiRFwiXSxbXCLwnZ2wXCIsXCJhXCJdLFtcIvCdnbFcIixcInZcIl0sW1wi8J2dslwiLFwiZ1wiXSxbXCLwnZ2zXCIsXCJkXCJdLFtcIvCdnbRcIixcImVcIl0sW1wi8J2dtVwiLFwielwiXSxbXCLwnZ22XCIsXCJpXCJdLFtcIvCdnbdcIixcInRoXCJdLFtcIvCdnbhcIixcImlcIl0sW1wi8J2duVwiLFwia1wiXSxbXCLwnZ26XCIsXCJsXCJdLFtcIvCdnbtcIixcIm1cIl0sW1wi8J2dvFwiLFwiblwiXSxbXCLwnZ29XCIsXCJrc1wiXSxbXCLwnZ2+XCIsXCJvXCJdLFtcIvCdnb9cIixcInBcIl0sW1wi8J2egFwiLFwiclwiXSxbXCLwnZ6BXCIsXCJzXCJdLFtcIvCdnoJcIixcInNcIl0sW1wi8J2eg1wiLFwidFwiXSxbXCLwnZ6EXCIsXCJ5XCJdLFtcIvCdnoVcIixcImZcIl0sW1wi8J2ehlwiLFwieFwiXSxbXCLwnZ6HXCIsXCJwc1wiXSxbXCLwnZ6IXCIsXCJvXCJdLFtcIvCdnolcIixcImFcIl0sW1wi8J2eilwiLFwiZVwiXSxbXCLwnZ6LXCIsXCJpXCJdLFtcIvCdnoxcIixcImtcIl0sW1wi8J2ejVwiLFwiZlwiXSxbXCLwnZ6OXCIsXCJyXCJdLFtcIvCdno9cIixcInBcIl0sW1wi8J2ekFwiLFwiQVwiXSxbXCLwnZ6RXCIsXCJWXCJdLFtcIvCdnpJcIixcIkdcIl0sW1wi8J2ek1wiLFwiRFwiXSxbXCLwnZ6UXCIsXCJFXCJdLFtcIvCdnpVcIixcIlpcIl0sW1wi8J2ellwiLFwiSVwiXSxbXCLwnZ6XXCIsXCJUSFwiXSxbXCLwnZ6YXCIsXCJJXCJdLFtcIvCdnplcIixcIktcIl0sW1wi8J2emlwiLFwiTFwiXSxbXCLwnZ6bXCIsXCJNXCJdLFtcIvCdnpxcIixcIk5cIl0sW1wi8J2enVwiLFwiS1NcIl0sW1wi8J2enlwiLFwiT1wiXSxbXCLwnZ6fXCIsXCJQXCJdLFtcIvCdnqBcIixcIlNcIl0sW1wi8J2eoVwiLFwiVEhcIl0sW1wi8J2eolwiLFwiU1wiXSxbXCLwnZ6jXCIsXCJUXCJdLFtcIvCdnqRcIixcIllcIl0sW1wi8J2epVwiLFwiRlwiXSxbXCLwnZ6mXCIsXCJYXCJdLFtcIvCdnqdcIixcIlBTXCJdLFtcIvCdnqhcIixcIk9cIl0sW1wi8J2eqVwiLFwiRFwiXSxbXCLwnZ6qXCIsXCJhdlwiXSxbXCLwnZ6rXCIsXCJnXCJdLFtcIvCdnqxcIixcImRcIl0sW1wi8J2erVwiLFwiZVwiXSxbXCLwnZ6uXCIsXCJ6XCJdLFtcIvCdnq9cIixcImlcIl0sW1wi8J2esFwiLFwiaVwiXSxbXCLwnZ6xXCIsXCJ0aFwiXSxbXCLwnZ6yXCIsXCJpXCJdLFtcIvCdnrNcIixcImtcIl0sW1wi8J2etFwiLFwibFwiXSxbXCLwnZ61XCIsXCJtXCJdLFtcIvCdnrZcIixcIm5cIl0sW1wi8J2et1wiLFwia3NcIl0sW1wi8J2euFwiLFwib1wiXSxbXCLwnZ65XCIsXCJwXCJdLFtcIvCdnrpcIixcInJcIl0sW1wi8J2eu1wiLFwic1wiXSxbXCLwnZ68XCIsXCJzXCJdLFtcIvCdnr1cIixcInRcIl0sW1wi8J2evlwiLFwieVwiXSxbXCLwnZ6/XCIsXCJmXCJdLFtcIvCdn4BcIixcInhcIl0sW1wi8J2fgVwiLFwicHNcIl0sW1wi8J2fglwiLFwib1wiXSxbXCLwnZ+DXCIsXCJhXCJdLFtcIvCdn4RcIixcImVcIl0sW1wi8J2fhVwiLFwiaVwiXSxbXCLwnZ+GXCIsXCJrXCJdLFtcIvCdn4dcIixcImZcIl0sW1wi8J2fiFwiLFwiclwiXSxbXCLwnZ+JXCIsXCJwXCJdLFtcIvCdn4pcIixcIkZcIl0sW1wi8J2fi1wiLFwiZlwiXSxbXCLikpxcIixcIihhKVwiXSxbXCLikp1cIixcIihiKVwiXSxbXCLikp5cIixcIihjKVwiXSxbXCLikp9cIixcIihkKVwiXSxbXCLikqBcIixcIihlKVwiXSxbXCLikqFcIixcIihmKVwiXSxbXCLikqJcIixcIihnKVwiXSxbXCLikqNcIixcIihoKVwiXSxbXCLikqRcIixcIihpKVwiXSxbXCLikqVcIixcIihqKVwiXSxbXCLikqZcIixcIihrKVwiXSxbXCLikqdcIixcIihsKVwiXSxbXCLikqhcIixcIihtKVwiXSxbXCLikqlcIixcIihuKVwiXSxbXCLikqpcIixcIihvKVwiXSxbXCLikqtcIixcIihwKVwiXSxbXCLikqxcIixcIihxKVwiXSxbXCLikq1cIixcIihyKVwiXSxbXCLikq5cIixcIihzKVwiXSxbXCLikq9cIixcIih0KVwiXSxbXCLikrBcIixcIih1KVwiXSxbXCLikrFcIixcIih2KVwiXSxbXCLikrJcIixcIih3KVwiXSxbXCLikrNcIixcIih4KVwiXSxbXCLikrRcIixcIih5KVwiXSxbXCLikrVcIixcIih6KVwiXSxbXCLikrZcIixcIihBKVwiXSxbXCLikrdcIixcIihCKVwiXSxbXCLikrhcIixcIihDKVwiXSxbXCLikrlcIixcIihEKVwiXSxbXCLikrpcIixcIihFKVwiXSxbXCLikrtcIixcIihGKVwiXSxbXCLikrxcIixcIihHKVwiXSxbXCLikr1cIixcIihIKVwiXSxbXCLikr5cIixcIihJKVwiXSxbXCLikr9cIixcIihKKVwiXSxbXCLik4BcIixcIihLKVwiXSxbXCLik4FcIixcIihMKVwiXSxbXCLik4NcIixcIihOKVwiXSxbXCLik4RcIixcIihPKVwiXSxbXCLik4VcIixcIihQKVwiXSxbXCLik4ZcIixcIihRKVwiXSxbXCLik4dcIixcIihSKVwiXSxbXCLik4hcIixcIihTKVwiXSxbXCLik4lcIixcIihUKVwiXSxbXCLik4pcIixcIihVKVwiXSxbXCLik4tcIixcIihWKVwiXSxbXCLik4xcIixcIihXKVwiXSxbXCLik41cIixcIihYKVwiXSxbXCLik45cIixcIihZKVwiXSxbXCLik49cIixcIihaKVwiXSxbXCLik5BcIixcIihhKVwiXSxbXCLik5FcIixcIihiKVwiXSxbXCLik5JcIixcIihiKVwiXSxbXCLik5NcIixcIihjKVwiXSxbXCLik5RcIixcIihlKVwiXSxbXCLik5VcIixcIihmKVwiXSxbXCLik5ZcIixcIihnKVwiXSxbXCLik5dcIixcIihoKVwiXSxbXCLik5hcIixcIihpKVwiXSxbXCLik5lcIixcIihqKVwiXSxbXCLik5pcIixcIihrKVwiXSxbXCLik5tcIixcIihsKVwiXSxbXCLik5xcIixcIihtKVwiXSxbXCLik51cIixcIihuKVwiXSxbXCLik55cIixcIihvKVwiXSxbXCLik59cIixcIihwKVwiXSxbXCLik6BcIixcIihxKVwiXSxbXCLik6FcIixcIihyKVwiXSxbXCLik6JcIixcIihzKVwiXSxbXCLik6NcIixcIih0KVwiXSxbXCLik6RcIixcIih1KVwiXSxbXCLik6VcIixcIih2KVwiXSxbXCLik6ZcIixcIih3KVwiXSxbXCLik6dcIixcIih4KVwiXSxbXCLik6hcIixcIih5KVwiXSxbXCLik6lcIixcIih6KVwiXSxbXCLEilwiLFwiQ1wiXSxbXCLEi1wiLFwiY1wiXSxbXCLEoFwiLFwiR1wiXSxbXCLEoVwiLFwiZ1wiXSxbXCLEplwiLFwiSFwiXSxbXCLEp1wiLFwiaFwiXSxbXCLFu1wiLFwiWlwiXSxbXCLFvFwiLFwielwiXSxbXCLwnZ+OXCIsXCIwXCJdLFtcIvCdn49cIixcIjFcIl0sW1wi8J2fkFwiLFwiMlwiXSxbXCLwnZ+RXCIsXCIzXCJdLFtcIvCdn5JcIixcIjRcIl0sW1wi8J2fk1wiLFwiNVwiXSxbXCLwnZ+UXCIsXCI2XCJdLFtcIvCdn5VcIixcIjdcIl0sW1wi8J2fllwiLFwiOFwiXSxbXCLwnZ+XXCIsXCI5XCJdLFtcIvCdn5hcIixcIjBcIl0sW1wi8J2fmVwiLFwiMVwiXSxbXCLwnZ+aXCIsXCIyXCJdLFtcIvCdn5tcIixcIjNcIl0sW1wi8J2fnFwiLFwiNFwiXSxbXCLwnZ+dXCIsXCI1XCJdLFtcIvCdn55cIixcIjZcIl0sW1wi8J2fn1wiLFwiN1wiXSxbXCLwnZ+gXCIsXCI4XCJdLFtcIvCdn6FcIixcIjlcIl0sW1wi8J2folwiLFwiMFwiXSxbXCLwnZ+jXCIsXCIxXCJdLFtcIvCdn6RcIixcIjJcIl0sW1wi8J2fpVwiLFwiM1wiXSxbXCLwnZ+mXCIsXCI0XCJdLFtcIvCdn6dcIixcIjVcIl0sW1wi8J2fqFwiLFwiNlwiXSxbXCLwnZ+pXCIsXCI3XCJdLFtcIvCdn6pcIixcIjhcIl0sW1wi8J2fq1wiLFwiOVwiXSxbXCLwnZ+sXCIsXCIwXCJdLFtcIvCdn61cIixcIjFcIl0sW1wi8J2frlwiLFwiMlwiXSxbXCLwnZ+vXCIsXCIzXCJdLFtcIvCdn7BcIixcIjRcIl0sW1wi8J2fsVwiLFwiNVwiXSxbXCLwnZ+yXCIsXCI2XCJdLFtcIvCdn7NcIixcIjdcIl0sW1wi8J2ftFwiLFwiOFwiXSxbXCLwnZ+1XCIsXCI5XCJdLFtcIvCdn7ZcIixcIjBcIl0sW1wi8J2ft1wiLFwiMVwiXSxbXCLwnZ+4XCIsXCIyXCJdLFtcIvCdn7lcIixcIjNcIl0sW1wi8J2fulwiLFwiNFwiXSxbXCLwnZ+7XCIsXCI1XCJdLFtcIvCdn7xcIixcIjZcIl0sW1wi8J2fvVwiLFwiN1wiXSxbXCLwnZ++XCIsXCI4XCJdLFtcIvCdn79cIixcIjlcIl0sW1wi4pGgXCIsXCIxXCJdLFtcIuKRoVwiLFwiMlwiXSxbXCLikaJcIixcIjNcIl0sW1wi4pGjXCIsXCI0XCJdLFtcIuKRpFwiLFwiNVwiXSxbXCLikaVcIixcIjZcIl0sW1wi4pGmXCIsXCI3XCJdLFtcIuKRp1wiLFwiOFwiXSxbXCLikahcIixcIjlcIl0sW1wi4pGpXCIsXCIxMFwiXSxbXCLikapcIixcIjExXCJdLFtcIuKRq1wiLFwiMTJcIl0sW1wi4pGsXCIsXCIxM1wiXSxbXCLika1cIixcIjE0XCJdLFtcIuKRrlwiLFwiMTVcIl0sW1wi4pGvXCIsXCIxNlwiXSxbXCLikbBcIixcIjE3XCJdLFtcIuKRsVwiLFwiMThcIl0sW1wi4pGyXCIsXCIxOVwiXSxbXCLikbNcIixcIjIwXCJdLFtcIuKRtFwiLFwiMVwiXSxbXCLikbVcIixcIjJcIl0sW1wi4pG2XCIsXCIzXCJdLFtcIuKRt1wiLFwiNFwiXSxbXCLikbhcIixcIjVcIl0sW1wi4pG5XCIsXCI2XCJdLFtcIuKRulwiLFwiN1wiXSxbXCLikbtcIixcIjhcIl0sW1wi4pG8XCIsXCI5XCJdLFtcIuKRvVwiLFwiMTBcIl0sW1wi4pG+XCIsXCIxMVwiXSxbXCLikb9cIixcIjEyXCJdLFtcIuKSgFwiLFwiMTNcIl0sW1wi4pKBXCIsXCIxNFwiXSxbXCLikoJcIixcIjE1XCJdLFtcIuKSg1wiLFwiMTZcIl0sW1wi4pKEXCIsXCIxN1wiXSxbXCLikoVcIixcIjE4XCJdLFtcIuKShlwiLFwiMTlcIl0sW1wi4pKHXCIsXCIyMFwiXSxbXCLikohcIixcIjEuXCJdLFtcIuKSiVwiLFwiMi5cIl0sW1wi4pKKXCIsXCIzLlwiXSxbXCLikotcIixcIjQuXCJdLFtcIuKSjFwiLFwiNS5cIl0sW1wi4pKNXCIsXCI2LlwiXSxbXCLiko5cIixcIjcuXCJdLFtcIuKSj1wiLFwiOC5cIl0sW1wi4pKQXCIsXCI5LlwiXSxbXCLikpFcIixcIjEwLlwiXSxbXCLikpJcIixcIjExLlwiXSxbXCLikpNcIixcIjEyLlwiXSxbXCLikpRcIixcIjEzLlwiXSxbXCLikpVcIixcIjE0LlwiXSxbXCLikpZcIixcIjE1LlwiXSxbXCLikpdcIixcIjE2LlwiXSxbXCLikphcIixcIjE3LlwiXSxbXCLikplcIixcIjE4LlwiXSxbXCLikppcIixcIjE5LlwiXSxbXCLikptcIixcIjIwLlwiXSxbXCLik6pcIixcIjBcIl0sW1wi4pOrXCIsXCIxMVwiXSxbXCLik6xcIixcIjEyXCJdLFtcIuKTrVwiLFwiMTNcIl0sW1wi4pOuXCIsXCIxNFwiXSxbXCLik69cIixcIjE1XCJdLFtcIuKTsFwiLFwiMTZcIl0sW1wi4pOxXCIsXCIxN1wiXSxbXCLik7JcIixcIjE4XCJdLFtcIuKTs1wiLFwiMTlcIl0sW1wi4pO0XCIsXCIyMFwiXSxbXCLik7VcIixcIjFcIl0sW1wi4pO2XCIsXCIyXCJdLFtcIuKTt1wiLFwiM1wiXSxbXCLik7hcIixcIjRcIl0sW1wi4pO5XCIsXCI1XCJdLFtcIuKTulwiLFwiNlwiXSxbXCLik7tcIixcIjdcIl0sW1wi4pO8XCIsXCI4XCJdLFtcIuKTvVwiLFwiOVwiXSxbXCLik75cIixcIjEwXCJdLFtcIuKTv1wiLFwiMFwiXSxbXCLwn5mwXCIsXCImXCJdLFtcIvCfmbFcIixcIiZcIl0sW1wi8J+ZslwiLFwiJlwiXSxbXCLwn5mzXCIsXCImXCJdLFtcIvCfmbRcIixcIiZcIl0sW1wi8J+ZtVwiLFwiJlwiXSxbXCLwn5m2XCIsJ1wiJ10sW1wi8J+Zt1wiLCdcIiddLFtcIvCfmbhcIiwnXCInXSxbXCLigL1cIixcIj8hXCJdLFtcIvCfmblcIixcIj8hXCJdLFtcIvCfmbpcIixcIj8hXCJdLFtcIvCfmbtcIixcIj8hXCJdLFtcIvCfmbxcIixcIi9cIl0sW1wi8J+ZvVwiLFwiXFxcXFwiXSxbXCLwn5yHXCIsXCJBUlwiXSxbXCLwn5yIXCIsXCJWXCJdLFtcIvCfnIlcIixcIlZcIl0sW1wi8J+chlwiLFwiVlJcIl0sW1wi8J+chVwiLFwiVkZcIl0sW1wi8J+cqVwiLFwiMlwiXSxbXCLwn5yqXCIsXCI1XCJdLFtcIvCfnaFcIixcImZcIl0sW1wi8J+dolwiLFwiV1wiXSxbXCLwn52jXCIsXCJVXCJdLFtcIvCfnadcIixcIlZcIl0sW1wi8J+dqFwiLFwiVFwiXSxbXCLwn52qXCIsXCJWXCJdLFtcIvCfnatcIixcIk1CXCJdLFtcIvCfnaxcIixcIlZCXCJdLFtcIvCfnbJcIixcIjNCXCJdLFtcIvCfnbNcIixcIjNCXCJdLFtcIvCfkq9cIixcIjEwMFwiXSxbXCLwn5SZXCIsXCJCQUNLXCJdLFtcIvCflJpcIixcIkVORFwiXSxbXCLwn5SbXCIsXCJPTiFcIl0sW1wi8J+UnFwiLFwiU09PTlwiXSxbXCLwn5SdXCIsXCJUT1BcIl0sW1wi8J+UnlwiLFwiMThcIl0sW1wi8J+UpFwiLFwiYWJjXCJdLFtcIvCflKBcIixcIkFCQ0RcIl0sW1wi8J+UoVwiLFwiYWJjZFwiXSxbXCLwn5SiXCIsXCIxMjM0XCJdLFtcIvCflKNcIixcIlQmQCVcIl0sW1wiI++4j+KDo1wiLFwiI1wiXSxbXCIq77iP4oOjXCIsXCIqXCJdLFtcIjDvuI/ig6NcIixcIjBcIl0sW1wiMe+4j+KDo1wiLFwiMVwiXSxbXCIy77iP4oOjXCIsXCIyXCJdLFtcIjPvuI/ig6NcIixcIjNcIl0sW1wiNO+4j+KDo1wiLFwiNFwiXSxbXCI177iP4oOjXCIsXCI1XCJdLFtcIjbvuI/ig6NcIixcIjZcIl0sW1wiN++4j+KDo1wiLFwiN1wiXSxbXCI477iP4oOjXCIsXCI4XCJdLFtcIjnvuI/ig6NcIixcIjlcIl0sW1wi8J+Un1wiLFwiMTBcIl0sW1wi8J+FsO+4j1wiLFwiQVwiXSxbXCLwn4Wx77iPXCIsXCJCXCJdLFtcIvCfho5cIixcIkFCXCJdLFtcIvCfhpFcIixcIkNMXCJdLFtcIvCfhb7vuI9cIixcIk9cIl0sW1wi8J+Fv1wiLFwiUFwiXSxbXCLwn4aYXCIsXCJTT1NcIl0sW1wi8J+FslwiLFwiQ1wiXSxbXCLwn4WzXCIsXCJEXCJdLFtcIvCfhbRcIixcIkVcIl0sW1wi8J+FtVwiLFwiRlwiXSxbXCLwn4W2XCIsXCJHXCJdLFtcIvCfhbdcIixcIkhcIl0sW1wi8J+FuFwiLFwiSVwiXSxbXCLwn4W5XCIsXCJKXCJdLFtcIvCfhbpcIixcIktcIl0sW1wi8J+Fu1wiLFwiTFwiXSxbXCLwn4W8XCIsXCJNXCJdLFtcIvCfhb1cIixcIk5cIl0sW1wi8J+GgFwiLFwiUVwiXSxbXCLwn4aBXCIsXCJSXCJdLFtcIvCfhoJcIixcIlNcIl0sW1wi8J+Gg1wiLFwiVFwiXSxbXCLwn4aEXCIsXCJVXCJdLFtcIvCfhoVcIixcIlZcIl0sW1wi8J+GhlwiLFwiV1wiXSxbXCLwn4aHXCIsXCJYXCJdLFtcIvCfhohcIixcIllcIl0sW1wi8J+GiVwiLFwiWlwiXV07ZnVuY3Rpb24gaChvLGgpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBvKXRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIGEgc3RyaW5nLCBnb3QgXFxgJHt0eXBlb2Ygb31cXGBgKTtoPXQoe2N1c3RvbVJlcGxhY2VtZW50czpbXX0saCk7Y29uc3Qgcj1uZXcgTWFwKFsuLi5zLC4uLmguY3VzdG9tUmVwbGFjZW1lbnRzXSk7cmV0dXJuIG89KChlLHQpPT57Zm9yKGNvbnN0W28sc11vZiB0KWU9ZS5yZXBsYWNlKG5ldyBSZWdFeHAoYShvKSxcImdcIikscyk7cmV0dXJuIGV9KShvPW8ubm9ybWFsaXplKCksciksZShvKX1leHBvcnR7aCBhcyBkZWZhdWx0fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1vZGVybi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stream-io/transliterate/dist/index.modern.js\n");

/***/ })

};
;